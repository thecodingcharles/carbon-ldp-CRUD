{"version":3,"sources":["Repository/Repository.ts"],"names":[],"mappings":";;AAAA,qEAAoE;AAGpE,0DAAyD;AAgHzD,SAAS,qBAAqB;IAC7B,OAAO,OAAO,CAAC,MAAM,CAAE,IAAI,yCAAmB,CAAE,+DAA+D,CAAE,CAAE,CAAC;AACrH,CAAC;AAaY,QAAA,UAAU,GAAqB;IAC3C,SAAS,EAAE;QACV,GAAG,EAAE,qBAAqB;QAC1B,OAAO,EAAE,qBAAqB;QAC9B,MAAM,EAAE,qBAAqB;QAE7B,OAAO,EAAE,qBAAqB;QAC9B,IAAI,EAAE,qBAAqB;QAC3B,cAAc,EAAE,qBAAqB;QAErC,MAAM,EAAE,qBAAqB;KAC7B;IAGD,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,+BAAc;aACnB,iBAAiB,CAAE,kBAAU,CAAC,SAAS,EAAE,MAAM,CAAE,CACjD;IACH,CAAC;IAED,QAAQ,EAAR,UAAoC,MAAQ;QAC3C,IAAI,kBAAU,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO;QAE9C,OAAO,+BAAc;aACnB,oBAAoB,CAAE,kBAAU,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IACxD,CAAC;CACD,CAAC","file":"Repository.js","sourcesContent":["import { NotImplementedError } from \"../Errors/NotImplementedError\";\n\nimport { BiModelDecorator } from \"../Model/BiModelDecorator\";\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\n\nimport { ObjectSchemaResolver } from \"../ObjectSchema/ObjectSchemaResolver\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { $BaseRepository, BaseRepository } from \"./BaseRepository\";\nimport { ResolvablePointer } from \"./ResolvablePointer\";\n\n\n/**\n * Interface with the base methods of a service that manages request of an specific type of resources.\n */\nexport interface Repository<MODEL extends ResolvablePointer = ResolvablePointer> {\n\t/**\n\t * Retrieves the resources of the specified URI.\n\t * @param uri URI of the resource to retrieve.\n\t * @param params Rest params of the method.\n\t */\n\tget( uri:string, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Resolve the specified resource.\n\t * @param resource Resource to resolve.\n\t * @param params Rest params of the method.\n\t */\n\tresolve( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Checks if the resource of the specified URI exists.\n\t * @param uri URI of the resource to check.\n\t * @param params Rest params of the method.\n\t */\n\texists( uri:string, ...params:any[] ):Promise<boolean>;\n\n\t/**\n\t * Refreshes the data of the specified resource.\n\t * @param resource Resource to refresh.\n\t * @param params Rest params of the method.\n\t */\n\trefresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Saves the changes of the specified resource.\n\t * @param resource Resource to save.\n\t * @param params Rest params of the method.\n\t */\n\tsave( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Saves the changes of the specified resource and retrieves its latest changes.\n\t * @param resource Resource to save and refresh.\n\t * @param params Rest params of the method.\n\t */\n\tsaveAndRefresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\n\t/**\n\t * Deletes the resource of the specified URI.\n\t * @param uri URI of the resource to delete.\n\t * @param params Rest params of the method.\n\t */\n\tdelete( uri:string, ...params:any[] ):Promise<void>;\n}\n\n/**\n * Interface with the base methods of a model that manages request of an specific type of resources.\n */\nexport interface $Repository<MODEL extends ResolvablePointer = ResolvablePointer> extends Pointer {\n\t/**\n\t * Retrieves the resources of the specified URI.\n\t * @param uri URI of the resource to retrieve.\n\t * @param params Rest params of the method.\n\t */\n\t$get( uri:string, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Resolve the specified resource.\n\t * @param resource Resource to resolve.\n\t * @param params Rest params of the method.\n\t */\n\t$resolve( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Checks if the resource of the specified URI exists.\n\t * @param uri URI of the resource to check.\n\t * @param params Rest params of the method.\n\t */\n\t$exists( uri:string, ...params:any[] ):Promise<boolean>;\n\n\t/**\n\t * Refreshes the data of the specified resource.\n\t * @param resource Resource to refresh.\n\t * @param params Rest params of the method.\n\t */\n\t$refresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Saves the changes of the specified resource.\n\t * @param resource Resource to save.\n\t * @param params Rest params of the method.\n\t */\n\t$save( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\t/**\n\t * Saves the changes of the specified resource and retrieves its latest changes.\n\t * @param resource Resource to save and refresh.\n\t * @param params Rest params of the method.\n\t */\n\t$saveAndRefresh( resource:MODEL, ...params:any[] ):Promise<MODEL>;\n\n\t/**\n\t * Deletes the resource of the specified URI.\n\t * @param uri URI of the resource to delete.\n\t * @param params Rest params of the method.\n\t */\n\t$delete( uri:string, ...params:any[] ):Promise<void>;\n}\n\n\nfunction __throwNotImplemented():Promise<never> {\n\treturn Promise.reject( new NotImplementedError( \"Must be implemented for a specific repository implementation.\" ) );\n}\n\n/**\n * Factory, decorator and utils for {@link Repository}.\n */\nexport type RepositoryFactory =\n\t& ModelPrototype<Repository, BaseRepository & ObjectSchemaResolver>\n\t& BiModelDecorator<Repository<any>, $Repository<any>, BaseRepository, $BaseRepository>\n\t;\n\n/**\n * Constant that implements {@link RepositoryFactory}.\n */\nexport const Repository:RepositoryFactory = {\n\tPROTOTYPE: {\n\t\tget: __throwNotImplemented,\n\t\tresolve: __throwNotImplemented,\n\t\texists: __throwNotImplemented,\n\n\t\trefresh: __throwNotImplemented,\n\t\tsave: __throwNotImplemented,\n\t\tsaveAndRefresh: __throwNotImplemented,\n\n\t\tdelete: __throwNotImplemented,\n\t},\n\n\n\tisDecorated( object:object ):object is any {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( Repository.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseRepository>( object:T ):T & any {\n\t\tif( Repository.isDecorated( object ) ) return;\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( Repository.PROTOTYPE, object );\n\t},\n};\n"],"sourceRoot":"../../src"}