import { ModelDecorator } from "../Model/ModelDecorator";
import { ModelPrototype } from "../Model/ModelPrototype";
import { ModelTypeGuard } from "../Model/ModelTypeGuard";
import { Pointer } from "../Pointer/Pointer";
import { BaseResolvablePointer } from "./BaseResolvablePointer";
import { $Repository, Repository } from "./Repository";
export interface ResolvablePointer extends Pointer, $Repository {
    $repository: Repository | $Repository;
    $eTag: string | undefined | null;
    $_resolved: boolean;
    $_snapshot: object;
    $isResolved(): boolean;
    $_syncSnapshot(): void;
    $isDirty(): boolean;
    $revert(): void;
    $get(...params: any[]): Promise<ResolvablePointer>;
    $get(uri: string, ...params: any[]): Promise<ResolvablePointer>;
    $resolve(...params: any[]): Promise<ResolvablePointer>;
    $resolve(resource: ResolvablePointer, ...params: any[]): Promise<ResolvablePointer>;
    $exists(...params: any[]): Promise<boolean>;
    $exists(uri: string, ...params: any[]): Promise<boolean>;
    $refresh(...params: any[]): Promise<ResolvablePointer>;
    $refresh(resource: ResolvablePointer, ...params: any[]): Promise<ResolvablePointer>;
    $save(...params: any[]): Promise<ResolvablePointer>;
    $save(resource: ResolvablePointer, ...params: any[]): Promise<ResolvablePointer>;
    $saveAndRefresh(...params: any[]): Promise<ResolvablePointer>;
    $saveAndRefresh(resource: ResolvablePointer, ...params: any[]): Promise<ResolvablePointer>;
    $delete(...params: any[]): Promise<void>;
    $delete(uri: string, ...params: any[]): Promise<void>;
}
export declare type ResolvablePointerFactory = ModelPrototype<ResolvablePointer, Pointer> & ModelDecorator<ResolvablePointer, BaseResolvablePointer> & ModelTypeGuard<ResolvablePointer>;
export declare const ResolvablePointer: ResolvablePointerFactory;
