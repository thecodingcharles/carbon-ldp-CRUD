{"version":3,"sources":["Pointer/Pointer.ts"],"names":[],"mappings":";;AAAA,0DAAyD;AAKzD,kCAAoC;AAuDvB,QAAA,OAAO,GAAkB;IACrC,SAAS,EAAE;QACV,IAAI,GAAG,KAAY,OAAO,EAAE,CAAC,CAAC,CAAC;KAC/B;IAGD,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,+BAAc;aACnB,iBAAiB,CAAE,eAAO,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IAClD,CAAC;IAED,QAAQ,EAAR,UAA4B,MAAQ;QACnC,IAAI,eAAO,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAElD,OAAO,+BAAc;aACnB,oBAAoB,CAAE,eAAO,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IACrD,CAAC;IAGD,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,gBAAQ,CAAE,KAAK,CAAE;eACpB,eAAO,CAAC,WAAW,CAAE,KAAK,CAAE,CAC9B;IACH,CAAC;IAED,MAAM,EAAN,UAA0B,IAAqB;QAC9C,IAAM,KAAK,GAAK,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC1C,OAAO,eAAO,CAAC,UAAU,CAAK,KAAK,CAAE,CAAC;IACvC,CAAC;IAED,UAAU,EAAV,UAA8B,MAAsB;QACnD,OAAO,eAAO,CAAC,QAAQ,CAAK,MAAM,CAAE,CAAC;IACtC,CAAC;IAGD,QAAQ,EAAR,UAAU,QAAgB,EAAE,QAAgB;QAC3C,OAAO,QAAQ,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG,CAAC;IACtC,CAAC;IAED,MAAM,EAAN,UAAQ,QAAkB;QACzB,OAAO,QAAQ;aACb,GAAG,CAAE,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,GAAG,EAAX,CAAW,CAAE,CAC7B;IACH,CAAC;IAED,KAAK,EAAL,UAAO,YAA6B;QACnC,OAAO,gBAAQ,CAAE,YAAY,CAAE,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC;IACnE,CAAC;CACD,CAAC","file":"Pointer.js","sourcesContent":["import { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\nimport { ModelTypeGuard } from \"../Model/ModelTypeGuard\";\n\nimport { isObject } from \"../Utils\";\n\nimport { BasePointer } from \"./BasePointer\";\n\n\n/**\n * Interface that represents the base to any model that can be referenced by a URI.\n */\nexport interface Pointer {\n\t/**\n\t * The URI that identifies the pointer.\n\t */\n\t$id:string;\n}\n\n\n// TODO: Change to type-alias\n/**\n * Factory, decorator and utils for {@link Pointer}.\n */\nexport interface PointerFactory extends ModelPrototype<Pointer>\n\t, ModelDecorator<Pointer, BasePointer>\n\t, ModelTypeGuard<Pointer>\n\t, ModelFactory<Pointer, BasePointer> {\n\n\t/**\n\t * Creates a pointer object with the ID provided.\n\t * @param data The optional data to use in the pointer creation.\n\t */\n\tcreate<T extends object>( data?:T & BasePointer ):T & Pointer;\n\n\n\t/**\n\t * Checks if the objects refer to the same resource by its ID.\n\t * @param pointer1\n\t * @param pointer2\n\t */\n\tareEqual( pointer1:Pointer, pointer2:Pointer ):boolean;\n\n\t/**\n\t * Extracts the IDs of all the pointers provided.\n\t * @param pointers The array of pointers to obtain their IDs.\n\t */\n\tgetIDs( pointers:Pointer[] ):string[];\n\n\t/**\n\t * Extract the IF of the pointer provided.\n\t * @param pointerOrIRI Pointer to extract its ID, or the URI that will be immediately returned.\n\t */\n\tgetID( pointerOrIRI:Pointer | string ):string;\n}\n\n/**\n * Constant that implements {@link PointerFactory}.\n */\nexport const Pointer:PointerFactory = {\n\tPROTOTYPE: {\n\t\tget $id():string { return \"\"; },\n\t},\n\n\n\tisDecorated( object:object ):object is Pointer {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( Pointer.PROTOTYPE, object );\n\t},\n\n\tdecorate<T extends object>( object:T ):T & Pointer {\n\t\tif( Pointer.isDecorated( object ) ) return object;\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( Pointer.PROTOTYPE, object );\n\t},\n\n\n\tis( value:any ):value is Pointer {\n\t\treturn isObject( value )\n\t\t\t&& Pointer.isDecorated( value )\n\t\t\t;\n\t},\n\n\tcreate<T extends object>( data?:T & BasePointer ):T & Pointer {\n\t\tconst clone:T = Object.assign( {}, data );\n\t\treturn Pointer.createFrom<T>( clone );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BasePointer ):T & Pointer {\n\t\treturn Pointer.decorate<T>( object );\n\t},\n\n\n\tareEqual( pointer1:Pointer, pointer2:Pointer ):boolean {\n\t\treturn pointer1.$id === pointer2.$id;\n\t},\n\n\tgetIDs( pointers:Pointer[] ):string[] {\n\t\treturn pointers\n\t\t\t.map( pointer => pointer.$id )\n\t\t\t;\n\t},\n\n\tgetID( pointerOrIRI:Pointer | string ):string {\n\t\treturn isObject( pointerOrIRI ) ? pointerOrIRI.$id : pointerOrIRI;\n\t},\n};\n"],"sourceRoot":"../../src"}