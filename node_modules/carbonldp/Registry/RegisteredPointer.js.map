{"version":3,"sources":["Registry/RegisteredPointer.ts"],"names":[],"mappings":";;AAAA,uEAAsE;AAEtE,0DAAyD;AAKzD,8CAA6C;AA8BhC,QAAA,iBAAiB,GAA4B;IACzD,SAAS,EAAE;QACV,IAAI,SAAS;YACZ,MAAM,IAAI,2CAAoB,CAAE,qCAAmC,CAAE,CAAC;QACvE,CAAC;KACD;IAGD,WAAW,EAAX,UAAa,MAAa;QACzB,OAAO,+BAAc;aACnB,iBAAiB,CAAE,yBAAiB,CAAC,SAAS,EAAE,MAAM,CAAE,CAAC;IAC5D,CAAC;IAED,QAAQ,EAAR,UAA2C,MAAQ;QAClD,IAAI,yBAAiB,CAAC,WAAW,CAAE,MAAM,CAAE;YAAG,OAAO,MAAM,CAAC;QAE5D,IAAM,QAAQ,GAAe,+BAAc;aACzC,gBAAgB,CAAE,MAAM,EAAE,iBAAO,CAAE,CAAC;QAEtC,OAAO,+BAAc;aACnB,oBAAoB,CAAE,yBAAiB,CAAC,SAAS,EAAE,QAAQ,CAAE,CAAC;IACjE,CAAC;IAGD,MAAM,EAAN,UAA0B,IAA8B;QACvD,IAAM,IAAI,GAA6B,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QACjE,OAAO,yBAAiB,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IAC7C,CAAC;IAED,UAAU,EAAV,UAA8B,MAAgC;QAC7D,OAAO,yBAAiB,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;IAC7C,CAAC;IAED,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,iBAAO,CAAC,EAAE,CAAE,KAAK,CAAE;eACtB,yBAAiB,CAAC,WAAW,CAAE,KAAK,CAAE,CACxC;IACH,CAAC;CACD,CAAC","file":"RegisteredPointer.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\nimport { ModelTypeGuard } from \"../Model/ModelTypeGuard\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { BaseRegisteredPointer } from \"./BaseRegisteredPointer\";\nimport { $Registry, Registry } from \"./Registry\";\n\n\n/**\n * Interface that represents the base to any model that can be registered in any {@link Registry}/{@link $Registry}.\n */\nexport interface RegisteredPointer extends Pointer {\n\t/**\n\t * Registry the current pointer belongs to.\n\t */\n\t$registry:Registry<RegisteredPointer> | $Registry<RegisteredPointer> | undefined;\n}\n\n\n/**\n * Factory, decorator and utils for {@link RegisteredPointer}.\n */\nexport type RegisteredPointerFactory =\n\t& ModelPrototype<RegisteredPointer, Pointer>\n\t& ModelDecorator<RegisteredPointer, BaseRegisteredPointer>\n\t& ModelFactory<RegisteredPointer, BaseRegisteredPointer>\n\t& ModelTypeGuard<RegisteredPointer>\n\t;\n\n/**\n * Constant that implements {@link RegisteredPointerFactory}\n */\nexport const RegisteredPointer:RegisteredPointerFactory = {\n\tPROTOTYPE: {\n\t\tget $registry():Registry {\n\t\t\tthrow new IllegalArgumentError( `Property \"$registry\" is required.` );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is RegisteredPointer {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( RegisteredPointer.PROTOTYPE, object );\n\t},\n\n\tdecorate<T extends BaseRegisteredPointer>( object:T ):T & RegisteredPointer {\n\t\tif( RegisteredPointer.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & Pointer = ModelDecorator\n\t\t\t.decorateMultiple( object, Pointer );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( RegisteredPointer.PROTOTYPE, resource );\n\t},\n\n\n\tcreate<T extends object>( data:T & BaseRegisteredPointer ):T & RegisteredPointer {\n\t\tconst copy:T & BaseRegisteredPointer = Object.assign( {}, data );\n\t\treturn RegisteredPointer.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseRegisteredPointer ):T & RegisteredPointer {\n\t\treturn RegisteredPointer.decorate( object );\n\t},\n\n\tis( value:any ):value is RegisteredPointer {\n\t\treturn Pointer.is( value )\n\t\t\t&& RegisteredPointer.isDecorated( value )\n\t\t\t;\n\t},\n};\n"],"sourceRoot":"../../src"}