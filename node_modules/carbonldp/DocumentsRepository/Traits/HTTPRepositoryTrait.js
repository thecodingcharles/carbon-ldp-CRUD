"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var IllegalArgumentError_1 = require("../../Errors/IllegalArgumentError");
var GeneralRepository_1 = require("../../GeneralRepository/GeneralRepository");
var Request_1 = require("../../HTTP/Request");
var ModelDecorator_1 = require("../../Model/ModelDecorator");
var ResolvablePointer_1 = require("../../Repository/ResolvablePointer");
exports.HTTPRepositoryTrait = {
    PROTOTYPE: {
        get: function (uri, requestOptions) {
            var _this = this;
            if (!this.context.registry.inScope(uri, true))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("\"" + uri + "\" is out of scope."));
            var url = this.context.getObjectSchema().resolveURI(uri, { base: true });
            if (this.context.registry.hasPointer(url, true)) {
                var resource = this.context.registry.getPointer(url, true);
                if (resource.$isResolved() && !(requestOptions && requestOptions.ensureLatest))
                    return Promise.resolve(resource);
            }
            return Request_1.RequestService
                .get(url, requestOptions)
                .then(function (response) {
                return _this._parseResponseData(response, url);
            });
        },
        resolve: function (resource, requestOptions) {
            return this.get(resource.$id, requestOptions);
        },
        exists: function (uri, requestOptions) {
            if (!this.context.registry.inScope(uri, true))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("\"" + uri + "\" is out of scope."));
            var url = this.context.getObjectSchema().resolveURI(uri, { base: true });
            return Request_1.RequestService
                .head(url, requestOptions)
                .then(function () { return true; })
                .catch(function (error) {
                if ("response" in error && error.response.status === 404)
                    return false;
                return Promise.reject(error);
            });
        },
        refresh: function (resource, requestOptions) {
            var _this = this;
            if (!ResolvablePointer_1.ResolvablePointer.is(resource))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("The resource isn't a resolvable pointer."));
            if (!this.context.registry.inScope(resource.$id, true))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("\"" + resource.$id + "\" is out of scope."));
            var url = this.context.getObjectSchema().resolveURI(resource.$id, { base: true });
            return Request_1.RequestService
                .get(url, requestOptions)
                .then(function (response) {
                return _this._parseResponseData(response, url);
            })
                .catch(function (error) {
                if ("response" in error && error.response.status === 304)
                    return resource;
                return Promise.reject(error);
            });
        },
        save: function (resource, requestOptions) {
            if (!ResolvablePointer_1.ResolvablePointer.is(resource))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("The resource isn't a resolvable pointer."));
            if (!this.context.registry.inScope(resource.$id, true))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("\"" + resource.$id + "\" is out of scope."));
            var url = this.context.getObjectSchema().resolveURI(resource.$id, { base: true });
            if (!resource.$isDirty())
                return Promise.resolve(resource);
            var body = JSON.stringify(resource);
            return Request_1.RequestService
                .put(url, body, requestOptions)
                .then(function () { return resource; });
        },
        saveAndRefresh: function (resource, requestOptions) {
            var _this = this;
            return this
                .save(resource, requestOptions)
                .then(function () { return _this.refresh(resource, requestOptions); });
        },
        delete: function (uri, requestOptions) {
            var _this = this;
            if (!this.context.registry.inScope(uri, true))
                return Promise.reject(new IllegalArgumentError_1.IllegalArgumentError("\"" + uri + "\" is out of scope."));
            var url = this.context.getObjectSchema().resolveURI(uri, { base: true });
            return Request_1.RequestService
                .delete(url, requestOptions)
                .then(function () {
                _this.context.registry.removePointer(url);
            });
        },
        _parseResponseData: function (response, id) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var resolvable;
                return tslib_1.__generator(this, function (_a) {
                    resolvable = this.context.registry
                        .getPointer(id, true);
                    resolvable.$eTag = response.getETag();
                    resolvable.$_resolved = true;
                    return [2, resolvable];
                });
            });
        },
    },
    isDecorated: function (object) {
        return ModelDecorator_1.ModelDecorator
            .hasPropertiesFrom(exports.HTTPRepositoryTrait.PROTOTYPE, object);
    },
    decorate: function (object) {
        if (exports.HTTPRepositoryTrait.isDecorated(object))
            return object;
        var resource = ModelDecorator_1.ModelDecorator
            .decorateMultiple(object, GeneralRepository_1.GeneralRepository);
        return ModelDecorator_1.ModelDecorator
            .definePropertiesFrom(exports.HTTPRepositoryTrait.PROTOTYPE, resource);
    },
};

//# sourceMappingURL=HTTPRepositoryTrait.js.map
