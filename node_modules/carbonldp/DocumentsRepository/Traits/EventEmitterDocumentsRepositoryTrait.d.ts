import { DocumentsContext } from "../../Context/DocumentsContext";
import { Document } from "../../Document/Document";
import { GeneralRepository } from "../../GeneralRepository/GeneralRepository";
import { ChildCreatedEvent } from "../../Messaging/ChildCreatedEvent";
import { DocumentDeletedEvent } from "../../Messaging/DocumentDeletedEvent";
import { DocumentModifiedEvent } from "../../Messaging/DocumentModifiedEvent";
import { Event } from "../../Messaging/Event";
import { EventMessage } from "../../Messaging/EventMessage";
import { MemberAddedEvent } from "../../Messaging/MemberAddedEvent";
import { MemberRemovedEvent } from "../../Messaging/MemberRemovedEvent";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { ModelPrototype } from "../../Model/ModelPrototype";
import { BaseDocumentsRepository } from "../BaseDocumentsRepository";
export interface EventEmitterDocumentsRepositoryTrait extends GeneralRepository<Document> {
    readonly context: DocumentsContext;
    on(event: Event.CHILD_CREATED, uriPattern: string, onEvent: (message: ChildCreatedEvent) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_MODIFIED, uriPattern: string, onEvent: (message: DocumentModifiedEvent) => void, onError?: (error: Error) => void): void;
    on(event: Event.DOCUMENT_DELETED, uriPattern: string, onEvent: (message: DocumentDeletedEvent) => void, onError?: (error: Error) => void): void;
    on(event: Event.MEMBER_ADDED, uriPattern: string, onEvent: (message: MemberAddedEvent) => void, onError?: (error: Error) => void): void;
    on(event: Event.MEMBER_REMOVED, uriPattern: string, onEvent: (message: MemberRemovedEvent) => void, onError?: (error: Error) => void): void;
    on(event: Event | string, uriPattern: string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    off(event: Event.CHILD_CREATED, uriPattern: string, onEvent: (message: ChildCreatedEvent) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_MODIFIED, uriPattern: string, onEvent: (message: DocumentModifiedEvent) => void, onError?: (error: Error) => void): void;
    off(event: Event.DOCUMENT_DELETED, uriPattern: string, onEvent: (message: DocumentDeletedEvent) => void, onError?: (error: Error) => void): void;
    off(event: Event.MEMBER_ADDED, uriPattern: string, onEvent: (message: MemberAddedEvent) => void, onError?: (error: Error) => void): void;
    off(event: Event.MEMBER_REMOVED, uriPattern: string, onEvent: (message: MemberRemovedEvent) => void, onError?: (error: Error) => void): void;
    off(event: Event | string, uriPattern: string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    one(event: Event.CHILD_CREATED, uriPattern: string, onEvent: (message: ChildCreatedEvent) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_MODIFIED, uriPattern: string, onEvent: (message: DocumentModifiedEvent) => void, onError?: (error: Error) => void): void;
    one(event: Event.DOCUMENT_DELETED, uriPattern: string, onEvent: (message: DocumentDeletedEvent) => void, onError?: (error: Error) => void): void;
    one(event: Event.MEMBER_ADDED, uriPattern: string, onEvent: (message: MemberAddedEvent) => void, onError?: (error: Error) => void): void;
    one(event: Event.MEMBER_REMOVED, uriPattern: string, onEvent: (message: MemberRemovedEvent) => void, onError?: (error: Error) => void): void;
    one(event: Event | string, uriPattern: string, onEvent: (message: EventMessage) => void, onError?: (error: Error) => void): void;
    onChildCreated(uriPattern: string, onEvent: (message: ChildCreatedEvent) => void, onError?: (error: Error) => void): void;
    onDocumentModified(uriPattern: string, onEvent: (message: DocumentModifiedEvent) => void, onError?: (error: Error) => void): void;
    onDocumentDeleted(uriPattern: string, onEvent: (message: DocumentDeletedEvent) => void, onError?: (error: Error) => void): void;
    onMemberAdded(uriPattern: string, onEvent: (message: MemberAddedEvent) => void, onError?: (error: Error) => void): void;
    onMemberRemoved(uriPattern: string, onEvent: (message: MemberRemovedEvent) => void, onError?: (error: Error) => void): void;
}
export declare type EventEmitterDocumentsRepositoryTraitFactory = ModelPrototype<EventEmitterDocumentsRepositoryTrait, GeneralRepository<Document>> & ModelDecorator<EventEmitterDocumentsRepositoryTrait, BaseDocumentsRepository>;
export declare const EventEmitterDocumentsRepositoryTrait: EventEmitterDocumentsRepositoryTraitFactory;
