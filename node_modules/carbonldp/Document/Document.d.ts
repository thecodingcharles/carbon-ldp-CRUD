import { AccessPoint } from "../AccessPoint/AccessPoint";
import { DocumentsRegistry } from "../DocumentsRegistry/DocumentsRegistry";
import { DocumentsRepository } from "../DocumentsRepository/DocumentsRepository";
import { Fragment } from "../Fragment/Fragment";
import { GETOptions, RequestOptions } from "../HTTP/Request";
import { ModelDecorator } from "../Model/ModelDecorator";
import { ModelFactory } from "../Model/ModelFactory";
import { ModelPrototype } from "../Model/ModelPrototype";
import { ModelSchema } from "../Model/ModelSchema";
import { ModelTypeGuard } from "../Model/ModelTypeGuard";
import { QueryDocumentBuilder } from "../QueryDocuments/QueryDocumentBuilder";
import { RegisteredPointer } from "../Registry/RegisteredPointer";
import { $Registry } from "../Registry/Registry";
import { C } from "../Vocabularies/C";
import { BaseDocument } from "./BaseDocument";
import { EventEmitterDocumentTrait } from "./Traits/EventEmitterDocumentTrait";
import { QueryableDocumentTrait } from "./Traits/QueryableDocumentTrait";
import { SPARQLDocumentTrait } from "./Traits/SPARQLDocumentTrait";
import { TransientDocument } from "./TransientDocument";
export interface BaseResolvableDocument extends BaseDocument {
    $registry: DocumentsRegistry;
    $repository: DocumentsRepository;
}
export interface Document extends /*$Registry<Fragment>*/ QueryableDocumentTrait, SPARQLDocumentTrait, EventEmitterDocumentTrait {
    $registry: DocumentsRegistry;
    $repository: DocumentsRepository;
    $__modelDecorator: ModelDecorator<Fragment>;
    $__resourcesMap: Map<string, Fragment>;
    $__savedFragments: Fragment[];
    created?: Date;
    modified?: Date;
    accessPoints?: AccessPoint[];
    contains?: Document[];
    $getPointer(id: string): RegisteredPointer;
    $getPointer(id: string, local: true): Fragment;
    $getPointers(): RegisteredPointer[];
    $getPointers(local: true): Fragment[];
    $_syncSavedFragments(): void;
    $getFragment<T extends object>(id: string): (T & Fragment) | null;
    $getFragments(): Fragment[];
    $createFragment<T extends object>(object: T, id?: string): T & Fragment;
    $createFragment(slug?: string): Fragment;
    $removeFragment(slugOrFragment: string | Fragment): boolean;
    $get<T extends object>(queryBuilderFn: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & Document>;
    $get<T extends object>(requestOptions?: GETOptions, queryBuilderFn?: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & Document>;
    $get<T extends object>(uri: string, queryBuilderFn: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & Document>;
    $get<T extends object>(uri: string, requestOptions?: GETOptions, queryBuilderFn?: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & Document>;
    $get<T extends object>(uris: string[], queryBuilderFn: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<(T & Document)[]>;
    $get<T extends object>(uris: string[], requestOptions?: GETOptions, queryBuilderFn?: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<(T & Document)[]>;
    $resolve<T extends object>(requestOptions?: GETOptions, queryBuilderFn?: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & this & Document>;
    $resolve<T extends object>(queryBuilderFn?: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & this & Document>;
    $resolve<T extends object>(document: Document, queryBuilderFn: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & Document>;
    $resolve<T extends object>(document: Document, requestOptions?: GETOptions, queryBuilderFn?: (queryBuilder: QueryDocumentBuilder) => QueryDocumentBuilder): Promise<T & Document>;
    $exists(requestOptions?: RequestOptions): Promise<boolean>;
    $exists(uri: string, requestOptions?: RequestOptions): Promise<boolean>;
    $refresh<T extends object>(requestOptions?: RequestOptions): Promise<T & this>;
    $refresh<T extends object>(document: Document, requestOptions?: RequestOptions): Promise<T & Document>;
    $save<T extends object>(requestOptions?: RequestOptions): Promise<T & this>;
    $save<T extends object>(document: Document, requestOptions?: RequestOptions): Promise<T & Document>;
    $saveAndRefresh<T extends object>(requestOptions?: RequestOptions): Promise<T & this>;
    $saveAndRefresh<T extends object>(document: Document, requestOptions?: RequestOptions): Promise<T & Document>;
    $delete(requestOptions?: RequestOptions): Promise<void>;
    $delete(uri: string, requestOptions?: RequestOptions): Promise<void>;
}
export declare type OverriddenMembers = "$_syncSnapshot" | "$isDirty" | "$revert";
export declare type DocumentFactory = ModelSchema<C["Document"]> & ModelPrototype<Document, SPARQLDocumentTrait & EventEmitterDocumentTrait & QueryableDocumentTrait, OverriddenMembers> & ModelDecorator<Document, BaseResolvableDocument> & ModelTypeGuard<Document> & ModelFactory<TransientDocument, BaseDocument>;
export declare const Document: DocumentFactory;
