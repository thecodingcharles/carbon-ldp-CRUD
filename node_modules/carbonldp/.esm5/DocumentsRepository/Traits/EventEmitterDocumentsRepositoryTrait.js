import { GeneralRepository } from "../../GeneralRepository/GeneralRepository";
import { Event } from "../../Messaging/Event";
import { _createDestination } from "../../Messaging/Utils";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { isObject } from "../../Utils";
export var EventEmitterDocumentsRepositoryTrait = {
    PROTOTYPE: {
        on: function (event, uriPattern, onEvent, onError) {
            try {
                var destination = _createDestination(event, uriPattern, this.context.baseURI);
                this.context.messaging.subscribe(destination, onEvent, onError);
            }
            catch (error) {
                if (!onError)
                    throw error;
                onError(error);
            }
        },
        off: function (event, uriPattern, onEvent, onError) {
            try {
                var destination = _createDestination(event, uriPattern, this.context.baseURI);
                this.context.messaging.unsubscribe(destination, onEvent);
            }
            catch (error) {
                if (!onError)
                    throw error;
                onError(error);
            }
        },
        one: function (event, uriPattern, onEvent, onError) {
            var _this = this;
            try {
                var destination_1 = _createDestination(event, uriPattern, this.context.baseURI);
                var onEventWrapper_1 = function (message) {
                    onEvent(message);
                    _this.context.messaging.unsubscribe(destination_1, onEventWrapper_1);
                };
                this.context.messaging.subscribe(destination_1, onEventWrapper_1, onError);
            }
            catch (error) {
                if (!onError)
                    throw error;
                onError(error);
            }
        },
        onChildCreated: function (uriPattern, onEvent, onError) {
            return this.on(Event.CHILD_CREATED, uriPattern, onEvent, onError);
        },
        onDocumentModified: function (uriPattern, onEvent, onError) {
            return this.on(Event.DOCUMENT_MODIFIED, uriPattern, onEvent, onError);
        },
        onDocumentDeleted: function (uriPattern, onEvent, onError) {
            return this.on(Event.DOCUMENT_DELETED, uriPattern, onEvent, onError);
        },
        onMemberAdded: function (uriPattern, onEvent, onError) {
            return this.on(Event.MEMBER_ADDED, uriPattern, onEvent, onError);
        },
        onMemberRemoved: function (uriPattern, onEvent, onError) {
            return this.on(Event.MEMBER_REMOVED, uriPattern, onEvent, onError);
        },
    },
    isDecorated: function (object) {
        return isObject(object)
            && ModelDecorator
                .hasPropertiesFrom(EventEmitterDocumentsRepositoryTrait.PROTOTYPE, object);
    },
    decorate: function (object) {
        if (EventEmitterDocumentsRepositoryTrait.isDecorated(object))
            return object;
        var resource = ModelDecorator
            .decorateMultiple(object, GeneralRepository);
        return ModelDecorator
            .definePropertiesFrom(EventEmitterDocumentsRepositoryTrait.PROTOTYPE, resource);
    },
};

//# sourceMappingURL=EventEmitterDocumentsRepositoryTrait.js.map
