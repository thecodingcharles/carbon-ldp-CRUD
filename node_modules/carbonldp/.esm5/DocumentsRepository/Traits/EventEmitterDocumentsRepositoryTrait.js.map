{"version":3,"sources":["DocumentsRepository/Traits/EventEmitterDocumentsRepositoryTrait.ts"],"names":[],"mappings":"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","file":"EventEmitterDocumentsRepositoryTrait.js","sourcesContent":["import { DocumentsContext } from \"../../Context/DocumentsContext\";\n\nimport { Document } from \"../../Document/Document\";\n\nimport { GeneralRepository } from \"../../GeneralRepository/GeneralRepository\";\n\nimport { ChildCreatedEvent } from \"../../Messaging/ChildCreatedEvent\";\nimport { DocumentDeletedEvent } from \"../../Messaging/DocumentDeletedEvent\";\nimport { DocumentModifiedEvent } from \"../../Messaging/DocumentModifiedEvent\";\nimport { Event } from \"../../Messaging/Event\";\nimport { EventMessage } from \"../../Messaging/EventMessage\";\nimport { MemberAddedEvent } from \"../../Messaging/MemberAddedEvent\";\nimport { MemberRemovedEvent } from \"../../Messaging/MemberRemovedEvent\";\nimport { _createDestination } from \"../../Messaging/Utils\";\n\nimport { ModelDecorator } from \"../../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../../Model/ModelPrototype\";\n\nimport { isObject } from \"../../Utils\";\n\nimport { BaseDocumentsRepository } from \"../BaseDocumentsRepository\";\n\n\n/**\n * Trait of a {@link DocumentsRepository} with methods for event subscriptions.\n */\nexport interface EventEmitterDocumentsRepositoryTrait extends GeneralRepository<Document> {\n\t/**\n\t * Context from where the repository is created.\n\t */\n\treadonly context:DocumentsContext;\n\n\t/**\n\t * Subscribe to the child created event for the desired URI pattern.\n\t * @param event Child created event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\ton( event:Event.CHILD_CREATED, uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document modified event for the desired URI pattern.\n\t * @param event Document modified event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document modified message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\ton( event:Event.DOCUMENT_MODIFIED, uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document deleted event for the desired URI pattern.\n\t * @param event Document deleted event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document deleted message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\ton( event:Event.DOCUMENT_DELETED, uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member added event for the desired URI pattern.\n\t * @param event Member added event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member added message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\ton( event:Event.MEMBER_ADDED, uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member removed event for the desired URI pattern.\n\t * @param event Member removed event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member removed message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\ton( event:Event.MEMBER_REMOVED, uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the specified event for the desired URI pattern.\n\t * @param event Event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the notification message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\ton( event:Event | string, uriPattern:string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Removes the subscription of the child created event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Child created event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the child created event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\toff( event:Event.CHILD_CREATED, uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the document modified event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Document modified event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the document modified event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\toff( event:Event.DOCUMENT_MODIFIED, uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the document deleted event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Document deleted event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the document deleted event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\toff( event:Event.DOCUMENT_DELETED, uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the member added event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Member added event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the member added event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\toff( event:Event.MEMBER_ADDED, uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the member removed event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Member removed event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the member removed event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\toff( event:Event.MEMBER_REMOVED, uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the specified event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the specified event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\toff( event:Event | string, uriPattern:string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Subscribe to only one notification of the child created event for the desired URI pattern.\n\t * @param event Child created event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the child created event message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tone( event:Event.CHILD_CREATED, uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the document modified event for the desired URI pattern.\n\t * @param event Document modified event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document modified message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tone( event:Event.DOCUMENT_MODIFIED, uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the document deleted event for the desired URI pattern.\n\t * @param event Document deleted event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document deleted message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tone( event:Event.DOCUMENT_DELETED, uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the member added event for the desired URI pattern.\n\t * @param event Member added event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member added message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tone( event:Event.MEMBER_ADDED, uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the member removed event for the desired URI pattern.\n\t * @param event Member removed event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member removed message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tone( event:Event.MEMBER_REMOVED, uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the specified event for the desired URI pattern.\n\t * @param event Event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the notification message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tone( event:Event | string, uriPattern:string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\n\n\t/**\n\t * Subscribe to the child created event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tonChildCreated( uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document modified event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document modified event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tonDocumentModified( uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document deleted event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document deleted event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tonDocumentDeleted( uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member added event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member added event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tonMemberAdded( uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member removed event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member removed event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\tonMemberRemoved( uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n}\n\n\ntype OnEvent<T extends EventMessage> = ( message:T ) => void;\ntype OnError = ( error:Error ) => void;\n\n/**\n * Factory, decorator and utils for {@link EventEmitterDocumentsRepositoryTrait}.\n */\nexport type EventEmitterDocumentsRepositoryTraitFactory =\n\t& ModelPrototype<EventEmitterDocumentsRepositoryTrait, GeneralRepository<Document>>\n\t& ModelDecorator<EventEmitterDocumentsRepositoryTrait, BaseDocumentsRepository>\n\t;\n\n/**\n * Constant that implements {@link EventEmitterDocumentsRepositoryTraitFactory}.\n */\nexport const EventEmitterDocumentsRepositoryTrait:EventEmitterDocumentsRepositoryTraitFactory = {\n\tPROTOTYPE: {\n\t\ton( this:EventEmitterDocumentsRepositoryTrait, event:Event | string, uriPattern:string, onEvent:OnEvent<any>, onError?:OnError ):void {\n\t\t\ttry {\n\t\t\t\tconst destination:string = _createDestination( event, uriPattern, this.context.baseURI );\n\t\t\t\tthis.context.messaging.subscribe( destination, onEvent, onError );\n\n\t\t\t} catch( error ) {\n\t\t\t\tif( ! onError ) throw error;\n\t\t\t\tonError( error );\n\t\t\t}\n\t\t},\n\n\t\toff( this:EventEmitterDocumentsRepositoryTrait, event:Event | string, uriPattern:string, onEvent:OnEvent<any>, onError?:OnError ):void {\n\t\t\ttry {\n\t\t\t\tconst destination:string = _createDestination( event, uriPattern, this.context.baseURI );\n\t\t\t\tthis.context.messaging.unsubscribe( destination, onEvent );\n\n\t\t\t} catch( error ) {\n\t\t\t\tif( ! onError ) throw error;\n\t\t\t\tonError( error );\n\t\t\t}\n\t\t},\n\n\t\tone( this:EventEmitterDocumentsRepositoryTrait, event:Event | string, uriPattern:string, onEvent:OnEvent<any>, onError?:OnError ):void {\n\t\t\ttry {\n\t\t\t\tconst destination:string = _createDestination( event, uriPattern, this.context.baseURI );\n\n\t\t\t\tconst onEventWrapper:OnEvent<any> = message => {\n\t\t\t\t\tonEvent( message );\n\t\t\t\t\tthis.context.messaging.unsubscribe( destination, onEventWrapper );\n\t\t\t\t};\n\n\t\t\t\tthis.context.messaging.subscribe( destination, onEventWrapper, onError );\n\n\t\t\t} catch( error ) {\n\t\t\t\tif( ! onError ) throw error;\n\t\t\t\tonError( error );\n\t\t\t}\n\t\t},\n\n\n\t\tonChildCreated( this:EventEmitterDocumentsRepositoryTrait, uriPattern:string, onEvent:OnEvent<ChildCreatedEvent>, onError?:OnError ):void {\n\t\t\treturn this.on( Event.CHILD_CREATED, uriPattern, onEvent, onError );\n\t\t},\n\n\t\tonDocumentModified( this:EventEmitterDocumentsRepositoryTrait, uriPattern:string, onEvent:OnEvent<DocumentModifiedEvent>, onError?:OnError ):void {\n\t\t\treturn this.on( Event.DOCUMENT_MODIFIED, uriPattern, onEvent, onError );\n\t\t},\n\n\t\tonDocumentDeleted( this:EventEmitterDocumentsRepositoryTrait, uriPattern:string, onEvent:OnEvent<DocumentDeletedEvent>, onError?:OnError ):void {\n\t\t\treturn this.on( Event.DOCUMENT_DELETED, uriPattern, onEvent, onError );\n\t\t},\n\n\t\tonMemberAdded( this:EventEmitterDocumentsRepositoryTrait, uriPattern:string, onEvent:OnEvent<MemberAddedEvent>, onError?:OnError ):void {\n\t\t\treturn this.on( Event.MEMBER_ADDED, uriPattern, onEvent, onError );\n\t\t},\n\n\t\tonMemberRemoved( this:EventEmitterDocumentsRepositoryTrait, uriPattern:string, onEvent:OnEvent<MemberRemovedEvent>, onError?:OnError ):void {\n\t\t\treturn this.on( Event.MEMBER_REMOVED, uriPattern, onEvent, onError );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is EventEmitterDocumentsRepositoryTrait {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( EventEmitterDocumentsRepositoryTrait.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseDocumentsRepository>( object:T ):T & EventEmitterDocumentsRepositoryTrait {\n\t\tif( EventEmitterDocumentsRepositoryTrait.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & GeneralRepository<Document> = ModelDecorator\n\t\t\t.decorateMultiple( object, GeneralRepository );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( EventEmitterDocumentsRepositoryTrait.PROTOTYPE, resource );\n\t},\n};\n"],"sourceRoot":"../../../src"}