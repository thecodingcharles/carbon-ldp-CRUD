import { FreeResources } from "../FreeResources/FreeResources";
import { JSONLDParser } from "../JSONLD/JSONLDParser";
import { ErrorResponse } from "../LDP/ErrorResponse";
import { Pointer } from "../Pointer/Pointer";
import { RDFDocument } from "../RDF/Document";
import { URI } from "../RDF/URI";
import { isString } from "../Utils";
export function _parseURIParams(resource, uri, args) {
    var _uri = isString(uri) ?
        URI.resolve(resource.$id, uri) : resource.$id;
    var _args = !isString(uri) ?
        Array.from(args) :
        Array.prototype.slice.call(args, 1);
    return { _uri: _uri, _args: _args };
}
export function _parseResourceParams(resource, $resource, args) {
    var _resource = Pointer.is($resource) ?
        $resource : resource;
    var _args = !Pointer.is($resource) ?
        Array.from(args) :
        Array.prototype.slice.call(args, 1);
    return { _resource: _resource, _args: _args };
}
export function _getErrorResponseParserFn(registry) {
    return function (error) {
        if (!("response" in error))
            return Promise.reject(error);
        if (!error.response.data)
            return Promise.reject(error);
        return new JSONLDParser()
            .parse(error.response.data)
            .then(function (rdfNodes) {
            var freeNodes = RDFDocument.getFreeNodes(rdfNodes);
            var freeResources = FreeResources.parseFreeNodes(registry, freeNodes);
            var errorResponses = freeResources
                .getPointers(true)
                .filter(ErrorResponse.is);
            if (errorResponses.length === 0)
                return Promise.reject(error);
            var errorResponse = Object.assign(error, errorResponses[0]);
            error.message = ErrorResponse.getMessage(errorResponse);
            return Promise.reject(error);
        }, function () {
            return Promise.reject(error);
        });
    };
}

//# sourceMappingURL=Utils.js.map
