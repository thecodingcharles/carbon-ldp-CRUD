{"version":3,"sources":["RDF/Literal/Serializers/XSD.ts"],"names":[],"mappings":"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","file":"XSD.js","sourcesContent":["import { IllegalArgumentError } from \"../../../Errors/IllegalArgumentError\";\n\nimport { Serializer } from \"../Serializer\";\n\nimport * as Utils from \"./../../../Utils\";\n\n\nfunction pad( value:number ):string {\n\tlet paddedValue:string = String( value );\n\tif( paddedValue.length === 1 ) paddedValue = \"0\" + paddedValue;\n\treturn paddedValue;\n}\n\nconst notNumberError:string = \"The value is not a number.\";\n\n/**\n * Class that can serialize a Date object into a string literal with format `YYYY-MM-DD`.\n *\n * Instead of instantiating this class, use the already exposed instance {@link dateSerializer}.\n */\nexport class DateSerializer implements Serializer {\n\t/**\n\t * Returns the string with format `YYYY-MM-DD`, of the Date object.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.getUTCFullYear() + \"-\" + pad( (value.getUTCMonth() + 1) ) + \"-\" + pad( value.getUTCDate() );\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link DateSerializer}.\n */\nexport let dateSerializer:DateSerializer = new DateSerializer();\n\n/**\n * Class that can serialize a Date object into a string ISO literal.\n *\n * Instead of instantiating this class, use the already exposed instance {@link dateTimeSerializer}.\n */\nexport class DateTimeSerializer implements Serializer {\n\t/**\n\t * Returns the simplified extended ISO format (ISO 8601) of the Date object.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn value.toISOString();\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link DateTimeSerializer}.\n */\nexport let dateTimeSerializer:DateTimeSerializer = new DateTimeSerializer();\n\n/**\n * Class that can serialize a Date object into a literal string with format `HH:mm:ss.sssZ`.\n *\n * Instead of instantiating this class, use the already exposed instance {@link timeSerializer}.\n */\nexport class TimeSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isDate( value ) ) throw new IllegalArgumentError( \"The value is not a Date object.\" );\n\n\t\treturn pad( value.getUTCHours() )\n\t\t\t+ \":\" + pad( value.getUTCMinutes() )\n\t\t\t+ \":\" + pad( value.getUTCSeconds() )\n\t\t\t+ \".\" + String( (value.getUTCMilliseconds() / 1000).toFixed( 3 ) ).slice( 2, 5 )\n\t\t\t+ \"Z\"\n\t\t\t;\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link TimeSerializer}.\n */\nexport let timeSerializer:TimeSerializer = new TimeSerializer();\n\n/**\n * Class that can serialize any Number value to a string literal of an integer.\n *\n * Instead of instantiating this class, use the already exposed instance {@link integerSerializer}.\n */\nexport class IntegerSerializer implements Serializer {\n\t/**\n\t * Returns a string representing an integer from the Number provided.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new IllegalArgumentError( notNumberError );\n\n\t\t// Negative truncate\n\t\treturn (~ ~ value).toString();\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link IntegerSerializer}.\n */\nexport let integerSerializer:IntegerSerializer = new IntegerSerializer();\n\n/**\n * Class that can serialize any Number value to a string literal of a long integer.\n *\n * Instead of instantiating this class, use the already exposed instance {@link longSerializer}.\n */\nexport class LongSerializer implements Serializer {\n\t/**\n\t * Returns a string representing a long integer from the Number provided.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new IllegalArgumentError( notNumberError );\n\n\t\tif( value === Number.POSITIVE_INFINITY ) return \"0\";\n\t\tif( value === Number.NEGATIVE_INFINITY ) return \"0\";\n\t\tif( Number.isNaN( value ) ) return \"0\";\n\n\t\treturn Math.trunc( value ).toString();\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link LongSerializer}.\n */\nexport const longSerializer:LongSerializer = new LongSerializer();\n\n/**\n * Class that can serialize any Number value to a string literal of an unsigned integer.\n *\n * Instead of instantiating this class, use the already exposed instance {@link unsignedIntegerSerializer}.\n */\nexport class UnsignedIntegerSerializer extends IntegerSerializer {\n\t/**\n\t * Returns a string representing an unsigned integer from the Number provided.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\tlet stringValue:string = super.serialize( value );\n\n\t\tstringValue = Utils.StringUtils.startsWith( stringValue, \"-\" ) ? stringValue.substring( 1 ) : stringValue;\n\n\t\treturn stringValue;\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link UnsignedIntegerSerializer}.\n */\nexport let unsignedIntegerSerializer:UnsignedIntegerSerializer = new UnsignedIntegerSerializer();\n\n/**\n * Class that can serialize any Number value to a string literal of an unsigned long integer.\n *\n * Instead of instantiating this class, use the already exposed instance {@link unsignedLongSerializer}.\n */\nexport class UnsignedLongSerializer implements Serializer {\n\tserialize( value:any ):string {\n\t\tif( ! Utils.isNumber( value ) ) throw new IllegalArgumentError( notNumberError );\n\n\t\tif( value === Number.POSITIVE_INFINITY ) return \"0\";\n\t\tif( value === Number.NEGATIVE_INFINITY ) return \"0\";\n\t\tif( Number.isNaN( value ) ) return \"0\";\n\n\t\treturn Math.trunc( Math.abs( value ) ).toString();\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link UnsignedLongSerializer}.\n */\nexport const unsignedLongSerializer:UnsignedLongSerializer = new UnsignedLongSerializer();\n\n/**\n * Class that can serialize any Number value to a string literal of float.\n *\n * Instead of instantiating this class, use the already exposed instance {@link floatSerializer}.\n */\nexport class FloatSerializer implements Serializer {\n\t/**\n\t * Returns a string representing a float from the Number provided.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\tif( value === Number.POSITIVE_INFINITY ) return \"INF\";\n\t\tif( value === Number.NEGATIVE_INFINITY ) return \"-INF\";\n\t\tif( ! Utils.isNumber( value ) ) throw new IllegalArgumentError( notNumberError );\n\n\t\treturn value.toString();\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link FloatSerializer}.\n */\nexport let floatSerializer:FloatSerializer = new FloatSerializer();\n\n/**\n * Class that can serialize any variable to a string literal representation its truth value.\n *\n * Instead of instantiating this class, use the already exposed instance {@link booleanSerializer}.\n */\nexport class BooleanSerializer implements Serializer {\n\t/**\n\t * Returns a string representing the truth value from the variable provided.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\treturn (! ! value).toString();\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link BooleanSerializer}.\n */\nexport let booleanSerializer:BooleanSerializer = new BooleanSerializer();\n\n/**\n * Class that can serialize any variable to a string literal representation its truth value.\n *\n * Instead of instantiating this class, use the already exposed instance {@link stringSerializer}.\n */\nexport class StringSerializer implements Serializer {\n\t/**\n\t * Returns a string representing the truth value from the variable provided.\n\t * @param value\n\t */\n\tserialize( value:any ):string {\n\t\treturn String( value );\n\t}\n}\n\n/**\n * The already exposed instance of the class {@link StringSerializer}.\n */\nexport let stringSerializer:StringSerializer = new StringSerializer();\n"],"sourceRoot":"../../../../src"}