{"version":3,"sources":["Document/Traits/LDPDocumentTrait.ts"],"names":[],"mappings":"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","file":"LDPDocumentTrait.js","sourcesContent":["import { LDPDocumentsRepositoryTrait } from \"../../DocumentsRepository/Traits/LDPDocumentsRepositoryTrait\";\nimport { _parseURIParams } from \"../../DocumentsRepository/Utils\";\n\nimport { RequestOptions } from \"../../HTTP/Request\";\nimport { ModelDecorator } from \"../../Model/ModelDecorator\";\n\nimport { ModelPrototype } from \"../../Model/ModelPrototype\";\n\nimport { Pointer } from \"../../Pointer/Pointer\";\nimport { URI } from \"../../RDF/URI\";\n\nimport { ResolvablePointer } from \"../../Repository/ResolvablePointer\";\n\nimport { isObject, isString } from \"../../Utils\";\n\nimport { Document } from \"../Document\";\nimport { TransientDocument } from \"../TransientDocument\";\n\n\n/**\n * Properties for creating a {@link LDPDocumentTrait}\n */\nexport interface BaseLDPDocumentTrait {\n\t/**\n\t * Repository trait that will to execute requests of the trait to create.\n\t */\n\t$repository:LDPDocumentsRepositoryTrait;\n}\n\n/**\n * Trait of a {@link Document} with methods for LDP related requests.\n */\nexport interface LDPDocumentTrait extends TransientDocument, ResolvablePointer {\n\t/**\n\t * Repository trait that actually executes the request of the current trait.\n\t */\n\t$repository:LDPDocumentsRepositoryTrait;\n\n\t/**\n\t * Persists multiple objects as children of the current document.\n\t * @param children Objects to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( children:T[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists multiple objects as children of the current document.\n\t * @param children Objects to be persisted.\n\t * @param slugs Suggested slugs for every child URI of the {@param children} provided. The slug will be assigned in the order they are provided.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( children:T[], slugs?:string[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists the object as a child of the current document.\n\t * @param child Object to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( child:T, requestOptions?:RequestOptions ):Promise<T & Document>;\n\t/**\n\t * Persists the object as a child of the current document.\n\t * @param child Object to be persisted.\n\t * @param slug Suggested slug for the child URI.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( child:T, slug?:string, requestOptions?:RequestOptions ):Promise<T & Document>;\n\t/**\n\t * Persists multiple objects as children of the document of the specified URI.\n\t * @param uri URI of the document where to create the children.\n\t * @param children Objects to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( uri:string, children:T[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists multiple objects as children of the document of the specified URI.\n\t * @param uri URI of the document where to create the children.\n\t * @param children Objects to be persisted.\n\t * @param slugs Suggested slugs for every child URI of the {@param children} provided. The slug will be assigned in the order they are provided.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( uri:string, children:T[], slugs?:string[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists the object as a child of the document of the specified URI.\n\t * @param uri URI of the document where to create the child.\n\t * @param child Object to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( uri:string, child:T, requestOptions?:RequestOptions ):Promise<T & Document>;\n\t/**\n\t * Persists the object as a child of the document of the specified URI.\n\t * @param uri URI of the document where to create the child.\n\t * @param child Object to be persisted.\n\t * @param slug Suggested slug for the child URI.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$create<T extends object>( uri:string, child:T, slug?:string, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\t/**\n\t * Persists multiple objects as children of the current document and retrieves the updated data from the server.\n\t * @param children Objects to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( children:T[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists multiple objects as children of the current document and retrieves the updated data from the server.\n\t * @param children Objects to be persisted.\n\t * @param slugs Suggested slugs for every child URI of the {@param children} provided. The slug will be assigned in the order they are provided.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( children:T[], slugs?:string[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists the object as a child of the current document and retrieves the updated data from the server.\n\t * @param child Object to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( child:T, requestOptions?:RequestOptions ):Promise<T & Document>;\n\t/**\n\t * Persists the object as a child of the current document and retrieves the updated data from the server.\n\t * @param child Object to be persisted.\n\t * @param slug Suggested slug for the child URI.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( child:T, slug?:string, requestOptions?:RequestOptions ):Promise<T & Document>;\n\t/**\n\t * Persists multiple objects as children of the document of the specified URI and retrieves the updated data from the server.\n\t * @param uri URI of the document where to create the children.\n\t * @param children Objects to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( uri:string, children:T[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists multiple objects as children of the document of the specified URI and retrieves the updated data from the server.\n\t * @param uri URI of the document where to create the children.\n\t * @param children Objects to be persisted.\n\t * @param slugs Suggested slugs for every child URI of the {@param children} provided. The slug will be assigned in the order they are provided.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( uri:string, children:T[], slugs?:string[], requestOptions?:RequestOptions ):Promise<(T & Document)[]>;\n\t/**\n\t * Persists the object as a child of the document of the specified URI and retrieves the updated data from the server.\n\t * @param uri URI of the document where to create the child.\n\t * @param child Object to be persisted.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( uri:string, child:T, requestOptions?:RequestOptions ):Promise<T & Document>;\n\t/**\n\t * Persists the object as a child of the document of the specified URI and retrieves the updated data from the server.\n\t * @param uri URI of the document where to create the child.\n\t * @param child Object to be persisted.\n\t * @param slug Suggested slug for the child URI.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$createAndRetrieve<T extends object>( uri:string, child:T, slug?:string, requestOptions?:RequestOptions ):Promise<T & Document>;\n\n\n\t/**\n\t * Adds the provided resource as member of the current document.\n\t * @param member Resource to be added as member.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$addMember( member:string | Pointer, requestOptions?:RequestOptions ):Promise<void>;\n\t/**\n\t * Adds the provided resource as member of the document of the specified URI.\n\t * @param uri URI of the document to add the member.\n\t * @param member Resource to be added as member.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$addMember( uri:string, member:string | Pointer, requestOptions?:RequestOptions ):Promise<void>;\n\n\t/**\n\t * Adds the provided resources as members of the current document.\n\t * @param members Resources to be added as members.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$addMembers( members:(string | Pointer)[], requestOptions?:RequestOptions ):Promise<void>;\n\t/**\n\t * Adds the provided resources as members of the document of the specified URI.\n\t * @param uri URI of the document to add the members.\n\t * @param members Resources to be added as members.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$addMembers( uri:string, members:(string | Pointer)[], requestOptions?:RequestOptions ):Promise<void>;\n\n\n\t/**\n\t * Removes the provided resource as member of the current document.\n\t * @param member Resource to be removed as member.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$removeMember( member:string | Pointer, requestOptions?:RequestOptions ):Promise<void>;\n\t/**\n\t * Removes the provided resource as member of the document of the specified URI.\n\t * @param uri URI of the document to remove the member.\n\t * @param member Resource to be removed as member.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$removeMember( uri:string, member:string | Pointer, requestOptions?:RequestOptions ):Promise<void>;\n\n\t/**\n\t * Removes the provided resources as members of the current document.\n\t * IF no {@param members} is provided all the members of the current document will be removed.\n\t * @param members Resources to be removed as members.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$removeMembers( members?:(string | Pointer)[], requestOptions?:RequestOptions ):Promise<void>;\n\t/**\n\t * Removes all the members of the current document.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$removeMembers( requestOptions?:RequestOptions ):Promise<void>;\n\t/**\n\t * Removes the provided resources as members of the document of the specified URI.\n\t * IF no {@param members} is provided all the members of the specified document will be removed.\n\t * @param uri URI of the document to remove the members.\n\t * @param members Resources to be removed as members.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$removeMembers( uri:string, members?:(string | Pointer)[], requestOptions?:RequestOptions ):Promise<void>;\n\t/**\n\t * Removes all the members of the document of the specified URI.\n\t * @param uri URI of the document to remove its members.\n\t * @param requestOptions Customizable options for the request.\n\t */\n\t$removeMembers( uri:string, requestOptions?:RequestOptions ):Promise<void>;\n}\n\n\nfunction __parseMemberParams( this:void, resource:Pointer, args:IArguments ):{ uri:string, params:any[] } {\n\tconst params:any[] = Array.from( args );\n\n\tconst uri:string = isString( params[ 0 ] ) && isString( Pointer.getID( params[ 1 ] ) ) ?\n\t\tURI.resolve( resource.$id, params.shift() ) : resource.$id;\n\n\treturn { uri, params };\n}\n\n/**\n * Factory, decorator and utils for {@link LDPDocumentTrait}.\n */\nexport type LDPDocumentTraitFactory =\n\t& ModelPrototype<LDPDocumentTrait, TransientDocument & ResolvablePointer>\n\t& ModelDecorator<LDPDocumentTrait, BaseLDPDocumentTrait>\n\t;\n\n/**\n * Constant that implements {@link LDPDocumentTraitFactory}.\n */\nexport const LDPDocumentTrait:LDPDocumentTraitFactory = {\n\tPROTOTYPE: {\n\t\t$create<T extends object>( this:LDPDocumentTrait, uriOrChildren:string | T | T[], childrenOrSlugsOrRequestOptions?:T | T[] | string | string[] | RequestOptions, slugsOrRequestOptions?:string | string[] | RequestOptions, requestOptions?:RequestOptions ):Promise<(T & Document) | (T & Document)[]> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uriOrChildren, arguments );\n\t\t\t// FIXME\n\t\t\t// @ts-ignore\n\t\t\treturn this.$repository.create( _uri, ..._args );\n\t\t},\n\n\t\t$createAndRetrieve<T extends object>( this:LDPDocumentTrait, uriOrChildren?:string | T | T[], childrenOrSlugsOrRequestOptions?:T | T[] | string | string[] | RequestOptions, slugsOrRequestOptions?:string | string[] | RequestOptions, requestOptions:RequestOptions = {} ):Promise<(T & Document) | (T & Document)[]> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uriOrChildren, arguments );\n\t\t\t// FIXME\n\t\t\t// @ts-ignore\n\t\t\treturn this.$repository.createAndRetrieve( _uri, ..._args );\n\t\t},\n\n\n\t\t$addMember( this:LDPDocumentTrait, uriOrMember:string | (Pointer | string), memberOrOptions?:(Pointer | string) | RequestOptions, requestOptions?:RequestOptions ):Promise<void> {\n\t\t\tconst { uri, params } = __parseMemberParams( this, arguments );\n\t\t\t// FIXME\n\t\t\t// @ts-ignore\n\t\t\treturn this.$repository.addMember( uri, ...params );\n\t\t},\n\n\t\t$addMembers( this:LDPDocumentTrait, uriOrMembers:string | (Pointer | string)[], membersOrOptions?:(Pointer | string)[] | RequestOptions, requestOptions?:RequestOptions ):Promise<void> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uriOrMembers, arguments );\n\t\t\t// FIXME\n\t\t\t// @ts-ignore\n\t\t\treturn this.$repository.addMembers( _uri, ..._args );\n\t\t},\n\n\n\t\t$removeMember( this:LDPDocumentTrait, uriOrMember:string | (Pointer | string), memberOrOptions?:(Pointer | string) | RequestOptions, requestOptions?:RequestOptions ):Promise<void> {\n\t\t\tconst { uri, params } = __parseMemberParams( this, arguments );\n\t\t\t// FIXME\n\t\t\t// @ts-ignore\n\t\t\treturn this.$repository.removeMember( uri, ...params );\n\t\t},\n\n\t\t$removeMembers( this:LDPDocumentTrait, uriOrMembersOrOptions?:string | (Pointer | string)[] | RequestOptions, membersOrOptions?:(Pointer | string)[] | RequestOptions, requestOptions?:RequestOptions ):Promise<void> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uriOrMembersOrOptions, arguments );\n\t\t\treturn this.$repository.removeMembers( _uri, ..._args );\n\t\t},\n\t},\n\n\tisDecorated( object:object ):object is LDPDocumentTrait {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( LDPDocumentTrait.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseLDPDocumentTrait>( object:T ):T & LDPDocumentTrait {\n\t\tif( LDPDocumentTrait.isDecorated( object ) ) return object;\n\n\t\tconst target:T & TransientDocument & ResolvablePointer = ModelDecorator\n\t\t\t.decorateMultiple( object, TransientDocument, ResolvablePointer );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( LDPDocumentTrait.PROTOTYPE, target );\n\t},\n};\n"],"sourceRoot":"../../../src"}