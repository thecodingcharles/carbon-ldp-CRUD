import { _parseURIParams } from "../../DocumentsRepository/Utils";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { QueryablePointer } from "../../QueryDocuments/QueryablePointer";
import { URI } from "../../RDF/URI";
import { ResolvablePointer } from "../../Repository/ResolvablePointer";
import { LDPDocumentTrait } from "./LDPDocumentTrait";
export var QueryableDocumentTrait = {
    PROTOTYPE: {
        $get: function (uris) {
            var _this = this;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var _a, _b;
            if (!Array.isArray(uris))
                return (_a = ResolvablePointer.PROTOTYPE.$get).call.apply(_a, [this, uris].concat(args));
            var resolvedURIs = uris.map(function (uri) { return URI.resolve(_this.$id, uri); });
            return (_b = this.$repository).get.apply(_b, [resolvedURIs].concat(args));
        },
        $getChildren: function (uriOrQueryBuilderFnOrOptions, queryBuilderFnOrOptions, queryBuilderFn) {
            var _a;
            var _b = _parseURIParams(this, uriOrQueryBuilderFnOrOptions, arguments), _uri = _b._uri, _args = _b._args;
            return (_a = this.$repository).getChildren.apply(_a, [_uri].concat(_args));
        },
        $getMembers: function (uriOrQueryBuilderFnOrOptions, queryBuilderFnOrOptions, queryBuilderFn) {
            var _a;
            var _b = _parseURIParams(this, uriOrQueryBuilderFnOrOptions, arguments), _uri = _b._uri, _args = _b._args;
            return (_a = this.$repository).getMembers.apply(_a, [_uri].concat(_args));
        },
        $listChildren: function (uriOrOptions, requestOptions) {
            var _a;
            var _b = _parseURIParams(this, uriOrOptions, arguments), _uri = _b._uri, _args = _b._args;
            return (_a = this.$repository).listChildren.apply(_a, [_uri].concat(_args));
        },
        $listMembers: function (uriOrOptions, requestOptions) {
            var _a;
            var _b = _parseURIParams(this, uriOrOptions, arguments), _uri = _b._uri, _args = _b._args;
            return (_a = this.$repository).listMembers.apply(_a, [_uri].concat(_args));
        },
    },
    isDecorated: function (object) {
        return ModelDecorator
            .hasPropertiesFrom(QueryableDocumentTrait.PROTOTYPE, object);
    },
    decorate: function (object) {
        if (QueryableDocumentTrait.isDecorated(object))
            return object;
        var forced = object;
        var target = ModelDecorator
            .decorateMultiple(forced, LDPDocumentTrait, QueryablePointer);
        return ModelDecorator
            .definePropertiesFrom(QueryableDocumentTrait.PROTOTYPE, target);
    },
};

//# sourceMappingURL=QueryableDocumentTrait.js.map
