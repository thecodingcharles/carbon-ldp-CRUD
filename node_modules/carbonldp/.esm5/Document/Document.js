import { Fragment } from "../Fragment/Fragment";
import { ModelDecorator } from "../Model/ModelDecorator";
import { ResolvablePointer } from "../Repository/ResolvablePointer";
import { isObject } from "../Utils";
import { C } from "../Vocabularies/C";
import { LDP } from "../Vocabularies/LDP";
import { XSD } from "../Vocabularies/XSD";
import { EventEmitterDocumentTrait } from "./Traits/EventEmitterDocumentTrait";
import { QueryableDocumentTrait } from "./Traits/QueryableDocumentTrait";
import { SPARQLDocumentTrait } from "./Traits/SPARQLDocumentTrait";
import { TransientDocument } from "./TransientDocument";
export var Document = {
    TYPE: C.Document,
    SCHEMA: {
        "contains": {
            "@id": LDP.contains,
            "@container": "@set",
            "@type": "@id",
        },
        "members": {
            "@id": LDP.member,
            "@container": "@set",
            "@type": "@id",
        },
        "membershipResource": {
            "@id": LDP.membershipResource,
            "@type": "@id",
        },
        "isMemberOfRelation": {
            "@id": LDP.isMemberOfRelation,
            "@type": "@id",
        },
        "hasMemberRelation": {
            "@id": LDP.hasMemberRelation,
            "@type": "@id",
        },
        "insertedContentRelation": {
            "@id": LDP.insertedContentRelation,
            "@type": "@id",
        },
        "created": {
            "@id": C.created,
            "@type": XSD.dateTime,
        },
        "modified": {
            "@id": C.modified,
            "@type": XSD.dateTime,
        },
        "defaultInteractionModel": {
            "@id": C.defaultInteractionModel,
            "@type": "@id",
        },
        "accessPoints": {
            "@id": C.accessPoint,
            "@type": "@id",
            "@container": "@set",
        },
    },
    PROTOTYPE: {
        get $__savedFragments() { return []; },
        $_syncSavedFragments: function () {
            this.$__savedFragments = Array
                .from(this.$__resourcesMap.values());
            this.$__savedFragments
                .forEach(function (fragment) { return fragment.$_syncSnapshot(); });
        },
        $_syncSnapshot: function () {
            ResolvablePointer.PROTOTYPE.$_syncSnapshot.call(this);
            this.$_syncSavedFragments();
        },
        $isDirty: function () {
            var _this = this;
            var isSelfDirty = ResolvablePointer.PROTOTYPE.$isDirty.call(this);
            if (isSelfDirty)
                return true;
            var hasRemovedFragments = this
                .$__savedFragments
                .some(function (fragment) { return !_this.$hasFragment(fragment.$id); });
            if (hasRemovedFragments)
                return true;
            var hasNewFragments = this
                .$__savedFragments.length !== this.$__resourcesMap.size;
            if (hasNewFragments)
                return true;
            return this
                .$__savedFragments
                .some(function (fragment) { return fragment.$isDirty(); });
        },
        $revert: function () {
            var _this = this;
            ResolvablePointer.PROTOTYPE.$revert.call(this);
            this.$__resourcesMap.clear();
            this
                .$__savedFragments
                .forEach(function (fragment) {
                fragment.$revert();
                _this.$__resourcesMap.set(fragment.$slug, fragment);
            });
        },
    },
    isDecorated: function (object) {
        return isObject(object)
            && ModelDecorator
                .hasPropertiesFrom(Document.PROTOTYPE, object);
    },
    is: function (object) {
        return TransientDocument.is(object)
            && SPARQLDocumentTrait.isDecorated(object)
            && EventEmitterDocumentTrait.isDecorated(object)
            && QueryableDocumentTrait.isDecorated(object)
            && Document.isDecorated(object);
    },
    decorate: function (object) {
        if (Document.isDecorated(object))
            return object;
        var base = Object.assign(object, {
            $__modelDecorator: Fragment,
        });
        var target = ModelDecorator
            .decorateMultiple(base, SPARQLDocumentTrait, EventEmitterDocumentTrait, QueryableDocumentTrait);
        return ModelDecorator
            .definePropertiesFrom(Document.PROTOTYPE, target);
    },
    create: TransientDocument.create,
    createFrom: TransientDocument.createFrom,
};

//# sourceMappingURL=Document.js.map
