import { isNumber } from "../Utils";
var LDPatchToken = (function () {
    function LDPatchToken() {
        this.token = "ldpatch";
        this.prologues = [];
        this.statements = [];
    }
    LDPatchToken.prototype.toString = function () {
        var tokens = this.prologues.concat(this.statements);
        return tokens.join(" ");
    };
    return LDPatchToken;
}());
export { LDPatchToken };
var PrefixToken = (function () {
    function PrefixToken(namespace, iri) {
        this.token = "prefix";
        this.namespace = namespace;
        this.iri = iri;
    }
    PrefixToken.prototype.toString = function () {
        return "@prefix " + this.namespace + ": " + this.iri + ".";
    };
    return PrefixToken;
}());
export { PrefixToken };
var AddToken = (function () {
    function AddToken() {
        this.token = "add";
        this.triples = [];
    }
    AddToken.prototype.toString = function () {
        return "Add { " + this.triples.join(". ") + ". }.";
    };
    return AddToken;
}());
export { AddToken };
var DeleteToken = (function () {
    function DeleteToken() {
        this.token = "delete";
        this.triples = [];
    }
    DeleteToken.prototype.toString = function () {
        return "Delete { " + this.triples.join(". ") + ". }.";
    };
    return DeleteToken;
}());
export { DeleteToken };
var UpdateListToken = (function () {
    function UpdateListToken(subject, predicate, slice, collection) {
        this.token = "updateList";
        this.subject = subject;
        this.predicate = predicate;
        this.slice = slice;
        this.collection = collection;
    }
    UpdateListToken.prototype.toString = function () {
        return "UpdateList " + this.subject + " " + this.predicate + " " + this.slice + " " + this.collection + ".";
    };
    return UpdateListToken;
}());
export { UpdateListToken };
var SliceToken = (function () {
    function SliceToken(minIndex, maxIndex) {
        this.token = "slice";
        if (isNumber(minIndex))
            this.minIndex = minIndex;
        if (isNumber(maxIndex))
            this.maxIndex = maxIndex;
    }
    SliceToken.prototype.toString = function () {
        var buffer = "..";
        if (this.minIndex !== void 0)
            buffer = this.minIndex + buffer;
        if (this.maxIndex !== void 0)
            buffer = buffer + this.maxIndex;
        return buffer;
    };
    return SliceToken;
}());
export { SliceToken };

//# sourceMappingURL=Tokens.js.map
