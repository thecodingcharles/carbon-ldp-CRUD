{"version":3,"sources":["LDPatch/Tokens.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAapC;IAKC;QAJS,UAAK,GAAa,SAAS,CAAC;QAKpC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,+BAAQ,GAAR;QACC,IAAM,MAAM,GACR,IAAI,CAAC,SAAS,QACd,IAAI,CAAC,UAAU,CAClB,CAAC;QAEF,OAAO,MAAM,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC;IAC3B,CAAC;IACF,mBAAC;AAAD,CAlBA,AAkBC,IAAA;;AAOD;IAKC,qBAAa,SAAgB,EAAE,GAAY;QAJlC,UAAK,GAAY,QAAQ,CAAC;QAKlC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IAChB,CAAC;IAED,8BAAQ,GAAR;QACC,OAAO,aAAW,IAAI,CAAC,SAAS,UAAK,IAAI,CAAC,GAAG,MAAG,CAAC;IAClD,CAAC;IACF,kBAAC;AAAD,CAbA,AAaC,IAAA;;AAQD;IAIC;QAHS,UAAK,GAAS,KAAK,CAAC;QAI5B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,2BAAQ,GAAR;QACC,OAAO,WAAS,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAE,SAAM,CAAC;IACjD,CAAC;IACF,eAAC;AAAD,CAXA,AAWC,IAAA;;AAQD;IAIC;QAHS,UAAK,GAAY,QAAQ,CAAC;QAIlC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,8BAAQ,GAAR;QACC,OAAO,cAAY,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAE,SAAM,CAAC;IACpD,CAAC;IACF,kBAAC;AAAD,CAXA,AAWC,IAAA;;AAQD;IASC,yBAAa,OAA2C,EAAE,SAAkB,EAAE,KAAgB,EAAE,UAA0B;QARjH,UAAK,GAAgB,YAAY,CAAC;QAS1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAED,kCAAQ,GAAR;QACC,OAAO,gBAAc,IAAI,CAAC,OAAO,SAAI,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,KAAK,SAAI,IAAI,CAAC,UAAU,MAAG,CAAC;IACzF,CAAC;IACF,sBAAC;AAAD,CAnBA,AAmBC,IAAA;;AAQD;IAKC,oBAAa,QAAgB,EAAE,QAAgB;QAJtC,UAAK,GAAW,OAAO,CAAC;QAKhC,IAAI,QAAQ,CAAE,QAAQ,CAAE;YAAG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACpD,IAAI,QAAQ,CAAE,QAAQ,CAAE;YAAG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrD,CAAC;IAED,6BAAQ,GAAR;QACC,IAAI,MAAM,GAAU,IAAI,CAAC;QACzB,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC;YAAG,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC/D,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC;YAAG,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE/D,OAAO,MAAM,CAAC;IACf,CAAC;IACF,iBAAC;AAAD,CAjBA,AAiBC,IAAA","file":"Tokens.js","sourcesContent":["import { BlankNodeToken, CollectionToken, IRIToken, TokenNode, TripleToken, VariableOrIRIToken } from \"sparqler/tokens\";\n\nimport { isNumber } from \"../Utils\";\n\n\n/**\n * The tokens that states a change in the data.\n *\n * Used in the {@link LDPatchToken.statements}.\n */\nexport type StatementToken = AddToken | DeleteToken | UpdateListToken;\n\n/**\n * Token for defining an LD Patch expression.\n */\nexport class LDPatchToken implements TokenNode {\n\treadonly token:\"ldpatch\" = \"ldpatch\";\n\treadonly prologues:PrefixToken[];\n\treadonly statements:StatementToken[];\n\n\tconstructor() {\n\t\tthis.prologues = [];\n\t\tthis.statements = [];\n\t}\n\n\ttoString():string {\n\t\tconst tokens:TokenNode[] = [\n\t\t\t...this.prologues,\n\t\t\t...this.statements,\n\t\t];\n\n\t\treturn tokens.join( \" \" );\n\t}\n}\n\n/**\n * Token for defining a LD Patch prefix statement.\n *\n * @see {@link https://www.w3.org/TR/ldpatch/#grammar-production-prefixID}\n */\nexport class PrefixToken implements TokenNode {\n\treadonly token:\"prefix\" = \"prefix\";\n\treadonly namespace:string;\n\treadonly iri:IRIToken;\n\n\tconstructor( namespace:string, iri:IRIToken ) {\n\t\tthis.namespace = namespace;\n\t\tthis.iri = iri;\n\t}\n\n\ttoString():string {\n\t\treturn `@prefix ${this.namespace}: ${this.iri}.`;\n\t}\n}\n\n/**\n * Token for defining a LD Patch add statement.\n *\n * @see {@link https://www.w3.org/TR/ldpatch/#Add-statement}.\n * @see {@link https://www.w3.org/TR/ldpatch/#grammar-production-add}.\n */\nexport class AddToken implements TokenNode {\n\treadonly token:\"add\" = \"add\";\n\treadonly triples:TripleToken[];\n\n\tconstructor() {\n\t\tthis.triples = [];\n\t}\n\n\ttoString():string {\n\t\treturn `Add { ${this.triples.join( \". \" )}. }.`;\n\t}\n}\n\n/**\n * Token for defining a LD Patch delete statement.\n *\n * @see {@link https://www.w3.org/TR/ldpatch/#Delete-statement}.\n * @see {@link https://www.w3.org/TR/ldpatch/#grammar-production-delete}.\n */\nexport class DeleteToken implements TokenNode {\n\treadonly token:\"delete\" = \"delete\";\n\treadonly triples:TripleToken[];\n\n\tconstructor() {\n\t\tthis.triples = [];\n\t}\n\n\ttoString():string {\n\t\treturn `Delete { ${this.triples.join( \". \" )}. }.`;\n\t}\n}\n\n/**\n * Token for defining a LD Patch update list statement.\n *\n * @see {@link https://www.w3.org/TR/ldpatch/#UpdateList-statement}.\n * @see {@link https://www.w3.org/TR/ldpatch/#grammar-production-updateList}.\n */\nexport class UpdateListToken implements TokenNode {\n\treadonly token:\"updateList\" = \"updateList\";\n\n\t// Extend LD Patch grammar allowing blank-nodes\n\treadonly subject:VariableOrIRIToken | BlankNodeToken;\n\treadonly predicate:IRIToken;\n\treadonly slice:SliceToken;\n\treadonly collection:CollectionToken;\n\n\tconstructor( subject:VariableOrIRIToken | BlankNodeToken, predicate:IRIToken, slice:SliceToken, collection:CollectionToken ) {\n\t\tthis.subject = subject;\n\t\tthis.predicate = predicate;\n\t\tthis.slice = slice;\n\t\tthis.collection = collection;\n\t}\n\n\ttoString():string {\n\t\treturn `UpdateList ${this.subject} ${this.predicate} ${this.slice} ${this.collection}.`;\n\t}\n}\n\n/**\n * Token for defining a LD Patch slice expression of a update list statement.\n *\n * @see {@link https://www.w3.org/TR/ldpatch/#dfn-slice-expression}.\n * @see {@link https://www.w3.org/TR/ldpatch/#grammar-production-slice}.\n */\nexport class SliceToken implements TokenNode {\n\treadonly token:\"slice\" = \"slice\";\n\treadonly minIndex?:number;\n\treadonly maxIndex?:number;\n\n\tconstructor( minIndex?:number, maxIndex?:number ) {\n\t\tif( isNumber( minIndex ) ) this.minIndex = minIndex;\n\t\tif( isNumber( maxIndex ) ) this.maxIndex = maxIndex;\n\t}\n\n\ttoString():string {\n\t\tlet buffer:string = \"..\";\n\t\tif( this.minIndex !== void 0 ) buffer = this.minIndex + buffer;\n\t\tif( this.maxIndex !== void 0 ) buffer = buffer + this.maxIndex;\n\n\t\treturn buffer;\n\t}\n}\n"],"sourceRoot":"../../src"}