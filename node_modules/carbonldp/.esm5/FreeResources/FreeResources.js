import { isAbsolute } from "sparqler/iri";
import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ModelDecorator } from "../Model/ModelDecorator";
import { URI } from "../RDF/URI";
import { Registry } from "../Registry/Registry";
import { Resource } from "../Resource/Resource";
export var FreeResources = {
    PROTOTYPE: {
        _getLocalID: function (id) {
            if (isAbsolute(id) && !URI.hasProtocol(id))
                return id;
            throw new IllegalArgumentError("\"" + id + "\" is out of scope.");
        },
        _addPointer: function (base) {
            if (!base.$id)
                base.$id = URI.generateBNodeID();
            return Registry.PROTOTYPE._addPointer.call(this, base);
        },
        toJSON: function (contextOrKey) {
            return this
                .getPointers(true)
                .map(function (resource) { return resource.toJSON(contextOrKey); });
        },
    },
    is: function (value) {
        return Registry.isDecorated(value)
            && FreeResources.isDecorated(value);
    },
    isDecorated: function (object) {
        return ModelDecorator
            .hasPropertiesFrom(FreeResources.PROTOTYPE, object);
    },
    create: function (data) {
        var copy = Object.assign({}, data);
        return FreeResources.createFrom(copy);
    },
    createFrom: function (object) {
        return FreeResources.decorate(object);
    },
    decorate: function (object) {
        if (FreeResources.isDecorated(object))
            return object;
        var base = Object.assign(object, {
            __modelDecorator: Resource,
        });
        var resource = ModelDecorator
            .decorateMultiple(base, Registry);
        return ModelDecorator
            .definePropertiesFrom(FreeResources.PROTOTYPE, resource);
    },
    parseFreeNodes: function (registry, freeNodes) {
        var freeResources = FreeResources
            .createFrom({ registry: registry });
        freeNodes
            .forEach(function (node) {
            var digestedSchema = registry.getSchemaFor(node);
            var target = freeResources.getPointer(node["@id"], true);
            registry.context.jsonldConverter.compact(node, target, digestedSchema, freeResources);
        });
        return freeResources;
    },
};

//# sourceMappingURL=FreeResources.js.map
