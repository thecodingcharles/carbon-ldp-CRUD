{"version":3,"sources":["Context/Context.ts"],"names":[],"mappings":"","file":"Context.js","sourcesContent":["import { GeneralRegistry } from \"../GeneralRegistry/GeneralRegistry\";\nimport { GeneralRepository } from \"../GeneralRepository/GeneralRepository\";\n\nimport { JSONLDConverter } from \"../JSONLD/JSONLDConverter\";\n\nimport { ModelSchema } from \"../Model/ModelSchema\";\n\nimport { DigestedObjectSchema } from \"../ObjectSchema/DigestedObjectSchema\";\nimport { ObjectSchema } from \"../ObjectSchema/ObjectSchema\";\n\nimport { RegisteredPointer } from \"../Registry/RegisteredPointer\";\nimport { ResolvablePointer } from \"../Repository/ResolvablePointer\";\n\n\n/**\n * Interface that every context in the SDK must implement.\n */\nexport interface Context<REGISTRY extends RegisteredPointer | undefined = RegisteredPointer, REPOSITORY extends ResolvablePointer | undefined = ResolvablePointer> {\n\t/**\n\t * Registry where the context stores its associated resources.\n\t */\n\treadonly registry:REGISTRY extends {} ? GeneralRegistry<REGISTRY> : undefined;\n\t/**\n\t * Repository that can fetch the data of the resources of the context.\n\t */\n\treadonly repository:REPOSITORY extends {} ? GeneralRepository<REPOSITORY> : undefined;\n\n\t/**\n\t * Base URI of the resources that can be used by the context.\n\t */\n\treadonly baseURI:string;\n\t/**\n\t * Parent context from where the context inherit some data, configurations and more.\n\t */\n\treadonly parentContext:Context<any, any> | undefined;\n\n\t/**\n\t * Converter of JSONLD objects associated to the current context.\n\t */\n\treadonly jsonldConverter:JSONLDConverter;\n\n\t/**\n\t * Resolved the relative URI provided with the base URI of the context.\n\t * @param relativeURI The URI to be resolved.\n\t */\n\tresolve( relativeURI:string ):string;\n\n\t/**\n\t * Returns true if there is an object schema fot the specified type.\n\t * @param type The URI of the type to check if has a schema.\n\t */\n\thasObjectSchema( type:string ):boolean;\n\n\t/**\n\t * Returns the object schema for the specified type if provided, otherwise\n\t * the general object schema will be the one returned.\n\t * @param type The URI of the type to look for tis schema.\n\t */\n\tgetObjectSchema( type?:string ):DigestedObjectSchema;\n\n\t/**\n\t * Extends the general object schema.\n\t *\n\t * If the first extension, the general schema of the parent context\n\t * will be duplicated into the current before its extended.\n\t *\n\t * @param objectSchema The schema data from where to extend the general schema.\n\t */\n\textendObjectSchema( objectSchema:ObjectSchema ):this;\n\t/**\n\t * Extends the schema of the type specified.\n\t *\n\t * If the first extension, the typed schema of the parent context\n\t * will be duplicated into the current before its extended.\n\t *\n\t * @param type The URI of the type to extend its schema.\n\t * @param objectSchema The schema data from where to extend the typed schema.\n\t */\n\textendObjectSchema( type:string, objectSchema:ObjectSchema ):this;\n\t/**\n\t * Extends the schema of the type specified.\n\t *\n\t * The signature behaves as the previous one but uses {@link ModelSchema.TYPE}\n\t * as the type and {@link ModelSchema.SCHEMA} as the schema data extender.\n\t *\n\t * @param modelSchema The object with the type and the schema to extend.\n\t */\n\textendObjectSchema( modelSchema:ModelSchema ):this;\n\t/**\n\t * Extends a multiple of typed schemas using the interface {@link ModelSchema}\n\t * or also extends the general schema when a direct object schema is provided.\n\t *\n\t * @param schemas The array of typed schemas and/or schemas to extend.\n\t */\n\textendObjectSchema( schemas:(ModelSchema | ObjectSchema)[] ):this;\n\n\t/**\n\t * Remove the schema of a specific type if provided,\n\t * or clear the general schema if no type is provided.\n\t *\n\t * @param type The URI of the type to remove its schema.\n\t */\n\tclearObjectSchema( type?:string ):void;\n}\n"],"sourceRoot":"../../src"}