import * as tslib_1 from "tslib";
import { DocumentsRegistry } from "../DocumentsRegistry/DocumentsRegistry";
import { DocumentsRepository } from "../DocumentsRepository/DocumentsRepository";
import { IllegalStateError } from "../Errors/IllegalStateError";
import { MessagingService } from "../Messaging/MessagingService";
import { URI } from "../RDF/URI";
import { isObject, isString, ObjectUtils } from "../Utils";
import { AbstractContext } from "./AbstractContext";
import { GlobalContext } from "./GlobalContext";
var DocumentsContext = (function (_super) {
    tslib_1.__extends(DocumentsContext, _super);
    function DocumentsContext(url) {
        var _this = _super.call(this, GlobalContext.instance) || this;
        _this._baseURI = url;
        _this.registry = DocumentsRegistry.createFrom({ context: _this });
        _this.repository = DocumentsRepository.createFrom({ context: _this });
        _this.messaging = new MessagingService(_this);
        return _this;
    }
    DocumentsContext.__mergePaths = function (target, source) {
        if (!source)
            return target;
        if (!target)
            return ObjectUtils.clone(source, { objects: true });
        for (var _i = 0, _a = Object.keys(source); _i < _a.length; _i++) {
            var key = _a[_i];
            var sourcePath = source[key];
            if (sourcePath === null) {
                delete target[key];
                continue;
            }
            var targetPath = target[key];
            if (!targetPath) {
                target[key] = isObject(sourcePath) ?
                    ObjectUtils.clone(sourcePath, { objects: true }) :
                    sourcePath;
                continue;
            }
            if (isString(sourcePath)) {
                if (isObject(targetPath)) {
                    targetPath.slug = sourcePath;
                }
                else {
                    target[key] = sourcePath;
                }
                continue;
            }
            if (sourcePath.slug === void 0 && sourcePath.paths === void 0)
                continue;
            var targetDocPaths = isString(targetPath) ?
                target[key] = { slug: targetPath } : targetPath;
            if (sourcePath.slug !== void 0)
                targetDocPaths.slug = sourcePath.slug;
            if (sourcePath.paths !== void 0)
                targetDocPaths.paths = DocumentsContext.__mergePaths(targetDocPaths.paths, sourcePath.paths);
        }
        return target;
    };
    DocumentsContext.prototype._resolvePath = function (path) {
        var leftSearchedPaths = path.split(".");
        var currentSearchedPaths = [];
        var url = "";
        var documentPaths = this._settings && this._settings.paths;
        while (leftSearchedPaths.length) {
            var containerKey = leftSearchedPaths.shift();
            currentSearchedPaths.push(containerKey);
            var containerPath = documentPaths ? documentPaths[containerKey] : null;
            if (!containerPath)
                throw new IllegalStateError("The path \"" + currentSearchedPaths.join(".") + "\" hasn't been declared.");
            var slug = isString(containerPath) ? containerPath : containerPath.slug;
            if (!slug)
                throw new IllegalStateError("The path \"" + currentSearchedPaths.join(".") + "\" doesn't have a slug set.");
            url = URI.resolve(url, slug);
            documentPaths = isObject(containerPath) ? containerPath.paths : undefined;
        }
        return this.resolve(url);
    };
    DocumentsContext.prototype._extendPaths = function (paths) {
        this._settings.paths = DocumentsContext.__mergePaths(this._settings.paths, paths);
    };
    DocumentsContext.prototype._extendsSettings = function (settings) {
        this._extendPaths(settings.paths);
        delete settings.paths;
        ObjectUtils.extend(this._settings, settings);
    };
    return DocumentsContext;
}(AbstractContext));
export { DocumentsContext };

//# sourceMappingURL=DocumentsContext.js.map
