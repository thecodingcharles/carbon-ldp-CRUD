import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ContainerType } from "../ObjectSchema/ContainerType";
import { Pointer } from "../Pointer/Pointer";
import { _getPointer } from "../Pointer/PointerLibrary";
import { RDFList } from "../RDF/List";
import * as XSDSerializers from "../RDF/Literal/Serializers/XSD";
import { RDFNode } from "../RDF/Node";
import { URI } from "../RDF/URI";
import { RDFValue } from "../RDF/Value";
import { _isExistingValue, isFunction, isNull, isObject, isString, MapUtils } from "../Utils";
import { XSD } from "../Vocabularies/XSD";
import { _guessXSDType } from "./Utils";
var JSONLDConverter = (function () {
    function JSONLDConverter(literalSerializers) {
        this._literalSerializers = literalSerializers ?
            MapUtils.extend(new Map(), literalSerializers) :
            JSONLDConverter.getDefaultSerializers();
    }
    Object.defineProperty(JSONLDConverter.prototype, "literalSerializers", {
        get: function () { return this._literalSerializers; },
        enumerable: true,
        configurable: true
    });
    JSONLDConverter.getDefaultSerializers = function () {
        var literalSerializers = new Map();
        literalSerializers.set(XSD.date, XSDSerializers.dateSerializer);
        literalSerializers.set(XSD.dateTime, XSDSerializers.dateTimeSerializer);
        literalSerializers.set(XSD.time, XSDSerializers.timeSerializer);
        literalSerializers.set(XSD.integer, XSDSerializers.integerSerializer);
        literalSerializers.set(XSD.int, XSDSerializers.integerSerializer);
        literalSerializers.set(XSD.unsignedInt, XSDSerializers.unsignedIntegerSerializer);
        literalSerializers.set(XSD.long, XSDSerializers.longSerializer);
        literalSerializers.set(XSD.unsignedLong, XSDSerializers.unsignedLongSerializer);
        literalSerializers.set(XSD.float, XSDSerializers.floatSerializer);
        literalSerializers.set(XSD.double, XSDSerializers.floatSerializer);
        literalSerializers.set(XSD.boolean, XSDSerializers.booleanSerializer);
        literalSerializers.set(XSD.string, XSDSerializers.stringSerializer);
        return literalSerializers;
    };
    JSONLDConverter.prototype.compact = function (expandedObjectOrObjects, targetObjectOrObjectsOrDigestedContext, digestedSchemaOrPointerLibrary, pointerLibrary, strict) {
        var targetObjectOrObjects = !pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;
        var digestedSchema = !pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;
        pointerLibrary = !pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;
        if (!Array.isArray(expandedObjectOrObjects))
            return this.__compactSingle(expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary, strict);
        var expandedObjects = expandedObjectOrObjects;
        var targetObjects = !!targetObjectOrObjects ? targetObjectOrObjects : [];
        for (var i = 0, length_1 = expandedObjects.length; i < length_1; i++) {
            var expandedObject = expandedObjects[i];
            var targetObject = targetObjects[i] = !!targetObjects[i] ? targetObjects[i] : {};
            this.__compactSingle(expandedObject, targetObject, digestedSchema, pointerLibrary, strict);
        }
        return targetObjects;
    };
    JSONLDConverter.prototype.expand = function (compactedObjectOrObjects, generalSchema, digestedSchema) {
        if (!Array.isArray(compactedObjectOrObjects))
            return this.__expandSingle(compactedObjectOrObjects, generalSchema, digestedSchema);
    };
    JSONLDConverter.prototype.update = function (target, node, digestedSchema, pointerLibrary, strict) {
        var compactedData = this.compact(node, {}, digestedSchema, pointerLibrary, strict);
        new Set(Object.getOwnPropertyNames(target).concat(Object.keys(compactedData))).forEach(function (key) {
            var _a;
            if (key.startsWith("$"))
                return;
            if (isFunction(target[key]))
                return;
            if (!compactedData.hasOwnProperty(key)) {
                if (!strict || digestedSchema.properties.has(key))
                    delete target[key];
                return;
            }
            if (!Array.isArray(target[key])) {
                target[key] = compactedData[key];
                return;
            }
            var values = Array.isArray(compactedData[key]) ? compactedData[key] : [compactedData[key]];
            target[key].length = 0;
            (_a = target[key]).push.apply(_a, values);
        });
    };
    JSONLDConverter.prototype.__expandSingle = function (compactedObject, generalSchema, digestedSchema) {
        var expandedObject = {};
        expandedObject["@id"] = !!compactedObject["$id"] ? compactedObject["$id"] : "";
        if (compactedObject["types"]) {
            var types = Array.isArray(compactedObject["types"]) ?
                compactedObject["types"] : [compactedObject["types"]];
            if (types.length)
                expandedObject["@type"] = types
                    .map(function (type) { return generalSchema.resolveURI(type, { vocab: true, base: true }); });
        }
        for (var _i = 0, _a = Object.keys(compactedObject); _i < _a.length; _i++) {
            var propertyName = _a[_i];
            if (propertyName === "$id")
                continue;
            if (propertyName === "types")
                continue;
            var expandedPropertyName = digestedSchema.resolveURI(propertyName, { vocab: true });
            if (URI.isRelative(expandedPropertyName))
                continue;
            var expandedValue = this.__expandProperty(propertyName, compactedObject[propertyName], digestedSchema, generalSchema);
            if (expandedValue === null)
                continue;
            expandedObject[expandedPropertyName] = expandedValue;
        }
        return expandedObject;
    };
    JSONLDConverter.prototype.__expandProperty = function (propertyName, propertyValue, digestedSchema, generalSchema) {
        var definition = digestedSchema.properties.get(propertyName);
        var propertyContainer = definition ? definition.containerType : void 0;
        if (propertyContainer === ContainerType.LANGUAGE)
            return this.__expandPropertyLanguageMap(propertyValue);
        propertyValue = Array.isArray(propertyValue) ? propertyValue : [propertyValue];
        if (propertyContainer === null)
            propertyValue = [propertyValue[0]];
        var propertyType = definition ? definition.literal : null;
        var expandedValues = propertyType === true ?
            this.__expandPropertyLiteral(propertyValue, definition, digestedSchema) :
            propertyType === false ?
                this.__expandPropertyPointer(propertyValue, digestedSchema, generalSchema) :
                this.__expandPropertyValue(propertyValue, digestedSchema, generalSchema);
        var filteredValues = expandedValues.filter(function (value) { return value !== null; });
        if (!filteredValues.length)
            return null;
        if (propertyContainer === ContainerType.LIST)
            return [
                { "@list": filteredValues },
            ];
        return filteredValues;
    };
    JSONLDConverter.prototype.__expandPropertyValue = function (propertyValue, digestedSchema, generalSchema) {
        var _this = this;
        return propertyValue.map(function (value) { return _this.__expandValue(value, digestedSchema, generalSchema); });
    };
    JSONLDConverter.prototype.__expandPropertyPointer = function (propertyValue, digestedSchema, generalSchema) {
        var _this = this;
        return propertyValue.map(function (value) { return _this.__expandPointerValue(value, digestedSchema, generalSchema); });
    };
    JSONLDConverter.prototype.__expandPropertyLiteral = function (propertyValue, definition, digestedSchema) {
        var _this = this;
        var literalType = digestedSchema.resolveURI(definition.literalType, { vocab: true, base: true });
        var expandedValues = propertyValue.map(function (value) { return _this.__expandLiteralValue(value, literalType); });
        if (definition.language)
            expandedValues.forEach(function (value) { return value["@language"] = definition.language; });
        return expandedValues;
    };
    JSONLDConverter.prototype.__expandPropertyLanguageMap = function (propertyValue) {
        if (!isObject(propertyValue)) {
            return null;
        }
        var mapValues = [];
        for (var _i = 0, _a = Object.keys(propertyValue); _i < _a.length; _i++) {
            var languageTag = _a[_i];
            var serializedValue = this.literalSerializers.get(XSD.string).serialize(propertyValue[languageTag]);
            mapValues.push({ "@value": serializedValue, "@type": XSD.string, "@language": languageTag });
        }
        return mapValues;
    };
    JSONLDConverter.prototype.__expandPointerValue = function (propertyValue, digestedSchema, generalSchema) {
        var isStringID = isString(propertyValue);
        var id = Pointer.is(propertyValue) ?
            propertyValue.$id :
            isStringID ?
                propertyValue :
                null;
        if (!id)
            return null;
        var resolved = generalSchema.resolveURI(id, { vocab: isStringID });
        return { "@id": resolved };
    };
    JSONLDConverter.prototype.__expandValue = function (propertyValue, digestedSchema, generalSchema) {
        if (Array.isArray(propertyValue))
            return null;
        return Pointer.is(propertyValue) ?
            this.__expandPointerValue(propertyValue, generalSchema, digestedSchema) :
            this.__expandLiteralValue(propertyValue, _guessXSDType(propertyValue));
    };
    JSONLDConverter.prototype.__expandLiteralValue = function (literalValue, literalType) {
        if (literalType === null)
            return null;
        if (!this.literalSerializers.has(literalType))
            return null;
        var serializedValue = this.literalSerializers
            .get(literalType)
            .serialize(literalValue);
        return { "@value": serializedValue, "@type": literalType };
    };
    JSONLDConverter.prototype.__compactSingle = function (expandedObject, targetObject, digestedSchema, pointerLibrary, strict) {
        if (!expandedObject["@id"])
            throw new IllegalArgumentError("The expandedObject doesn't have an @id defined.");
        targetObject["$id"] = expandedObject["@id"];
        targetObject["types"] = !!expandedObject["@type"] ? expandedObject["@type"] : [];
        var propertyURINameMap = this.__getPropertyURINameMap(digestedSchema);
        for (var _i = 0, _a = Object.keys(expandedObject); _i < _a.length; _i++) {
            var propertyURI = _a[_i];
            if (propertyURI === "@id")
                continue;
            if (propertyURI === "@type")
                continue;
            var propertyValues = expandedObject[propertyURI];
            if (!_isExistingValue(propertyValues))
                continue;
            if (!propertyURINameMap.has(propertyURI) && strict)
                continue;
            var propertyName = propertyURINameMap.has(propertyURI) ?
                propertyURINameMap.get(propertyURI) :
                digestedSchema.vocab ?
                    URI.getRelativeURI(propertyURI, digestedSchema.vocab) :
                    propertyURI;
            var targetValue = this.__getPropertyValue(propertyName, propertyValues, digestedSchema, pointerLibrary);
            if (targetValue === null || targetValue === void 0)
                continue;
            targetObject[propertyName] = targetValue;
        }
        return targetObject;
    };
    JSONLDConverter.prototype.__getPropertyContainerType = function (propertyValues) {
        if (propertyValues.length === 1) {
            if (RDFList.is(propertyValues[0]))
                return ContainerType.LIST;
        }
        else {
            return ContainerType.SET;
        }
        return null;
    };
    JSONLDConverter.prototype.__getPropertyValue = function (propertyName, propertyValues, digestedSchema, pointerLibrary) {
        var definition = digestedSchema.properties.get(propertyName);
        var propertyContainer = definition ?
            definition.containerType :
            this.__getPropertyContainerType(propertyValues);
        if (propertyContainer === ContainerType.LANGUAGE) {
            return RDFNode.getPropertyLanguageMap(propertyValues);
        }
        if (propertyContainer === ContainerType.LIST) {
            var list = RDFNode.getList(propertyValues);
            if (!list)
                return null;
            propertyValues = list["@list"];
        }
        var propertyType = definition ? definition.literal : null;
        if (propertyType === true && (definition && definition.language)) {
            propertyValues = propertyValues.filter(function (value) { return value["@language"] === definition.language; });
        }
        if (propertyContainer === null)
            propertyValues = [propertyValues[0]];
        var compactedValues = propertyType === true ?
            this.__compactPropertyLiteral(propertyValues, definition, digestedSchema) :
            propertyType === false ?
                this.__getPropertyPointers(propertyValues, pointerLibrary) :
                this.__getProperties(propertyValues, pointerLibrary);
        if (!compactedValues)
            return null;
        var filteredValues = compactedValues.filter(function (value) { return value !== null; });
        if (!filteredValues.length)
            return null;
        if (propertyContainer === null)
            return filteredValues[0];
        return filteredValues;
    };
    JSONLDConverter.prototype.__getPropertyURINameMap = function (digestedSchema) {
        var map = new Map();
        digestedSchema.properties.forEach(function (definition, propertyName) {
            var uri = digestedSchema.resolveURI(definition.uri, { vocab: true });
            map.set(uri, propertyName);
        });
        return map;
    };
    JSONLDConverter.prototype.__compactPropertyLiteral = function (propertyValues, definition, digestedSchema) {
        var literalType = definition.literalType === null ?
            XSD.string : digestedSchema.resolveURI(definition.literalType, { vocab: true, base: true });
        return RDFNode.getPropertyLiterals(propertyValues, literalType);
    };
    JSONLDConverter.prototype.__getProperties = function (propertyValues, pointerLibrary) {
        if (!Array.isArray(propertyValues))
            return;
        return propertyValues
            .map(RDFValue.parse.bind(null, pointerLibrary))
            .filter(function (value) { return !isNull(value); });
    };
    JSONLDConverter.prototype.__getPropertyPointers = function (propertyValues, pointerLibrary) {
        if (!Array.isArray(propertyValues))
            return;
        return propertyValues
            .filter(RDFNode.is)
            .map(RDFNode.getID)
            .map(_getPointer.bind(null, pointerLibrary))
            .filter(function (pointer) { return !isNull(pointer); });
    };
    return JSONLDConverter;
}());
export { JSONLDConverter };

//# sourceMappingURL=JSONLDConverter.js.map
