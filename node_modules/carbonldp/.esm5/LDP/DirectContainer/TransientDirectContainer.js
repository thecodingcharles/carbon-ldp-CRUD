import { TransientDocument } from "../../Document/TransientDocument";
import { IllegalArgumentError } from "../../Errors/IllegalArgumentError";
import { LDP } from "../../Vocabularies/LDP";
export var TransientDirectContainer = {
    TYPE: LDP.DirectContainer,
    is: function (value) {
        return TransientDocument.is(value)
            && value.$hasType(TransientDirectContainer.TYPE)
            && value.hasOwnProperty("hasMemberRelation");
    },
    create: function (data) {
        var copy = Object.assign({}, data);
        return TransientDirectContainer.createFrom(copy);
    },
    createFrom: function (object) {
        if (TransientDirectContainer.is(object))
            throw new IllegalArgumentError("The base object is already a DirectContainer.");
        if (!object.hasMemberRelation)
            throw new IllegalArgumentError("The property hasMemberRelation is required.");
        var container = TransientDocument.is(object) ?
            object : TransientDocument.createFrom(object);
        container.$addType(TransientDirectContainer.TYPE);
        return container;
    },
};

//# sourceMappingURL=TransientDirectContainer.js.map
