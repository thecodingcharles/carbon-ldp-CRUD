{"version":3,"sources":["Messaging/Utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AAEtE,OAAO,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAOjC,MAAM,UAAU,kBAAkB,CAAE,KAAY;IAC/C,IAAI,CAAE,4GAA4G,CAAC,IAAI,CAAE,KAAK,CAAE;QAAG,MAAM,IAAI,oBAAoB,CAAE,2BAAwB,KAAK,mBAAe,CAAE,CAAC;AACnN,CAAC;AAOD,MAAM,UAAU,gBAAgB,CAAE,UAAiB,EAAE,OAAc;IAClE,IAAI,CAAE,GAAG,CAAC,QAAQ,CAAE,OAAO,EAAE,UAAU,CAAE;QAAG,MAAM,IAAI,oBAAoB,CAAE,OAAI,UAAU,wBAAoB,CAAE,CAAC;IAEjH,IAAI,UAAU,KAAK,GAAG;QAAG,OAAO,EAAE,CAAC;IACnC,UAAU,GAAG,GAAG,CAAC,cAAc,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;IACvD,UAAU,GAAG,UAAU,CAAC,SAAS,CAAE,CAAE,UAAU,CAAC,UAAU,CAAE,GAAG,CAAE,EAAE,UAAU,CAAC,MAAM,GAAG,CAAE,UAAU,CAAC,QAAQ,CAAE,GAAG,CAAE,CAAE,CAAC;IAEtH,OAAO,UAAU;SACf,KAAK,CAAE,GAAG,CAAE;SACZ,GAAG,CAAE,UAAA,IAAI;QACT,IAAI,IAAI,KAAK,IAAI;YAAG,OAAO,GAAG,CAAC;QAC/B,OAAO,kBAAkB,CAAE,IAAI,CAAE;aAC/B,OAAO,CAAE,KAAK,EAAE,GAAG,CAAE,CAAC;IACzB,CAAC,CAAE,CAAC,IAAI,CAAE,GAAG,CAAE,CACd;AACH,CAAC;AAQD,MAAM,UAAU,kBAAkB,CAAE,KAAY,EAAE,UAAiB,EAAE,OAAc;IAClF,kBAAkB,CAAE,KAAK,CAAE,CAAC;IAE5B,UAAU,GAAG,gBAAgB,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;IACrD,OAAO,YAAU,KAAK,IAAG,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAE,CAAC;AACvE,CAAC","file":"Utils.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { URI } from \"../RDF/URI\";\n\n\n/**\n * Throws an error when an invalid event is provided.\n * @param event The event to check.\n */\nexport function _validateEventType( event:string ):void {\n\tif( ! /(access-point|child|\\*)\\.(created|\\*)|(document|\\*)\\.(modified|deleted|\\*)|(member|\\*)\\.(added|removed|\\*)/.test( event ) ) throw new IllegalArgumentError( `Provided event type \"${event}\" is invalid.` );\n}\n\n/**\n * Parses an URI pattern into the form of a AMQP path.\n * @param uriPattern The URI pattern to parse.\n * @param baseURI The base URI to remove from an absolute URI pattern since the AMQP requires a relative path.\n */\nexport function _parseURIPattern( uriPattern:string, baseURI:string ):string {\n\tif( ! URI.isBaseOf( baseURI, uriPattern ) ) throw new IllegalArgumentError( `\"${uriPattern}\" is out of scope.` );\n\n\tif( uriPattern === \"/\" ) return \"\";\n\turiPattern = URI.getRelativeURI( uriPattern, baseURI );\n\turiPattern = uriPattern.substring( + uriPattern.startsWith( \"/\" ), uriPattern.length - + uriPattern.endsWith( \"/\" ) );\n\n\treturn uriPattern\n\t\t.split( \"/\" )\n\t\t.map( slug => {\n\t\t\tif( slug === \"**\" ) return \"#\";\n\t\t\treturn encodeURIComponent( slug )\n\t\t\t\t.replace( /\\./g, \"^\" );\n\t\t} ).join( \".\" )\n\t\t;\n}\n\n/**\n * Creates a complete AMQP path to use as the destination of a subscription.\n * @param event The event target to subscribe.\n * @param uriPattern The URI pattern to subscribe.\n * @param baseURI The base URI ro remove from an absolute URI pattern.\n */\nexport function _createDestination( event:string, uriPattern:string, baseURI:string ):string {\n\t_validateEventType( event );\n\n\turiPattern = _parseURIPattern( uriPattern, baseURI );\n\treturn `/topic/${event}${uriPattern ? \".\" + uriPattern : uriPattern}`;\n}\n"],"sourceRoot":"../../src"}