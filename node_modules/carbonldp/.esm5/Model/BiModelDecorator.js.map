{"version":3,"sources":["Model/BiModelDecorator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,OAAO,EAAE,cAAc,EAAyB,MAAM,kBAAkB,CAAC;AAmCzE,MAAM,CAAC,IAAM,gBAAgB,GAAyB;IACrD,iBAAiB,EAAjB,UAAmB,SAAgB,EAAE,MAAa;QACjD,OAAO,cAAc,CAAC,iBAAiB,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IAC9D,CAAC;IAED,oBAAoB,EAApB,UAA0D,SAAW,EAAE,MAAQ;QAC9E,IAAI,KAAK,IAAI,MAAM;YAAG,OAAO;iBAC3B,QAAQ,CAAE,MAAM,CAAE,CAAC;QAErB,OAAO,cAAc;aACnB,oBAAoB,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IAC7C,CAAC;IAED,gBAAgB,EAAE,cAAc,CAAC,gBAAgB;CACjD,CAAC","file":"BiModelDecorator.js","sourcesContent":["import { Pointer } from \"../Pointer/Pointer\";\n\nimport { ModelDecorator, ModelDecoratorFactory } from \"./ModelDecorator\";\n\n\n/**\n * Interface with the methods of a model decoration of plain object and an {@link Pointer} based model.\n * The {@link Pointer} based one, will be decorated adding a `$` before every property and method name,\n * while the plain one will just add the normal property and methods names.\n */\nexport interface BiModelDecorator<MODEL extends object, $MODEL extends Pointer, BASE extends object, $BASE extends Pointer> extends ModelDecorator<MODEL, BASE> {\n\t/**\n\t * Returns true if the object provided has the decorated properties and methods of a {@link Pointer} based model.\n\t * @param object The object to check.\n\t */\n\tisDecorated( object:Pointer ):object is $MODEL;\n\t/**\n\t * Returns true if the object provided has the decorated properties and methods of a model.\n\t * @param object The object to check.\n\t */\n\tisDecorated( object:object ):object is MODEL;\n\n\t/**\n\t * Decorates an object with the extended prototypes to create a {@link Pointer} based model.\n\t * @param object The object to decorate.\n\t */\n\tdecorate<T extends object>( object:T & $BASE ):T & $MODEL;\n\t/**\n\t * Decorates an object with the correct prototypes to create a model.\n\t * @param object The object to decorate.\n\t */\n\tdecorate<T extends object>( object:T & BASE ):T & MODEL;\n}\n\n/**\n * Constant that implements {@link ModelDecoratorFactory} extending to support {@link Pointer} based models.\n */\nexport const BiModelDecorator:ModelDecoratorFactory = {\n\thasPropertiesFrom( prototype:object, object:object ):boolean {\n\t\treturn ModelDecorator.hasPropertiesFrom( prototype, object );\n\t},\n\n\tdefinePropertiesFrom<P extends object, O extends object>( prototype:P, object:O ):O & P {\n\t\tif( \"$id\" in object ) Pointer\n\t\t\t.decorate( object );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( prototype, object );\n\t},\n\n\tdecorateMultiple: ModelDecorator.decorateMultiple,\n};\n"],"sourceRoot":"../../src"}