import { LanguageToken, LiteralToken, RDFLiteralToken } from "sparqler/tokens";
import { isDate } from "../Utils";
import { XSD } from "../Vocabularies/XSD";
var QueryValue = (function () {
    function QueryValue(queryContainer, value) {
        this._value = value;
        this._queryContainer = queryContainer;
        if (isDate(value)) {
            this.withType(XSD.dateTime);
        }
        else {
            this._literal = new LiteralToken(value);
        }
    }
    QueryValue.prototype.withType = function (type) {
        if (XSD.hasOwnProperty(type))
            type = XSD[type];
        var value = this._queryContainer.serializeLiteral(type, this._value);
        var typeToken = this._queryContainer.compactIRI(type);
        this._literal = new RDFLiteralToken(value, typeToken);
        return this;
    };
    QueryValue.prototype.withLanguage = function (language) {
        var value = this._queryContainer.serializeLiteral(XSD.string, this._value);
        var languageToken = new LanguageToken(language);
        this._literal = new RDFLiteralToken(value, languageToken);
        return this;
    };
    QueryValue.prototype.getToken = function () {
        return this._literal;
    };
    QueryValue.prototype.toString = function () {
        return "" + this._literal;
    };
    return QueryValue;
}());
export { QueryValue };

//# sourceMappingURL=QueryValue.js.map
