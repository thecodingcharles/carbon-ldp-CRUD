import * as tslib_1 from "tslib";
import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { IllegalStateError } from "../Errors/IllegalStateError";
import { Pointer } from "../Pointer/Pointer";
import { isObject } from "../Utils";
import { QueryObject } from "./QueryObject";
import { QueryPropertyType } from "./QueryPropertyType";
import { QueryValue } from "./QueryValue";
var QueryDocumentBuilder = (function () {
    function QueryDocumentBuilder(queryContainer, queryProperty) {
        this.inherit = QueryDocumentBuilder.INHERIT;
        this.all = QueryDocumentBuilder.ALL;
        this._queryContainer = queryContainer;
        this._queryProperty = queryProperty;
    }
    QueryDocumentBuilder.prototype.property = function (name) {
        var parent = this._queryProperty;
        while (parent) {
            var property = parent.getProperty(name, { create: true });
            if (property)
                return property.identifier;
            parent = parent.parent;
        }
        throw new IllegalArgumentError("The property \"" + name + "\" was not declared.");
    };
    QueryDocumentBuilder.prototype.value = function (value) {
        return new QueryValue(this._queryContainer, value);
    };
    QueryDocumentBuilder.prototype.object = function (object) {
        var id = Pointer.getID(object);
        return new QueryObject(this._queryContainer, id);
    };
    QueryDocumentBuilder.prototype.withType = function (type) {
        if (this._queryProperty.hasProperties())
            throw new IllegalStateError("Types must be specified before the properties.");
        this._queryProperty.addType(type);
        return this;
    };
    QueryDocumentBuilder.prototype.properties = function (propertiesSchema) {
        if (propertiesSchema === QueryDocumentBuilder.ALL) {
            this._queryProperty.setType(QueryPropertyType.ALL);
            return this;
        }
        if (propertiesSchema === QueryDocumentBuilder.FULL) {
            this._queryProperty.setType(QueryPropertyType.FULL);
            return this;
        }
        this._queryProperty.setType(QueryPropertyType.PARTIAL);
        for (var propertyName in propertiesSchema) {
            var queryPropertySchema = propertiesSchema[propertyName];
            var querySchemaProperty = isObject(queryPropertySchema)
                ? queryPropertySchema : { "@id": queryPropertySchema };
            var property = this._queryProperty
                .addProperty(propertyName, querySchemaProperty);
            var subQuery = querySchemaProperty.query;
            if (!subQuery)
                continue;
            var builder = new SubQueryDocumentsBuilder(this._queryContainer, property);
            if (builder !== subQuery.call(void 0, builder))
                throw new IllegalArgumentError("The provided query builder was not returned");
        }
        return this;
    };
    QueryDocumentBuilder.ALL = Object.freeze({});
    QueryDocumentBuilder.FULL = Object.freeze({});
    QueryDocumentBuilder.INHERIT = Object.freeze({});
    return QueryDocumentBuilder;
}());
export { QueryDocumentBuilder };
var SubQueryDocumentsBuilder = (function (_super) {
    tslib_1.__extends(SubQueryDocumentsBuilder, _super);
    function SubQueryDocumentsBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubQueryDocumentsBuilder.prototype.filter = function (constraint) {
        this._queryProperty
            .addFilter(constraint);
        return this;
    };
    SubQueryDocumentsBuilder.prototype.values = function () {
        var _this = this;
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var tokens = values
            .map(function (value) {
            var token = value.getToken();
            if (token.token === "blankNode")
                throw new IllegalArgumentError("Cannot assign blank nodes (\"" + token.label + "\").");
            if (_this._queryProperty.definition.literal) {
                if (token.token !== "literal")
                    throw new IllegalArgumentError("\"" + token + "\" is not a literal value.");
            }
            if (_this._queryProperty.definition.pointerType !== null) {
                if (token.token === "literal")
                    throw new IllegalArgumentError("\"" + token + "\" is not a resource value.");
            }
            return token;
        });
        this._queryProperty.addValues(tokens);
        this._queryProperty.setObligatory({ inheritParents: true });
        return this;
    };
    return SubQueryDocumentsBuilder;
}(QueryDocumentBuilder));
export { SubQueryDocumentsBuilder };

//# sourceMappingURL=QueryDocumentBuilder.js.map
