import * as tslib_1 from "tslib";
import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { SubQueryDocumentsBuilder } from "./QueryDocumentBuilder";
var QueryDocumentsBuilder = (function (_super) {
    tslib_1.__extends(QueryDocumentsBuilder, _super);
    function QueryDocumentsBuilder(queryContainer, queryProperty) {
        return _super.call(this, queryContainer, queryProperty) || this;
    }
    QueryDocumentsBuilder.prototype.orderBy = function (property, flow) {
        this._queryProperty.setOrder({
            path: property,
            flow: parseFlowString(flow),
        });
        return this;
    };
    QueryDocumentsBuilder.prototype.limit = function (limit) {
        this._queryProperty.setLimit(limit);
        return this;
    };
    QueryDocumentsBuilder.prototype.offset = function (offset) {
        this._queryProperty.setOffset(offset);
        return this;
    };
    return QueryDocumentsBuilder;
}(SubQueryDocumentsBuilder));
export { QueryDocumentsBuilder };
function parseFlowString(flow) {
    if (flow === void 0)
        return;
    var upperCase = flow
        .toUpperCase();
    switch (upperCase) {
        case "ASC":
        case "DESC":
            return upperCase;
        case "ASCENDING":
        case "DESCENDING":
            return upperCase
                .slice(0, -6);
        default:
            throw new IllegalArgumentError("Invalid flow order.");
    }
}

//# sourceMappingURL=QueryDocumentsBuilder.js.map
