{"version":3,"sources":["QueryDocuments/QueryResultCompacter.ts"],"names":[],"mappings":"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","file":"QueryResultCompacter.js","sourcesContent":["import { Document } from \"../Document/Document\";\n\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { GeneralRegistry } from \"../GeneralRegistry/GeneralRegistry\";\n\nimport { JSONLDConverter } from \"../JSONLD/JSONLDConverter\";\n\nimport { DigestedObjectSchema } from \"../ObjectSchema/DigestedObjectSchema\";\nimport { DigestedObjectSchemaProperty } from \"../ObjectSchema/DigestedObjectSchemaProperty\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\nimport { PointerLibrary } from \"../Pointer/PointerLibrary\";\n\nimport { RDFDocument } from \"../RDF/Document\";\nimport { RDFNode } from \"../RDF/Node\";\n\nimport { _isExistingValue } from \"../Utils\";\n\nimport { C } from \"../Vocabularies/C\";\nimport { XSD } from \"../Vocabularies/XSD\";\n\nimport { QueryablePointer } from \"./QueryablePointer\";\nimport { QueryableProperty } from \"./QueryableProperty\";\nimport { QueryableRootProperty } from \"./QueryableRootProperty\";\nimport { QueryContainer } from \"./QueryContainer\";\nimport { QueryProperty } from \"./QueryProperty\";\nimport { QueryPropertyType } from \"./QueryPropertyType\";\n\n\ninterface CompactionNode {\n\tisCompacted?:true;\n\tdocument:Document;\n\tnode:RDFNode;\n\tresource:QueryablePointer & { types?:string[] };\n}\n\n/**\n * Class for compacting a set of RDF resources by level of relations.\n */\nexport class QueryResultCompacter {\n\n\tprivate get jsonldConverter():JSONLDConverter {\n\t\treturn this.queryContainer.context.jsonldConverter;\n\t}\n\n\tprivate readonly registry:GeneralRegistry<Document>;\n\tprivate readonly queryContainer:QueryContainer;\n\n\n\tconstructor( registry:GeneralRegistry<Document>, queryContainer:QueryContainer ) {\n\t\tthis.registry = registry;\n\t\tthis.queryContainer = queryContainer;\n\t}\n\n\t/**\n\t * Returns the resources as documents converted from the JSON-LD data provided.\n\t * @param rdfDocuments All the RDF documents returned by the query.\n\t * @param targetDocuments The main resources that will be set as the roots of the compaction.\n\t */\n\tcompactDocuments<T extends object>( rdfDocuments:RDFDocument[], targetDocuments?:string[] ):(T & Document)[] {\n\t\tif( ! targetDocuments )\n\t\t\ttargetDocuments = rdfDocuments.map( x => x[ \"@id\" ] );\n\n\t\t// Map that stores all the resources provided to be compacted\n\t\tconst compactionMap:Map<string, CompactionNode> = new Map();\n\n\t\trdfDocuments.forEach( rdfDocument => {\n\t\t\tconst document:Document = this.registry.getPointer( rdfDocument[ \"@id\" ], true );\n\n\t\t\t// Temporally set as a partial document\n\t\t\tif( ! document.$_queryableMetadata ) {\n\t\t\t\tdocument.$_queryableMetadata = new QueryableRootProperty( {\n\t\t\t\t\turi: document.$id,\n\t\t\t\t\tpropertyType: QueryPropertyType.PARTIAL,\n\t\t\t\t} );\n\t\t\t}\n\n\n\t\t\t// Previous defined fragments\n\t\t\tconst previousFragments:Set<string> = new Set();\n\t\t\tdocument\n\t\t\t\t.$getPointers( true )\n\t\t\t\t.forEach( pointer => previousFragments.add( pointer.$id ) );\n\n\n\t\t\trdfDocument[ \"@graph\" ].forEach( rdfNode => {\n\t\t\t\tconst nodeID:string = rdfNode[ \"@id\" ];\n\n\t\t\t\t// Get fragment of the same document\n\t\t\t\tconst resource:QueryablePointer = nodeID !== rdfDocument[ \"@id\" ]\n\t\t\t\t\t? document.$getPointer( nodeID, true )\n\t\t\t\t\t: document;\n\n\t\t\t\tcompactionMap.set( nodeID, {\n\t\t\t\t\tnode: rdfNode,\n\t\t\t\t\tdocument: document,\n\t\t\t\t\tresource: resource,\n\t\t\t\t} );\n\n\t\t\t\t// Remove updated fragments\n\t\t\t\tpreviousFragments.delete( nodeID );\n\t\t\t} );\n\n\t\t\t// Delete not updated fragments\n\t\t\tpreviousFragments\n\t\t\t\t.forEach( pointer => document.$removePointer( pointer ) );\n\t\t} );\n\n\n\t\t// Compact starting form the target documents\n\t\ttargetDocuments.forEach( documentID => {\n\t\t\tconst compactionNode:CompactionNode | undefined = compactionMap.get( documentID );\n\t\t\tif( ! compactionNode ) throw new IllegalArgumentError( `Invalid data provided.` );\n\n\t\t\tconst queryProperty:QueryProperty = this.queryContainer._queryProperty;\n\t\t\tconst metadataProperty:QueryableProperty = compactionNode.resource.$_queryableMetadata!;\n\n\t\t\tthis.__processNode( compactionMap, compactionNode, queryProperty, metadataProperty );\n\t\t} );\n\n\t\tcompactionMap.forEach( ( { node, resource, document, isCompacted } ) => {\n\t\t\t// Compact missing resources\n\t\t\tif( ! isCompacted ) {\n\t\t\t\tconst targetNode:RDFNode = {\n\t\t\t\t\t...node,\n\t\t\t\t\t// Avoid compaction of c:document\n\t\t\t\t\t[ C.document ]: undefined,\n\t\t\t\t\t// Avoid compaction of c:checksum\n\t\t\t\t\t[ C.checksum ]: undefined,\n\t\t\t\t};\n\n\t\t\t\tconst targetSchema:DigestedObjectSchema = this.queryContainer.context.registry.getSchemaFor( targetNode );\n\t\t\t\tthis.jsonldConverter.update( resource, targetNode, targetSchema, document );\n\n\t\t\t\t// Remove possible metadata\n\t\t\t\tresource.$_queryableMetadata = void 0;\n\t\t\t}\n\n\t\t\t// Decorate models\n\t\t\tthis.registry.decorate( resource );\n\t\t} );\n\n\t\trdfDocuments\n\t\t\t.map( RDFNode.getID )\n\t\t\t.map( id => compactionMap.get( id ) )\n\t\t\t.filter( _isExistingValue )\n\t\t\t.forEach( ( { resource, node } ) => {\n\t\t\t\t// Sync documents (and its fragments)\n\t\t\t\tresource.$_syncSnapshot();\n\n\n\t\t\t\t// Extract checksum to eTag\n\n\t\t\t\tconst rawValues:RDFNode[ any ] | undefined = node[ C.checksum ];\n\t\t\t\tif( ! rawValues || typeof rawValues === \"string\" ) return;\n\n\t\t\t\tconst [ eTag ] = RDFNode.getPropertyLiterals( rawValues, XSD.string )!;\n\t\t\t\tif( ! eTag ) return;\n\n\t\t\t\tresource.$eTag = `\"${eTag}\"`;\n\t\t\t\tresource.$_resolved = true;\n\t\t\t} )\n\t\t;\n\n\t\treturn targetDocuments.map( id => {\n\t\t\treturn compactionMap\n\t\t\t\t.get( id )!\n\t\t\t\t.resource as T & Document;\n\t\t} );\n\t}\n\n\n\tprivate __processNode( compactionMap:Map<string, CompactionNode>, compactionNode:CompactionNode, queryProperty:QueryProperty, metadataProperty:QueryableProperty ):void {\n\t\tconst { node, document, resource } = compactionNode;\n\t\tcompactionNode.isCompacted = true;\n\n\t\tconst targetSchema:DigestedObjectSchema = queryProperty.getSchemaFor( node );\n\t\tconst pointerLibrary:PointerLibrary = __createPointerLibrary( compactionMap, document );\n\n\t\tconst targetNode:RDFNode = {\n\t\t\t...node,\n\t\t\t// Avoid compaction of c:document\n\t\t\t[ C.document ]: undefined,\n\t\t\t// Avoid compaction of c:checksum\n\t\t\t[ C.checksum ]: undefined,\n\t\t};\n\n\t\tthis.jsonldConverter\n\t\t\t.update( resource, targetNode, targetSchema, pointerLibrary, ! queryProperty._isComplete() );\n\n\t\tif( ! queryProperty._isPartial() ) {\n\t\t\tresource.$_queryableMetadata = void 0;\n\t\t\treturn;\n\t\t}\n\n\t\tqueryProperty.subProperties.forEach( ( subQueryProperty, propertyName ) => {\n\t\t\t// Is virtual property, set to non-enumerable\n\t\t\tif( resource.hasOwnProperty( propertyName ) && subQueryProperty.pathBuilderFn ) {\n\t\t\t\tObject.defineProperty( resource, propertyName, {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tconst subMetadataProperty:QueryableProperty = metadataProperty\n\t\t\t\t.getProperty( propertyName, subQueryProperty );\n\n\t\t\tif( ! resource.hasOwnProperty( propertyName ) ) return;\n\t\t\tif( subQueryProperty.propertyType === void 0 ) return;\n\n\t\t\tconst values:any[] = Array.isArray( resource[ propertyName ] )\n\t\t\t\t? resource[ propertyName ]\n\t\t\t\t: [ resource[ propertyName ] ];\n\n\t\t\tvalues.forEach( value => {\n\t\t\t\tif( ! Pointer.is( value ) ) return;\n\n\t\t\t\tconst subCompactionNode:CompactionNode | undefined = compactionMap.get( value.$id );\n\t\t\t\tif( ! subCompactionNode ) throw new IllegalArgumentError( `Invalid data provided.` );\n\n\n\t\t\t\tif( subCompactionNode.resource.$_queryableMetadata ) {\n\t\t\t\t\t// Merge possible new data\n\t\t\t\t\tsubCompactionNode.resource.$_queryableMetadata\n\t\t\t\t\t\t.mergeData( propertyName, subMetadataProperty );\n\n\t\t\t\t\tif( subCompactionNode.document === document && ! subCompactionNode.isCompacted ) {\n\t\t\t\t\t\t// May be floating, so add to parent\n\t\t\t\t\t\tmetadataProperty\n\t\t\t\t\t\t\t.setProperty( propertyName, subCompactionNode.resource.$_queryableMetadata );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Clear type since in sub-document\n\t\t\t\t\t\tsubMetadataProperty.propertyType = void 0;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif( subCompactionNode.document === document ) {\n\t\t\t\t\t\t// Add the created metadata\n\t\t\t\t\t\tsubCompactionNode.resource.$_queryableMetadata = subMetadataProperty;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Add a floating metadata\n\t\t\t\t\t\tsubCompactionNode.resource.$_queryableMetadata = new QueryableProperty( {\n\t\t\t\t\t\t\tpropertyType: subMetadataProperty.propertyType,\n\t\t\t\t\t\t\toptional: subMetadataProperty.optional,\n\t\t\t\t\t\t\tdefinition: Object.assign( new DigestedObjectSchemaProperty(), subMetadataProperty.definition, {\n\t\t\t\t\t\t\t\turi: null,\n\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t// Clear type since in sub-document\n\t\t\t\t\t\tsubMetadataProperty.propertyType = void 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Process sub-node\n\t\t\t\tthis.__processNode( compactionMap, subCompactionNode, subQueryProperty, subCompactionNode.resource.$_queryableMetadata! );\n\t\t\t} );\n\n\t\t} );\n\t}\n\n}\n\nfunction __createPointerLibrary( compactionMap:Map<string, CompactionNode>, document:Document ):PointerLibrary {\n\treturn {\n\t\thasPointer( id:string ):boolean {\n\t\t\tif( compactionMap.has( id ) ) return true;\n\t\t\treturn document.$hasPointer( id );\n\t\t},\n\n\t\tgetPointer( id:string ):Pointer {\n\t\t\tif( compactionMap.has( id ) )\n\t\t\t\treturn compactionMap\n\t\t\t\t\t.get( id )!\n\t\t\t\t\t.resource;\n\n\t\t\treturn document\n\t\t\t\t.$getPointer( id );\n\t\t},\n\t};\n}\n"],"sourceRoot":"../../src"}