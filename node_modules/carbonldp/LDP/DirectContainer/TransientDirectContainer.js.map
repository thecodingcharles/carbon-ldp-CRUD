{"version":3,"sources":["LDP/DirectContainer/TransientDirectContainer.ts"],"names":[],"mappings":";;AAAA,sEAAqE;AAErE,0EAAyE;AAMzE,8CAA6C;AAqChC,QAAA,wBAAwB,GAAmC;IACvE,IAAI,EAAE,SAAG,CAAC,eAAe;IAEzB,EAAE,EAAF,UAAI,KAAS;QACZ,OAAO,qCAAiB,CAAC,EAAE,CAAE,KAAK,CAAE;eAChC,KAAK,CAAC,QAAQ,CAAE,gCAAwB,CAAC,IAAI,CAAE;eAC/C,KAAK,CAAC,cAAc,CAAE,mBAAmB,CAAE,CAC7C;IACH,CAAC;IAED,MAAM,EAAN,UAA0B,IAA4B;QACrD,IAAM,IAAI,GAA2B,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC/D,OAAO,gCAAwB,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IACpD,CAAC;IAED,UAAU,EAAV,UAA8B,MAA8B;QAC3D,IAAI,gCAAwB,CAAC,EAAE,CAAE,MAAM,CAAE;YAAG,MAAM,IAAI,2CAAoB,CAAE,+CAA+C,CAAE,CAAC;QAE9H,IAAI,CAAE,MAAM,CAAC,iBAAiB;YAAG,MAAM,IAAI,2CAAoB,CAAE,6CAA6C,CAAE,CAAC;QAEjH,IAAM,SAAS,GAAgC,qCAAiB,CAAC,EAAE,CAAE,MAAM,CAAE,CAAC,CAAC;YAC9E,MAAM,CAAC,CAAC,CAAC,qCAAiB,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAEjD,SAAS,CAAC,QAAQ,CAAE,gCAAwB,CAAC,IAAI,CAAE,CAAC;QAGpD,OAAO,SAAS,CAAC;IAClB,CAAC;CACD,CAAC","file":"TransientDirectContainer.js","sourcesContent":["import { TransientDocument } from \"../../Document/TransientDocument\";\n\nimport { IllegalArgumentError } from \"../../Errors/IllegalArgumentError\";\n\nimport { ModelFactory } from \"../../Model/ModelFactory\";\n\nimport { Pointer } from \"../../Pointer/Pointer\";\n\nimport { LDP } from \"../../Vocabularies/LDP\";\n\nimport { BaseDirectContainer } from \"./BaseDirectContainer\";\n\n/**\n * The in-memory model that represents a `ldp:DirectContainer`.\n */\nexport interface TransientDirectContainer extends TransientDocument {\n\t/**\n\t * The resource the direct container belongs to.\n\t */\n\tmembershipResource?:Pointer;\n\t/**\n\t * The relation the direct container will manage.\n\t */\n\thasMemberRelation:Pointer;\n}\n\n\n/**\n * Factory, decorator and utils for {@link TransientDirectContainer}.\n */\n// TODO: Change to type-alias\nexport interface TransientDirectContainerFactory extends ModelFactory<TransientDirectContainer> {\n\tTYPE:LDP[ \"DirectContainer\" ];\n\n\tis( value:any ):value is TransientDirectContainer;\n\n\n\tcreate<T extends object>( data:T & BaseDirectContainer ):T & TransientDirectContainer;\n\n\tcreateFrom<T extends object>( object:T & BaseDirectContainer ):T & TransientDirectContainer;\n}\n\n/**\n * Constant that implements {@link TransientDirectContainerFactory}.\n */\nexport const TransientDirectContainer:TransientDirectContainerFactory = {\n\tTYPE: LDP.DirectContainer,\n\n\tis( value:any ):value is TransientDirectContainer {\n\t\treturn TransientDocument.is( value )\n\t\t\t&& value.$hasType( TransientDirectContainer.TYPE )\n\t\t\t&& value.hasOwnProperty( \"hasMemberRelation\" )\n\t\t\t;\n\t},\n\n\tcreate<T extends object>( data:T & BaseDirectContainer ):T & TransientDirectContainer {\n\t\tconst copy:T & BaseDirectContainer = Object.assign( {}, data );\n\t\treturn TransientDirectContainer.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseDirectContainer ):T & TransientDirectContainer {\n\t\tif( TransientDirectContainer.is( object ) ) throw new IllegalArgumentError( \"The base object is already a DirectContainer.\" );\n\n\t\tif( ! object.hasMemberRelation ) throw new IllegalArgumentError( \"The property hasMemberRelation is required.\" );\n\n\t\tconst container:T & TransientDirectContainer = TransientDocument.is( object ) ?\n\t\t\tobject : TransientDocument.createFrom( object );\n\n\t\tcontainer.$addType( TransientDirectContainer.TYPE );\n\t\t// TODO: Handle properties correctly and validate them (hasMemberRelation, isMemberOfRelation)\n\n\t\treturn container;\n\t},\n};\n\n"],"sourceRoot":"../../../src"}