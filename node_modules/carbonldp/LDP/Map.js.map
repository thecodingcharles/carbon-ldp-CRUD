{"version":3,"sources":["LDP/Map.ts"],"names":[],"mappings":";;AAIA,iDAAgD;AAEhD,uCAAsC;AA4BtC,IAAM,MAAM,GAAgB;IAC3B,SAAS,EAAE;QACV,KAAK,EAAE,KAAC,CAAC,KAAK;QACd,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;CACD,CAAC;AAKW,QAAA,GAAG,GAAc;IAC7B,IAAI,EAAE,KAAC,CAAC,GAAG;IACX,MAAM,QAAA;IAEN,EAAE,EAAF,UAAI,MAAa;QAChB,OAAO,mBAAQ,CAAC,EAAE,CAAE,MAAM,CAAE;eACxB,MAAM,CAAC,QAAQ,CAAE,WAAG,CAAC,IAAI,CAAE;eAC3B,MAAM,CAAC,cAAc,CAAE,SAAS,CAAE,CAAC;IACxC,CAAC;CAED,CAAC","file":"Map.js","sourcesContent":["import { ModelSchema } from \"../Model/ModelSchema\";\n\nimport { ObjectSchema } from \"../ObjectSchema/ObjectSchema\";\n\nimport { Resource } from \"../Resource/Resource\";\n\nimport { C } from \"../Vocabularies/C\";\n\nimport { MapEntry } from \"./MapEntry\";\n\n\n/**\n * Model that represents a `c:Map`.\n * This model contains a set of entries in a form of a key/value pair.\n */\nexport interface Map<K, V> extends Resource {\n\t/**\n\t * Array of the entries's pairs.\n\t */\n\tentries:MapEntry<K, V>[];\n}\n\n\n/**\n * Factory, decorator and utils for {@link Map}.\n */\n// TODO: Change to type-alias\nexport interface MapFactory extends ModelSchema {\n\tTYPE:C[ \"Map\" ];\n\tSCHEMA:ObjectSchema;\n\n\tis( object:object ):object is Map<any, any>;\n}\n\nconst SCHEMA:ObjectSchema = {\n\t\"entries\": {\n\t\t\"@id\": C.entry,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n};\n\n/**\n * Constant that implements {@link MapFactory}.\n */\nexport const Map:MapFactory = {\n\tTYPE: C.Map,\n\tSCHEMA,\n\n\tis( object:object ):object is Map<any, any> {\n\t\treturn Resource.is( object )\n\t\t\t&& object.$hasType( Map.TYPE )\n\t\t\t&& object.hasOwnProperty( \"entries\" );\n\t},\n\n};\n"],"sourceRoot":"../../src"}