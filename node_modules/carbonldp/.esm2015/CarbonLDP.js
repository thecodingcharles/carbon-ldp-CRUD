import { hasProtocol } from "sparqler/iri";
import { AccessPoint } from "./AccessPoint/AccessPoint";
import { TransientAccessPoint } from "./AccessPoint/TransientAccessPoint";
import { AbstractContext } from "./Context/AbstractContext";
import { DocumentsContext } from "./Context/DocumentsContext";
import { GlobalContext } from "./Context/GlobalContext";
import { Document } from "./Document/Document";
import * as Errors from "./Errors";
import { IllegalArgumentError } from "./Errors/IllegalArgumentError";
import { Fragment } from "./Fragment/Fragment";
import { TransientFragment } from "./Fragment/TransientFragment";
import { FreeResources } from "./FreeResources/FreeResources";
import * as HTTP from "./HTTP";
import * as JSONLD from "./JSONLD";
import * as LDP from "./LDP";
import * as LDPatch from "./LDPatch";
import * as Messaging from "./Messaging";
import { ContainerType } from "./ObjectSchema/ContainerType";
import { DigestedObjectSchema } from "./ObjectSchema/DigestedObjectSchema";
import { DigestedObjectSchemaProperty } from "./ObjectSchema/DigestedObjectSchemaProperty";
import { ObjectSchemaDigester } from "./ObjectSchema/ObjectSchemaDigester";
import { ObjectSchemaUtils } from "./ObjectSchema/ObjectSchemaUtils";
import { PointerType } from "./ObjectSchema/PointerType";
import { Pointer } from "./Pointer/Pointer";
import * as RDF from "./RDF";
import { Resource } from "./Resource/Resource";
import * as SHACL from "./SHACL";
import * as SPARQL from "./SPARQL";
import * as System from "./System";
import * as Utils from "./Utils";
import * as Vocabularies from "./Vocabularies";
export class CarbonLDP extends DocumentsContext {
    constructor(urlOrSettings) {
        super(__getURLFrom(urlOrSettings));
        this._settings = {
            vocabulary: "vocabularies/main/#",
            paths: {
                system: {
                    slug: ".system/",
                    paths: {
                        platform: "platform/",
                        credentials: "credentials/",
                        roles: "roles/",
                    },
                },
                users: {
                    slug: "users/",
                    paths: {
                        me: "me/",
                    },
                },
            },
        };
        this._extendsSettings(__getSettingsFrom(urlOrSettings));
        this.documents = this.registry.getPointer(this._baseURI, true);
    }
    static get version() { return "5.2.0"; }
    get version() { return CarbonLDP.version; }
    getPlatformMetadata() {
        return Utils.promiseMethod(() => {
            const uri = this._resolvePath("system.platform");
            return this.documents.$get(uri);
        });
    }
}
CarbonLDP.AbstractContext = AbstractContext;
CarbonLDP.AccessPoint = AccessPoint;
CarbonLDP.TransientAccessPoint = TransientAccessPoint;
CarbonLDP.Errors = Errors;
CarbonLDP.FreeResources = FreeResources;
CarbonLDP.HTTP = HTTP;
CarbonLDP.JSONLD = JSONLD;
CarbonLDP.LDP = LDP;
CarbonLDP.LDPatch = LDPatch;
CarbonLDP.Messaging = Messaging;
CarbonLDP.Vocabularies = Vocabularies;
CarbonLDP.ObjectSchemaUtils = ObjectSchemaUtils;
CarbonLDP.ObjectSchemaDigester = ObjectSchemaDigester;
CarbonLDP.DigestedObjectSchemaProperty = DigestedObjectSchemaProperty;
CarbonLDP.PointerType = PointerType;
CarbonLDP.ContainerType = ContainerType;
CarbonLDP.DigestedObjectSchema = DigestedObjectSchema;
CarbonLDP.Document = Document;
CarbonLDP.Fragment = Fragment;
CarbonLDP.TransientFragment = TransientFragment;
CarbonLDP.Pointer = Pointer;
CarbonLDP.RDF = RDF;
CarbonLDP.Resource = Resource;
CarbonLDP.GlobalContext = GlobalContext;
CarbonLDP.SHACL = SHACL;
CarbonLDP.SPARQL = SPARQL;
CarbonLDP.System = System;
CarbonLDP.Utils = Utils;
function __getURLFrom(urlOrSettings) {
    return Utils.isString(urlOrSettings) ?
        __getURLFromString(urlOrSettings) :
        __getURLFromSettings(urlOrSettings);
}
function __getURLFromString(url) {
    if (!RDF.URI.hasProtocol(url))
        throw new IllegalArgumentError(`The URL must contain a valid protocol: "http://", "https://".`);
    if (url.endsWith("/"))
        return url;
    return url + "/";
}
function __getURLFromSettings(settings) {
    if (!Utils.isString(settings.host))
        throw new IllegalArgumentError(`The settings object must contains a valid host string.`);
    if (hasProtocol(settings.host))
        throw new IllegalArgumentError(`The host must not contain a protocol.`);
    if (settings.host.includes(":"))
        throw new IllegalArgumentError(`The host must not contain a port.`);
    const protocol = settings.ssl === false ? "http://" : "https://";
    const host = settings.host.endsWith("/") ? settings.host.slice(0, -1) : settings.host;
    const url = `${protocol}${host}/`;
    if (!Utils.isNumber(settings.port))
        return url;
    return url.slice(0, -1) + `:${settings.port}/`;
}
function __getSettingsFrom(urlOrSettings) {
    if (Utils.isString(urlOrSettings))
        return {};
    return Object.assign({}, urlOrSettings, { ssl: null, host: null, port: null });
}

//# sourceMappingURL=CarbonLDP.js.map
