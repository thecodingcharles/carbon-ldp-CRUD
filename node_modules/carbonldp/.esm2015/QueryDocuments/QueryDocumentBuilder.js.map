{"version":3,"sources":["QueryDocuments/QueryDocumentBuilder.ts"],"names":[],"mappings":"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","file":"QueryDocumentBuilder.js","sourcesContent":["import { IRIToken, LiteralToken, TermToken, VariableToken } from \"sparqler/tokens\";\n\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\nimport { IllegalStateError } from \"../Errors/IllegalStateError\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\nimport { isObject } from \"../Utils\";\n\nimport { QueryContainer } from \"./QueryContainer\";\nimport { QueryObject } from \"./QueryObject\";\nimport { QueryProperty } from \"./QueryProperty\";\nimport { QueryPropertyType } from \"./QueryPropertyType\";\nimport { QuerySchema } from \"./QuerySchema\";\nimport { QuerySchemaProperty } from \"./QuerySchemaProperty\";\nimport { QueryValue } from \"./QueryValue\";\n\n\n/**\n * Class with the helpers and properties for construct a query document.\n */\nexport class QueryDocumentBuilder {\n\tstatic readonly ALL:Readonly<{}> = Object.freeze( {} );\n\tstatic readonly FULL:Readonly<{}> = Object.freeze( {} );\n\tstatic readonly INHERIT:Readonly<{}> = Object.freeze( {} );\n\n\t/**\n\t * Property to make a descriptive inheritance of a query property definition.\n\t */\n\treadonly inherit:Readonly<{}> = QueryDocumentBuilder.INHERIT;\n\t/**\n\t * Property to describe the fetching of the entire resource properties.\n\t */\n\treadonly all:Readonly<{}> = QueryDocumentBuilder.ALL;\n\n\treadonly _queryContainer:QueryContainer;\n\treadonly _queryProperty:QueryProperty;\n\n\n\tconstructor( queryContainer:QueryContainer, queryProperty:QueryProperty ) {\n\t\tthis._queryContainer = queryContainer;\n\t\tthis._queryProperty = queryProperty;\n\t}\n\n\n\t/**\n\t * Returns the property identifier specified by the name provided.\n\t *\n\t * If no name is provided, the resource where the query belongs to is returned.\n\t * In case the the main query, it will be the target document(s).\n\t *\n\t * @param name Optional ame of the property to to look for.\n\t */\n\tproperty( name?:string ):VariableToken | IRIToken | LiteralToken {\n\t\tlet parent:QueryProperty | undefined = this._queryProperty;\n\t\twhile( parent ) {\n\t\t\tconst property:QueryProperty | undefined = parent.getProperty( name, { create: true } );\n\t\t\tif( property ) return property.identifier;\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\tthrow new IllegalArgumentError( `The property \"${name}\" was not declared.` );\n\t}\n\n\t/**\n\t * Wraps a basic value to be used correctly in the query filters and values.\n\t * @param value Value to be converted in a safe to use in query object.\n\t */\n\tvalue( value:string | number | boolean | Date ):QueryValue {\n\t\treturn new QueryValue( this._queryContainer, value );\n\t}\n\n\t/**\n\t * Wraps a pointer or URi to be used correctly in the query filters and values.\n\t * @param object Pointer or URI to be converted in a safe to use in query object.\n\t */\n\tobject( object:Pointer | string ):QueryObject {\n\t\tconst id:string = Pointer.getID( object );\n\t\treturn new QueryObject( this._queryContainer, id );\n\t}\n\n\n\t/**\n\t * Specified a type the target resource has,\n\t * and also uses its schema (if exits) from where to inherit the properties definition of the query.\n\t * @param type The type of the target and schema.\n\t */\n\twithType( type:string ):this {\n\t\tif( this._queryProperty.hasProperties() )\n\t\t\tthrow new IllegalStateError( \"Types must be specified before the properties.\" );\n\n\t\tthis._queryProperty.addType( type );\n\t\treturn this;\n\t}\n\n\t/**\n\t * Method that allows to specify the property to be retrieved the the target document.\n\t * @param propertiesSchema Similar as a schema object, but this specifies the properties to be retrieved.\n\t */\n\tproperties( propertiesSchema:QuerySchema ):this {\n\t\tif( propertiesSchema === QueryDocumentBuilder.ALL ) {\n\t\t\tthis._queryProperty.setType( QueryPropertyType.ALL );\n\t\t\treturn this;\n\t\t}\n\n\t\tif( propertiesSchema === QueryDocumentBuilder.FULL ) {\n\t\t\tthis._queryProperty.setType( QueryPropertyType.FULL );\n\t\t\treturn this;\n\t\t}\n\n\t\t// If no special schema, then the property must be a partial\n\t\tthis._queryProperty.setType( QueryPropertyType.PARTIAL );\n\n\t\tfor( const propertyName in propertiesSchema ) {\n\t\t\tconst queryPropertySchema:QuerySchemaProperty | string = propertiesSchema[ propertyName ];\n\t\t\tconst querySchemaProperty:QuerySchemaProperty = isObject( queryPropertySchema )\n\t\t\t\t? queryPropertySchema : { \"@id\": queryPropertySchema };\n\n\t\t\tconst property:QueryProperty = this._queryProperty\n\t\t\t\t.addProperty( propertyName, querySchemaProperty );\n\n\t\t\tconst subQuery:QuerySchemaProperty[ \"query\" ] | undefined = querySchemaProperty.query;\n\t\t\tif( ! subQuery ) continue;\n\n\t\t\tconst builder:SubQueryDocumentsBuilder = new SubQueryDocumentsBuilder( this._queryContainer, property );\n\t\t\tif( builder !== subQuery.call( void 0, builder ) )\n\t\t\t\tthrow new IllegalArgumentError( \"The provided query builder was not returned\" );\n\t\t}\n\n\t\treturn this;\n\t}\n\n}\n\n\n/**\n * Class with the helpers and properties for construct a query document.\n */\nexport class SubQueryDocumentsBuilder extends QueryDocumentBuilder {\n\n\t/**\n\t * Adds an filter that affects all the query, not only possible indicated properties values.\n\t * @param constraint RAW constrain of the filter to make.\n\t */\n\tfilter( constraint:string ):this {\n\t\tthis._queryProperty\n\t\t\t.addFilter( constraint );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a filter to the specific values of the property where the query is been applied.\n\t * NOTE: Using this function makes all the properties in the path of the one's applied, will be obligatory to exists.\n\t * @param values Values the property must have so that the document would be returned.\n\t */\n\tvalues( ...values:(QueryValue | QueryObject)[] ):this {\n\t\tconst tokens:(LiteralToken | IRIToken)[] = values\n\t\t\t.map( value => {\n\t\t\t\tconst token:TermToken = value.getToken();\n\t\t\t\tif( token.token === \"blankNode\" ) throw new IllegalArgumentError( `Cannot assign blank nodes (\"${token.label}\").` );\n\n\t\t\t\tif( this._queryProperty.definition.literal ) {\n\t\t\t\t\tif( token.token !== \"literal\" )\n\t\t\t\t\t\tthrow new IllegalArgumentError( `\"${token}\" is not a literal value.` );\n\t\t\t\t}\n\n\t\t\t\tif( this._queryProperty.definition.pointerType !== null ) {\n\t\t\t\t\tif( token.token === \"literal\" )\n\t\t\t\t\t\tthrow new IllegalArgumentError( `\"${token}\" is not a resource value.` );\n\t\t\t\t}\n\n\t\t\t\treturn token;\n\t\t\t} );\n\n\t\tthis._queryProperty.addValues( tokens );\n\t\tthis._queryProperty.setObligatory( { inheritParents: true } );\n\n\t\treturn this;\n\t}\n\n}\n"],"sourceRoot":"../../src"}