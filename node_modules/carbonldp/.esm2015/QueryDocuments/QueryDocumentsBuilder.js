import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { SubQueryDocumentsBuilder } from "./QueryDocumentBuilder";
export class QueryDocumentsBuilder extends SubQueryDocumentsBuilder {
    constructor(queryContainer, queryProperty) {
        super(queryContainer, queryProperty);
    }
    orderBy(property, flow) {
        this._queryProperty.setOrder({
            path: property,
            flow: parseFlowString(flow),
        });
        return this;
    }
    limit(limit) {
        this._queryProperty.setLimit(limit);
        return this;
    }
    offset(offset) {
        this._queryProperty.setOffset(offset);
        return this;
    }
}
function parseFlowString(flow) {
    if (flow === void 0)
        return;
    const upperCase = flow
        .toUpperCase();
    switch (upperCase) {
        case "ASC":
        case "DESC":
            return upperCase;
        case "ASCENDING":
        case "DESCENDING":
            return upperCase
                .slice(0, -6);
        default:
            throw new IllegalArgumentError("Invalid flow order.");
    }
}

//# sourceMappingURL=QueryDocumentsBuilder.js.map
