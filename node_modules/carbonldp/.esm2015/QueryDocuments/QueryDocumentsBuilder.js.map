{"version":3,"sources":["QueryDocuments/QueryDocumentsBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AAGtE,OAAO,EAAE,wBAAwB,EAAE,MAAM,wBAAwB,CAAC;AAOlE,MAAM,OAAO,qBAAsB,SAAQ,wBAAwB;IAGlE,YAAa,cAA6B,EAAE,aAAoC;QAC/E,KAAK,CAAE,cAAc,EAAE,aAAa,CAAE,CAAC;IACxC,CAAC;IASD,OAAO,CAAE,QAAe,EAAE,IAAiD;QAC1E,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAE;YAC7B,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,eAAe,CAAE,IAAI,CAAE;SAC7B,CAAE,CAAC;QAEJ,OAAO,IAAI,CAAC;IACb,CAAC;IAMD,KAAK,CAAE,KAAY;QAClB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;QAEtC,OAAO,IAAI,CAAC;IACb,CAAC;IAMD,MAAM,CAAE,MAAa;QACpB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAE,MAAM,CAAE,CAAC;QAExC,OAAO,IAAI,CAAC;IACb,CAAC;CAED;AAGD,SAAS,eAAe,CAAE,IAAiD;IAC1E,IAAI,IAAI,KAAK,KAAK,CAAC;QAAG,OAAO;IAE7B,MAAM,SAAS,GAA+C,IAAI;SAChE,WAAW,EAAS,CAAC;IAEvB,QAAQ,SAAS,EAAG;QACnB,KAAK,KAAK,CAAC;QACX,KAAK,MAAM;YACV,OAAO,SAAS,CAAC;QAElB,KAAK,WAAW,CAAC;QACjB,KAAK,YAAY;YAChB,OAAO,SAAS;iBACd,KAAK,CAAE,CAAC,EAAE,CAAE,CAAC,CAAoB,CAAC;QAErC;YACC,MAAM,IAAI,oBAAoB,CAAE,qBAAqB,CAAE,CAAC;KACzD;AACF,CAAC","file":"QueryDocumentsBuilder.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { QueryContainerProperty } from \"./QueryContainerProperty\";\nimport { SubQueryDocumentsBuilder } from \"./QueryDocumentBuilder\";\nimport { QueryContainer } from \"./QueryContainer\";\n\n\n/**\n * Class with the helpers and properties for construct a query for children or members.\n */\nexport class QueryDocumentsBuilder extends SubQueryDocumentsBuilder {\n\treadonly _queryProperty!:QueryContainerProperty;\n\n\tconstructor( queryContainer:QueryContainer, queryProperty:QueryContainerProperty ) {\n\t\tsuper( queryContainer, queryProperty );\n\t}\n\n\n\t/**\n\t * Makes the target documents of the query to return ordered by the property specified.\n\t * If no order flow is specified, the default behaviour of SPARQL ordering is used (ascending).\n\t * @param property The property name from which the results will be ordered.\n\t * @param flow The specific order flow of the query.\n\t */\n\torderBy( property:string, flow?:\"ASC\" | \"DESC\" | \"ascending\" | \"descending\" ):this {\n\t\tthis._queryProperty.setOrder( {\n\t\t\tpath: property,\n\t\t\tflow: parseFlowString( flow ),\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Limit the target results to be returned by the number specified.\n\t * @param limit The maximum number of targeted results.\n\t */\n\tlimit( limit:number ):this {\n\t\tthis._queryProperty.setLimit( limit );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set an offset in the target results to be returned.\n\t * @param offset The offset number to be applied to the targeted results.\n\t */\n\toffset( offset:number ):this {\n\t\tthis._queryProperty.setOffset( offset );\n\n\t\treturn this;\n\t}\n\n}\n\n\nfunction parseFlowString( flow?:\"ASC\" | \"DESC\" | \"ascending\" | \"descending\" ):\"ASC\" | \"DESC\" | undefined {\n\tif( flow === void 0 ) return;\n\n\tconst upperCase:\"ASC\" | \"DESC\" | \"ASCENDING\" | \"DESCENDING\" = flow\n\t\t.toUpperCase() as any;\n\n\tswitch( upperCase ) {\n\t\tcase \"ASC\":\n\t\tcase \"DESC\":\n\t\t\treturn upperCase;\n\n\t\tcase \"ASCENDING\":\n\t\tcase \"DESCENDING\":\n\t\t\treturn upperCase\n\t\t\t\t.slice( 0, - 6 ) as \"ASC\" | \"DESC\";\n\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentError( \"Invalid flow order.\" );\n\t}\n}\n"],"sourceRoot":"../../src"}