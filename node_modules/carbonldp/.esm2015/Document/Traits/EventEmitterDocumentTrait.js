import { Event } from "../../Messaging/Event";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { URI } from "../../RDF/URI";
import { ResolvablePointer } from "../../Repository/ResolvablePointer";
import { isFunction, isObject, isString } from "../../Utils";
import { TransientDocument } from "../TransientDocument";
function __parseParams(resource, uriPatternOROnEvent, onEventOrOnError, onError) {
    const uriPattern = isString(uriPatternOROnEvent) ?
        URI.resolve(resource.$id, uriPatternOROnEvent) : resource.$id;
    const onEvent = isFunction(uriPatternOROnEvent) ?
        uriPatternOROnEvent : onEventOrOnError;
    if (onEvent !== onEventOrOnError)
        onError = onEventOrOnError;
    return { uriPattern, onEvent, onError };
}
export const EventEmitterDocumentTrait = {
    PROTOTYPE: {
        $on(event, uriPatternOROnEvent, onEventOrOnError, onError) {
            const { uriPattern, onEvent, onError: $onError } = __parseParams(this, uriPatternOROnEvent, onEventOrOnError, onError);
            return this.$repository.on(event, uriPattern, onEvent, $onError);
        },
        $off(event, uriPatternOROnEvent, onEventOrOnError, onError) {
            const { uriPattern, onEvent, onError: $onError } = __parseParams(this, uriPatternOROnEvent, onEventOrOnError, onError);
            return this.$repository.off(event, uriPattern, onEvent, $onError);
        },
        $one(event, uriPatternOROnEvent, onEventOrOnError, onError) {
            const { uriPattern, onEvent, onError: $onError } = __parseParams(this, uriPatternOROnEvent, onEventOrOnError, onError);
            return this.$repository.one(event, uriPattern, onEvent, $onError);
        },
        $onChildCreated(uriPatternOROnEvent, onEventOrOnError, onError) {
            return this.$on(Event.CHILD_CREATED, uriPatternOROnEvent, onEventOrOnError, onError);
        },
        $onDocumentModified(uriPatternOROnEvent, onEventOrOnError, onError) {
            return this.$on(Event.DOCUMENT_MODIFIED, uriPatternOROnEvent, onEventOrOnError, onError);
        },
        $onDocumentDeleted(uriPatternOROnEvent, onEventOrOnError, onError) {
            return this.$on(Event.DOCUMENT_DELETED, uriPatternOROnEvent, onEventOrOnError, onError);
        },
        $onMemberAdded(uriPatternOROnEvent, onEventOrOnError, onError) {
            return this.$on(Event.MEMBER_ADDED, uriPatternOROnEvent, onEventOrOnError, onError);
        },
        $onMemberRemoved(uriPatternOROnEvent, onEventOrOnError, onError) {
            return this.$on(Event.MEMBER_REMOVED, uriPatternOROnEvent, onEventOrOnError, onError);
        },
    },
    isDecorated(object) {
        return isObject(object)
            && ModelDecorator
                .hasPropertiesFrom(EventEmitterDocumentTrait.PROTOTYPE, object);
    },
    decorate(object) {
        if (EventEmitterDocumentTrait.isDecorated(object))
            return object;
        const resource = ModelDecorator
            .decorateMultiple(object, TransientDocument, ResolvablePointer);
        return ModelDecorator
            .definePropertiesFrom(EventEmitterDocumentTrait.PROTOTYPE, resource);
    },
};

//# sourceMappingURL=EventEmitterDocumentTrait.js.map
