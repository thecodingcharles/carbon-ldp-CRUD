import { _parseURIParams } from "../../DocumentsRepository/Utils";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { Pointer } from "../../Pointer/Pointer";
import { URI } from "../../RDF/URI";
import { ResolvablePointer } from "../../Repository/ResolvablePointer";
import { isObject, isString } from "../../Utils";
import { TransientDocument } from "../TransientDocument";
function __parseMemberParams(resource, args) {
    const params = Array.from(args);
    const uri = isString(params[0]) && isString(Pointer.getID(params[1])) ?
        URI.resolve(resource.$id, params.shift()) : resource.$id;
    return { uri, params };
}
export const LDPDocumentTrait = {
    PROTOTYPE: {
        $create(uriOrChildren, childrenOrSlugsOrRequestOptions, slugsOrRequestOptions, requestOptions) {
            const { _uri, _args } = _parseURIParams(this, uriOrChildren, arguments);
            return this.$repository.create(_uri, ..._args);
        },
        $createAndRetrieve(uriOrChildren, childrenOrSlugsOrRequestOptions, slugsOrRequestOptions, requestOptions = {}) {
            const { _uri, _args } = _parseURIParams(this, uriOrChildren, arguments);
            return this.$repository.createAndRetrieve(_uri, ..._args);
        },
        $addMember(uriOrMember, memberOrOptions, requestOptions) {
            const { uri, params } = __parseMemberParams(this, arguments);
            return this.$repository.addMember(uri, ...params);
        },
        $addMembers(uriOrMembers, membersOrOptions, requestOptions) {
            const { _uri, _args } = _parseURIParams(this, uriOrMembers, arguments);
            return this.$repository.addMembers(_uri, ..._args);
        },
        $removeMember(uriOrMember, memberOrOptions, requestOptions) {
            const { uri, params } = __parseMemberParams(this, arguments);
            return this.$repository.removeMember(uri, ...params);
        },
        $removeMembers(uriOrMembersOrOptions, membersOrOptions, requestOptions) {
            const { _uri, _args } = _parseURIParams(this, uriOrMembersOrOptions, arguments);
            return this.$repository.removeMembers(_uri, ..._args);
        },
    },
    isDecorated(object) {
        return isObject(object)
            && ModelDecorator
                .hasPropertiesFrom(LDPDocumentTrait.PROTOTYPE, object);
    },
    decorate(object) {
        if (LDPDocumentTrait.isDecorated(object))
            return object;
        const target = ModelDecorator
            .decorateMultiple(object, TransientDocument, ResolvablePointer);
        return ModelDecorator
            .definePropertiesFrom(LDPDocumentTrait.PROTOTYPE, target);
    },
};

//# sourceMappingURL=LDPDocumentTrait.js.map
