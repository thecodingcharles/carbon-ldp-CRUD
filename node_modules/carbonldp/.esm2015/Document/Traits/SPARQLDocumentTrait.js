import { ModelDecorator } from "../../Model/ModelDecorator";
import { URI } from "../../RDF/URI";
import { ResolvablePointer } from "../../Repository/ResolvablePointer";
import { isObject } from "../../Utils";
import { TransientDocument } from "../TransientDocument";
function __parseParams(resource, uriOrQuery, queryOrOptions, options) {
    let uri = resource.$id;
    let query = uriOrQuery;
    if (isObject(queryOrOptions)) {
        options = queryOrOptions;
    }
    else if (queryOrOptions !== void 0) {
        query = queryOrOptions;
        uri = URI.resolve(resource.$id, uriOrQuery);
    }
    return { uri, query, options };
}
export const SPARQLDocumentTrait = {
    PROTOTYPE: {
        $executeASKQuery(uriOrQuery, queryOrOptions, requestOptions) {
            const { uri, query, options } = __parseParams(this, uriOrQuery, queryOrOptions, requestOptions);
            return this.$repository.executeASKQuery(uri, query, options);
        },
        $executeSELECTQuery(uriOrQuery, queryOrOptions, requestOptions) {
            const { uri, query, options } = __parseParams(this, uriOrQuery, queryOrOptions, requestOptions);
            return this.$repository.executeSELECTQuery(uri, query, options);
        },
        $executeUPDATE(uriOrQuery, updateOrOptions, requestOptions) {
            const { uri, query, options } = __parseParams(this, uriOrQuery, updateOrOptions, requestOptions);
            return this.$repository.executeUPDATE(uri, query, options);
        },
        $sparql(uri) {
            const $uri = uri ? URI.resolve(this.$id, uri) : this.$id;
            return this.$repository.sparql($uri);
        },
    },
    isDecorated(object) {
        return isObject(object)
            && ModelDecorator
                .hasPropertiesFrom(SPARQLDocumentTrait.PROTOTYPE, object);
    },
    decorate(object) {
        if (SPARQLDocumentTrait.isDecorated(object))
            return object;
        const target = ModelDecorator
            .decorateMultiple(object, TransientDocument, ResolvablePointer);
        return ModelDecorator
            .definePropertiesFrom(SPARQLDocumentTrait.PROTOTYPE, target);
    },
};

//# sourceMappingURL=SPARQLDocumentTrait.js.map
