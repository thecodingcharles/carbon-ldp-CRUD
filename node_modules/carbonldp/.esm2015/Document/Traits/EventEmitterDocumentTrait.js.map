{"version":3,"sources":["Document/Traits/EventEmitterDocumentTrait.ts"],"names":[],"mappings":"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","file":"EventEmitterDocumentTrait.js","sourcesContent":["import { EventEmitterDocumentsRepositoryTrait } from \"../../DocumentsRepository/Traits/EventEmitterDocumentsRepositoryTrait\";\nimport { ChildCreatedEvent } from \"../../Messaging/ChildCreatedEvent\";\nimport { DocumentDeletedEvent } from \"../../Messaging/DocumentDeletedEvent\";\nimport { DocumentModifiedEvent } from \"../../Messaging/DocumentModifiedEvent\";\nimport { Event } from \"../../Messaging/Event\";\nimport { EventMessage } from \"../../Messaging/EventMessage\";\nimport { MemberAddedEvent } from \"../../Messaging/MemberAddedEvent\";\nimport { MemberRemovedEvent } from \"../../Messaging/MemberRemovedEvent\";\n\nimport { ModelDecorator } from \"../../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../../Model/ModelPrototype\";\n\nimport { Pointer } from \"../../Pointer/Pointer\";\n\nimport { URI } from \"../../RDF/URI\";\nimport { ResolvablePointer } from \"../../Repository/ResolvablePointer\";\n\nimport { isFunction, isObject, isString } from \"../../Utils\";\n\nimport { TransientDocument } from \"../TransientDocument\";\n\n\n/**\n * Properties for creating an {@link EventEmitterDocumentTrait}.\n */\nexport interface BaseEventEmitterDocumentTrait {\n\t/**\n\t * Repository trait that will to execute requests of the trait to create.\n\t */\n\t$repository:EventEmitterDocumentsRepositoryTrait;\n}\n\n/**\n * Trait of a {@link Document} with methods for event subscriptions.\n */\nexport interface EventEmitterDocumentTrait extends TransientDocument, ResolvablePointer {\n\t/**\n\t * Repository trait that actually executes the request of the current trait.\n\t */\n\t$repository:EventEmitterDocumentsRepositoryTrait;\n\n\t/**\n\t * Subscribe to the child created event for the desired URI pattern.\n\t * @param event Child created event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.CHILD_CREATED, uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the child created event for the current document.\n\t * @param event Child created event to subscribe for its notifications.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.CHILD_CREATED, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document modified event for the desired URI pattern.\n\t * @param event Document modified event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document modified message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.DOCUMENT_MODIFIED, uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document modified event for the current document.\n\t * @param event Document modified event to subscribe for its notifications.\n\t * @param onEvent Callback that will receive the document modified message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.DOCUMENT_MODIFIED, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document deleted event for the desired URI pattern.\n\t * @param event Document deleted event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document deleted message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.DOCUMENT_DELETED, uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document deleted event for the current document.\n\t * @param event Document deleted event to subscribe for its notifications.\n\t * @param onEvent Callback that will receive the document deleted message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.DOCUMENT_DELETED, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member added event for the desired URI pattern.\n\t * @param event Member added event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member added message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.MEMBER_ADDED, uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member added event for the current document.\n\t * @param event Member added event to subscribe for its notifications.\n\t * @param onEvent Callback that will receive the member added message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.MEMBER_ADDED, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member removed event for the desired URI pattern.\n\t * @param event Member removed event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member removed message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.MEMBER_REMOVED, uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member removed event for the current document.\n\t * @param event Member removed event to subscribe for its notifications.\n\t * @param onEvent Callback that will receive the member removed message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event.MEMBER_REMOVED, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the specified event for the desired URI pattern.\n\t * @param event Event to subscribe for its notifications.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the notification message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event | string, uriPattern:string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the specified event for the current document.\n\t * @param event Event to subscribe for its notifications.\n\t * @param onEvent Callback that will receive the notification message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$on( event:Event | string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Removes the subscription of the child created event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Child created event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the child created event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.CHILD_CREATED, uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the child created event and {@param onEvent} callback for the current document.\n\t * @param event Child created event of the subscription to be removed.\n\t * @param onEvent Callback that was used to subscribe to the child created event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.CHILD_CREATED, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the document modified event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Document modified event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the document modified event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.DOCUMENT_MODIFIED, uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the document modified event and {@param onEvent} callback for the current document.\n\t * @param event Document modified event of the subscription to be removed.\n\t * @param onEvent Callback that was used to subscribe to the document modified event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.DOCUMENT_MODIFIED, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the document deleted event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Document deleted event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the document deleted event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.DOCUMENT_DELETED, uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the document deleted event and {@param onEvent} callback for the current document.\n\t * @param event Document deleted event of the subscription to be removed.\n\t * @param onEvent Callback that was used to subscribe to the document deleted event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.DOCUMENT_DELETED, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the member added event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Member added event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the member added event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.MEMBER_ADDED, uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the member added event and {@param onEvent} callback for the current document.\n\t * @param event Member added event of the subscription to be removed.\n\t * @param onEvent Callback that was used to subscribe to the member added event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.MEMBER_ADDED, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the member removed event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Member removed event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the member removed event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.MEMBER_REMOVED, uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the member removed event and {@param onEvent} callback for the current document.\n\t * @param event Member removed event of the subscription to be removed.\n\t * @param onEvent Callback that was used to subscribe to the member removed event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event.MEMBER_REMOVED, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the specified event and {@param onEvent} callback for the desired URI pattern.\n\t * @param event Event of the subscription to be removed.\n\t * @param uriPattern URI or pattern of the resources to unsubscribe for.\n\t * @param onEvent Callback that was used to subscribe to the specified event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event | string, uriPattern:string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Removes the subscription of the specified event and {@param onEvent} callback for the current document.\n\t * @param event Event of the subscription to be removed.\n\t * @param onEvent Callback that was used to subscribe to the specified event.\n\t * @param onError Callback that will receive any error in the subscription removal.\n\t */\n\t$off( event:Event | string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Subscribe to only one notification of the child created event for the desired URI pattern.\n\t * @param event Child created event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the child created event message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.CHILD_CREATED, uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the child created event for the current document.\n\t * @param event Child created event to subscribe for one notification.\n\t * @param onEvent Callback that will receive the child created event message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.CHILD_CREATED, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the document modified event for the desired URI pattern.\n\t * @param event Document modified event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document modified message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.DOCUMENT_MODIFIED, uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the document modified event for the current document.\n\t * @param event Document modified event to subscribe for one notification.\n\t * @param onEvent Callback that will receive the document modified message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.DOCUMENT_MODIFIED, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the document deleted event for the desired URI pattern.\n\t * @param event Document deleted event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document deleted message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.DOCUMENT_DELETED, uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the document deleted event for the current document.\n\t * @param event Document deleted event to subscribe for one notification.\n\t * @param onEvent Callback that will receive the document deleted message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.DOCUMENT_DELETED, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the member added event for the desired URI pattern.\n\t * @param event Member added event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member added message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.MEMBER_ADDED, uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the member added event for the current document.\n\t * @param event Member added event to subscribe for one notification.\n\t * @param onEvent Callback that will receive the member added message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.MEMBER_ADDED, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the member removed event for the desired URI pattern.\n\t * @param event Member removed event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member removed message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.MEMBER_REMOVED, uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the member removed event for the current document.\n\t * @param event Member removed event to subscribe for one notification.\n\t * @param onEvent Callback that will receive the member removed message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event.MEMBER_REMOVED, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the specified event for the desired URI pattern.\n\t * @param event Event to subscribe for one notification.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the notification message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event | string, uriPattern:string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to only one notification of the specified event for the current document.\n\t * @param event Event to subscribe for one notification.\n\t * @param onEvent Callback that will receive the notification message when the event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$one( event:Event | string, onEvent:( message:EventMessage ) => void, onError?:( error:Error ) => void ):void;\n\n\n\t/**\n\t * Subscribe to the child created event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onChildCreated( uriPattern:string, onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the child created event for the current document.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onChildCreated( onEvent:( message:ChildCreatedEvent ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Subscribe to the document modified event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document modified event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onDocumentModified( uriPattern:string, onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document modified event for the current document.\n\t * @param onEvent Callback that will receive the child created event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onDocumentModified( onEvent:( message:DocumentModifiedEvent ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Subscribe to the document deleted event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the document deleted event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onDocumentDeleted( uriPattern:string, onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the document deleted event for the current document.\n\t * @param onEvent Callback that will receive the document deleted event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onDocumentDeleted( onEvent:( message:DocumentDeletedEvent ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Subscribe to the member added event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member added event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onMemberAdded( uriPattern:string, onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member added event for the current document.\n\t * @param onEvent Callback that will receive the member added event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onMemberAdded( onEvent:( message:MemberAddedEvent ) => void, onError?:( error:Error ) => void ):void;\n\n\t/**\n\t * Subscribe to the member removed event for the desired URI pattern.\n\t * @param uriPattern URI or pattern of the resources to subscribe for.\n\t * @param onEvent Callback that will receive the member removed event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onMemberRemoved( uriPattern:string, onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n\t/**\n\t * Subscribe to the member removed event for the current document.\n\t * @param onEvent Callback that will receive the member removed event message when an event occurs.\n\t * @param onError Callback that will receive any error in the subscription.\n\t */\n\t$onMemberRemoved( onEvent:( message:MemberRemovedEvent ) => void, onError?:( error:Error ) => void ):void;\n}\n\n\ntype AnyMessageEvent =\n\tChildCreatedEvent\n\t| DocumentModifiedEvent\n\t| DocumentDeletedEvent\n\t| MemberAddedEvent\n\t| MemberRemovedEvent;\ntype OnEvent<T extends AnyMessageEvent> = ( message:T ) => void;\ntype OnError = ( error:Error ) => void;\n\nfunction __parseParams<T extends AnyMessageEvent>( resource:Pointer, uriPatternOROnEvent:string | OnEvent<T>, onEventOrOnError:OnEvent<T> | OnError, onError:OnError | undefined ):{ uriPattern:string, onEvent:OnEvent<T>, onError:OnError | undefined } {\n\tconst uriPattern:string = isString( uriPatternOROnEvent ) ?\n\t\tURI.resolve( resource.$id, uriPatternOROnEvent ) : resource.$id;\n\n\tconst onEvent:OnEvent<T> = isFunction( uriPatternOROnEvent ) ?\n\t\turiPatternOROnEvent : onEventOrOnError as OnEvent<T>;\n\n\tif( onEvent !== onEventOrOnError ) onError = onEventOrOnError as OnError;\n\n\treturn { uriPattern, onEvent, onError };\n}\n\n\n/**\n * Factory, decorator and utils for {@link EventEmitterDocumentTrait}.\n */\nexport type EventEmitterDocumentTraitFactory =\n\t& ModelPrototype<EventEmitterDocumentTrait, TransientDocument & ResolvablePointer>\n\t& ModelDecorator<EventEmitterDocumentTrait, BaseEventEmitterDocumentTrait>\n\t;\n\n/**\n * Constant that implements {@link EventEmitterDocumentTraitFactory}\n */\nexport const EventEmitterDocumentTrait:EventEmitterDocumentTraitFactory = {\n\tPROTOTYPE: {\n\t\t$on( this:EventEmitterDocumentTrait, event:Event | string, uriPatternOROnEvent:string | OnEvent<any>, onEventOrOnError:OnEvent<any> | OnError, onError?:OnError ):void {\n\t\t\tconst { uriPattern, onEvent, onError: $onError } = __parseParams( this, uriPatternOROnEvent, onEventOrOnError, onError );\n\t\t\treturn this.$repository.on( event, uriPattern, onEvent, $onError );\n\t\t},\n\n\t\t$off( this:EventEmitterDocumentTrait, event:Event | string, uriPatternOROnEvent:string | OnEvent<any>, onEventOrOnError:OnEvent<any> | OnError, onError?:OnError ):void {\n\t\t\tconst { uriPattern, onEvent, onError: $onError } = __parseParams( this, uriPatternOROnEvent, onEventOrOnError, onError );\n\t\t\treturn this.$repository.off( event, uriPattern, onEvent, $onError );\n\t\t},\n\n\t\t$one( this:EventEmitterDocumentTrait, event:Event | string, uriPatternOROnEvent:string | OnEvent<any>, onEventOrOnError:OnEvent<any> | OnError, onError?:OnError ):void {\n\t\t\tconst { uriPattern, onEvent, onError: $onError } = __parseParams( this, uriPatternOROnEvent, onEventOrOnError, onError );\n\t\t\treturn this.$repository.one( event, uriPattern, onEvent, $onError );\n\t\t},\n\n\n\t\t$onChildCreated( this:EventEmitterDocumentTrait, uriPatternOROnEvent:string | OnEvent<ChildCreatedEvent>, onEventOrOnError?:OnEvent<ChildCreatedEvent> | OnError, onError?:OnError ):void {\n\t\t\treturn this.$on( Event.CHILD_CREATED, uriPatternOROnEvent as string, onEventOrOnError as OnEvent<ChildCreatedEvent>, onError );\n\t\t},\n\n\t\t$onDocumentModified( this:EventEmitterDocumentTrait, uriPatternOROnEvent:string | OnEvent<DocumentModifiedEvent>, onEventOrOnError?:OnEvent<DocumentModifiedEvent> | OnError, onError?:OnError ):void {\n\t\t\treturn this.$on( Event.DOCUMENT_MODIFIED, uriPatternOROnEvent as string, onEventOrOnError as OnEvent<DocumentModifiedEvent>, onError );\n\t\t},\n\n\t\t$onDocumentDeleted( this:EventEmitterDocumentTrait, uriPatternOROnEvent:string | OnEvent<DocumentDeletedEvent>, onEventOrOnError?:OnEvent<DocumentDeletedEvent> | OnError, onError?:OnError ):void {\n\t\t\treturn this.$on( Event.DOCUMENT_DELETED, uriPatternOROnEvent as string, onEventOrOnError as OnEvent<DocumentDeletedEvent>, onError );\n\t\t},\n\n\t\t$onMemberAdded( this:EventEmitterDocumentTrait, uriPatternOROnEvent:string | OnEvent<MemberAddedEvent>, onEventOrOnError?:OnEvent<MemberAddedEvent> | OnError, onError?:OnError ):void {\n\t\t\treturn this.$on( Event.MEMBER_ADDED, uriPatternOROnEvent as string, onEventOrOnError as OnEvent<MemberAddedEvent>, onError );\n\t\t},\n\n\t\t$onMemberRemoved( this:EventEmitterDocumentTrait, uriPatternOROnEvent:string | OnEvent<MemberRemovedEvent>, onEventOrOnError?:OnEvent<MemberRemovedEvent> | OnError, onError?:OnError ):void {\n\t\t\treturn this.$on( Event.MEMBER_REMOVED, uriPatternOROnEvent as string, onEventOrOnError as OnEvent<MemberRemovedEvent>, onError );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is EventEmitterDocumentTrait {\n\t\treturn isObject( object )\n\t\t\t&& ModelDecorator\n\t\t\t\t.hasPropertiesFrom( EventEmitterDocumentTrait.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseEventEmitterDocumentTrait>( object:T ):T & EventEmitterDocumentTrait {\n\t\tif( EventEmitterDocumentTrait.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & TransientDocument & ResolvablePointer = ModelDecorator\n\t\t\t.decorateMultiple( object, TransientDocument, ResolvablePointer );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( EventEmitterDocumentTrait.PROTOTYPE, resource );\n\t},\n};\n"],"sourceRoot":"../../../src"}