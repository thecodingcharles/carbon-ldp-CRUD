import { _parseURIParams } from "../../DocumentsRepository/Utils";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { QueryablePointer } from "../../QueryDocuments/QueryablePointer";
import { URI } from "../../RDF/URI";
import { ResolvablePointer } from "../../Repository/ResolvablePointer";
import { LDPDocumentTrait } from "./LDPDocumentTrait";
export const QueryableDocumentTrait = {
    PROTOTYPE: {
        $get(uris, ...args) {
            if (!Array.isArray(uris))
                return ResolvablePointer.PROTOTYPE.$get.call(this, uris, ...args);
            const resolvedURIs = uris.map(uri => URI.resolve(this.$id, uri));
            return this.$repository.get(resolvedURIs, ...args);
        },
        $getChildren(uriOrQueryBuilderFnOrOptions, queryBuilderFnOrOptions, queryBuilderFn) {
            const { _uri, _args } = _parseURIParams(this, uriOrQueryBuilderFnOrOptions, arguments);
            return this.$repository.getChildren(_uri, ..._args);
        },
        $getMembers(uriOrQueryBuilderFnOrOptions, queryBuilderFnOrOptions, queryBuilderFn) {
            const { _uri, _args } = _parseURIParams(this, uriOrQueryBuilderFnOrOptions, arguments);
            return this.$repository.getMembers(_uri, ..._args);
        },
        $listChildren(uriOrOptions, requestOptions) {
            const { _uri, _args } = _parseURIParams(this, uriOrOptions, arguments);
            return this.$repository.listChildren(_uri, ..._args);
        },
        $listMembers(uriOrOptions, requestOptions) {
            const { _uri, _args } = _parseURIParams(this, uriOrOptions, arguments);
            return this.$repository.listMembers(_uri, ..._args);
        },
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(QueryableDocumentTrait.PROTOTYPE, object);
    },
    decorate(object) {
        if (QueryableDocumentTrait.isDecorated(object))
            return object;
        const forced = object;
        const target = ModelDecorator
            .decorateMultiple(forced, LDPDocumentTrait, QueryablePointer);
        return ModelDecorator
            .definePropertiesFrom(QueryableDocumentTrait.PROTOTYPE, target);
    },
};

//# sourceMappingURL=QueryableDocumentTrait.js.map
