{"version":3,"sources":["AccessPoint/TransientAccessPoint.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,iDAAiD,CAAC;AAM3F,OAAO,EAAE,CAAC,EAAE,MAAM,mBAAmB,CAAC;AA0DtC,MAAM,CAAC,MAAM,oBAAoB,GAA+B;IAC/D,IAAI,EAAE,CAAC,CAAC,WAAW;IAEnB,EAAE,CAAE,KAAS;QACZ,OAAO,wBAAwB,CAAC,EAAE,CAAE,KAAK,CAAE,CAAC;IAC7C,CAAC;IAED,MAAM,CAAoB,IAAwB;QACjD,MAAM,IAAI,GAAuB,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC3D,OAAO,oBAAoB,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IAChD,CAAC;IAED,UAAU,CAAoB,MAA0B;QACvD,MAAM,WAAW,GAA4B,wBAAwB;aACnE,UAAU,CAAK,MAAM,CAAE,CAAC;QAE1B,WAAW;aACT,QAAQ,CAAE,oBAAoB,CAAC,IAAI,CAAE,CAAC;QAExC,OAAO,WAAW,CAAC;IACpB,CAAC;CACD,CAAC","file":"TransientAccessPoint.js","sourcesContent":["import { TransientDirectContainer } from \"../LDP/DirectContainer/TransientDirectContainer\";\n\nimport { ModelFactory } from \"../Model/ModelFactory\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { C } from \"../Vocabularies/C\";\n\nimport { BaseAccessPoint } from \"./BaseAccessPoint\";\n\n\n/**\n * The in-memory model that represents a `c:AccessPoint`.\n */\nexport interface TransientAccessPoint extends TransientDirectContainer {\n\t/**\n\t * The relation the access point will manage.\n\t */\n\thasMemberRelation:Pointer;\n\t/**\n\t * The optional inverted relation the access point will manage.\n\t */\n\tisMemberOfRelation?:Pointer;\n\t/**\n\t * The inserted content relation the access point will have.\n\t */\n\tinsertedContentRelation?:Pointer;\n}\n\n\n/**\n * Factory, decorator and utils for {@link TransientAccessPoint} objects.\n */\nexport interface TransientAccessPointFactory extends ModelFactory<TransientAccessPoint> {\n\tTYPE:C[ \"AccessPoint\" ];\n\n\t/**\n\t * Returns true if the value provided is considered a {@link TransientAccessPoint}.\n\t *\n\t * @param value\n\t */\n\tis( value:any ):value is TransientAccessPoint;\n\n\n\t/**\n\t * Create a {@link TransientAccessPoint} object with the base data specified.\n\t *\n\t * @param data Data to create the transient access point.\n\t */\n\tcreate<T extends object>( data:T & BaseAccessPoint ):T & TransientAccessPoint;\n\n\t/**\n\t * Create a {@link TransientAccessPoint} object from the object specified\n\t * containing the base data.\n\t *\n\t * @param object Object with the base data that will be converted\n\t * into an access point.\n\t */\n\tcreateFrom<T extends object>( object:T & BaseAccessPoint ):T & TransientAccessPoint;\n}\n\n/**\n * Constant that implements the {@link TransientAccessPointFactory} interface.\n */\nexport const TransientAccessPoint:TransientAccessPointFactory = {\n\tTYPE: C.AccessPoint,\n\n\tis( value:any ):value is TransientAccessPoint {\n\t\treturn TransientDirectContainer.is( value );\n\t},\n\n\tcreate<T extends object>( data:T & BaseAccessPoint ):T & TransientAccessPoint {\n\t\tconst copy:T & BaseAccessPoint = Object.assign( {}, data );\n\t\treturn TransientAccessPoint.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseAccessPoint ):T & TransientAccessPoint {\n\t\tconst accessPoint:T & TransientAccessPoint = TransientDirectContainer\n\t\t\t.createFrom<T>( object );\n\n\t\taccessPoint\n\t\t\t.$addType( TransientAccessPoint.TYPE );\n\n\t\treturn accessPoint;\n\t},\n};\n"],"sourceRoot":"../../src"}