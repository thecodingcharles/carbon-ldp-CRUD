{"version":3,"sources":["SPARQL/SPARQLBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,QAAQ,EAAE,MAAM,UAAU,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AA2BhD,SAAS,sBAAsB,CAAE,QAAuC,EAAE,UAAiB;IAC1F,OAAO,CAAE,SAAS,EAAE,MAAM,EAAG,EAAE;QAC9B,MAAM,YAAY,GAAgC,YAAY,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;QAE/F,OAAO,MAAM,CAAC,MAAM,CAAE,YAAY,EAAE;YACnC,OAAO,EAAE,GAAqB,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAK,UAAU,EAAE,YAAY,CAAC,eAAe,EAAE,CAAE;SAC7G,CAAE,CAAC;IACL,CAAC,CAAC;AACH,CAAC;AAED,SAAS,mBAAmB,CAAE,QAAuC,EAAE,UAAiB;IACvF,OAAO,CAAE,SAAS,EAAE,MAAM,EAAG,EAAE;QAC9B,MAAM,YAAY,GAAgC,YAAY,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;QAE/F,OAAO,MAAM,CAAC,MAAM,CAAE,YAAY,EAAE;YACnC,OAAO,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAE,UAAU,EAAE,YAAY,CAAC,eAAe,EAAE,CAAE;SACrF,CAAE,CAAC;IACL,CAAC,CAAC;AACH,CAAC;AAMD,MAAM,OAAO,aAAc,SAAQ,QAA6C;IAK/E,YAAa,UAAyC,EAAE,UAAiB;QACxE,MAAM,mBAAmB,GAAqC,sBAAsB,CAAE,UAAU,EAAE,UAAU,CAAE,CAAC;QAC/G,MAAM,gBAAgB,GAAkC,mBAAmB,CAAE,UAAU,EAAE,UAAU,CAAE,CAAC;QAEtG,KAAK,CAAE,mBAAmB,EAAE,gBAAgB,CAAE,CAAC;IAChD,CAAC;CACD","file":"SPARQLBuilder.js","sourcesContent":["import { FinishFactory, SPARQLER } from \"sparqler\";\nimport { FinishClause } from \"sparqler/clauses\";\n\nimport { SPARQLDocumentsRepositoryTrait } from \"../DocumentsRepository/Traits/SPARQLDocumentsRepositoryTrait\";\nimport { SPARQLSelectResults } from \"./SelectResults\";\n\n\n/**\n * Clause that extends the query builder allowing to execute the request for the SELECT built query.\n */\nexport interface FinishSPARQLSelect extends FinishClause {\n\t/**\n\t * Executes the SPARQL query.\n\t */\n\texecute<T extends object>():Promise<SPARQLSelectResults<T>>;\n}\n\n/**\n * Clause that extends the query builder allowing to execute the request for the ASK built query.\n */\nexport interface FinishSPARQLAsk extends FinishClause {\n\t/**\n\t * Executes the SPARQL query.\n\t */\n\texecute():Promise<boolean>;\n}\n\n\nfunction getFinishSelectFactory( resource:SPARQLDocumentsRepositoryTrait, entryPoint:string ):FinishFactory<FinishSPARQLSelect> {\n\treturn ( container, object ) => {\n\t\tconst finishClause:FinishClause & typeof object = FinishClause.createFrom( container, object );\n\n\t\treturn Object.assign( finishClause, {\n\t\t\texecute: <T extends object>() => resource.executeSELECTQuery<T>( entryPoint, finishClause.toCompactString() ),\n\t\t} );\n\t};\n}\n\nfunction getFinishAskFactory( resource:SPARQLDocumentsRepositoryTrait, entryPoint:string ):FinishFactory<FinishSPARQLAsk> {\n\treturn ( container, object ) => {\n\t\tconst finishClause:FinishClause & typeof object = FinishClause.createFrom( container, object );\n\n\t\treturn Object.assign( finishClause, {\n\t\t\texecute: () => resource.executeASKQuery( entryPoint, finishClause.toCompactString() ),\n\t\t} );\n\t};\n}\n\n\n/**\n * Customized SPARQLER class to be used by the SDK.\n */\nexport class SPARQLBuilder extends SPARQLER<FinishSPARQLSelect, FinishSPARQLAsk> {\n\t/**\n\t * @param repository The repository where the builder is been constructed from.\n\t * @param entryPoint The entry point URI where the query can be executed from.\n\t */\n\tconstructor( repository:SPARQLDocumentsRepositoryTrait, entryPoint:string ) {\n\t\tconst finishSelectFactory:FinishFactory<FinishSPARQLSelect> = getFinishSelectFactory( repository, entryPoint );\n\t\tconst finishAskFactory:FinishFactory<FinishSPARQLAsk> = getFinishAskFactory( repository, entryPoint );\n\n\t\tsuper( finishSelectFactory, finishAskFactory );\n\t}\n}\n"],"sourceRoot":"../../src"}