{"version":3,"sources":["SPARQL/SPARQLService.ts"],"names":[],"mappings":"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","file":"SPARQLService.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\nimport { NotImplementedError } from \"../Errors/NotImplementedError\";\n\nimport { RequestOptions, RequestService, RequestUtils } from \"../HTTP/Request\";\nimport { Response } from \"../HTTP/Response\";\nimport { StringParser } from \"../HTTP/StringParser\";\n\nimport { $PointerLibrary, _getPointer, PointerLibrary } from \"../Pointer/PointerLibrary\";\n\nimport { RDFLiteral } from \"../RDF/Literal\";\n\nimport { SPARQLRawBindingObject, SPARQLRawBindingProperty, SPARQLRawResults } from \"./RawResults\";\nimport { SPARQLRawResultsParser } from \"./RawResultsParser\";\nimport { SPARQLSelectResults } from \"./SelectResults\";\n\n\n/**\n * Service with methods to execute SPARQL queries and updates.\n */\nexport class SPARQLService {\n\tprivate static DEFAULT_OPTIONS:RequestOptions = {};\n\tprivate static RESULTS_PARSER:SPARQLRawResultsParser = new SPARQLRawResultsParser();\n\tprivate static STRING_PARSER:StringParser = new StringParser();\n\n\t/**\n\t * Executes an ASK Query and returns a raw application/sparql-results+json object.\n\t * @param url\n\t * @param askQuery\n\t * @param options\n\t */\n\tstatic executeRawASKQuery( url:string, askQuery:string, options:RequestOptions = {} ):Promise<[ SPARQLRawResults, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, askQuery, options, SPARQLService.RESULTS_PARSER );\n\t}\n\n\t/**\n\t * Executes an ASK Query and returns a boolean.\n\t * @param url\n\t * @param askQuery\n\t * @param options\n\t */\n\tstatic executeASKQuery( url:string, askQuery:string, options:RequestOptions = {} ):Promise<[ boolean, Response ]> {\n\t\treturn SPARQLService\n\t\t\t.executeRawASKQuery( url, askQuery, options )\n\t\t\t.then<[ boolean, Response ]>( ( [ rawResults, response ]:[ SPARQLRawResults, Response ] ) => {\n\t\t\t\treturn [ rawResults.boolean!, response ];\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes a SELECT Query and returns a raw application/sparql-results+json object.\n\t * @param url\n\t * @param selectQuery\n\t * @param options\n\t */\n\tstatic executeRawSELECTQuery( url:string, selectQuery:string, options:RequestOptions = {} ):Promise<[ SPARQLRawResults, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/sparql-results+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, selectQuery, options, SPARQLService.RESULTS_PARSER );\n\t}\n\n\t/**\n\t * Executes a SELECT Query and parses the results.\n\t * @param url\n\t * @param selectQuery\n\t * @param pointerLibrary\n\t * @param options\n\t */\n\tstatic executeSELECTQuery<T>( url:string, selectQuery:string, pointerLibrary:PointerLibrary, options:RequestOptions = {} ):Promise<[ SPARQLSelectResults<T>, Response ]> {\n\t\treturn SPARQLService\n\t\t\t.executeRawSELECTQuery( url, selectQuery, options )\n\t\t\t.then<[ SPARQLSelectResults<T>, Response ]>( ( [ rawResults, response ]:[ SPARQLRawResults, Response ] ) => {\n\t\t\t\tlet rawBindings:SPARQLRawBindingObject[] = rawResults.results!.bindings;\n\t\t\t\tlet bindings:T[] = [];\n\n\t\t\t\tfor( let bindingColumn of rawBindings ) {\n\t\t\t\t\tlet binding:T = {} as T;\n\t\t\t\t\tfor( let bindingRow in bindingColumn ) {\n\t\t\t\t\t\tlet bindingCell:SPARQLRawBindingProperty = bindingColumn[ bindingRow ];\n\t\t\t\t\t\tbinding[ bindingRow ] = SPARQLService.__parseRawBindingProperty( bindingCell, pointerLibrary );\n\t\t\t\t\t}\n\t\t\t\t\tbindings.push( binding );\n\t\t\t\t}\n\n\t\t\t\tconst results:SPARQLSelectResults<T> = {\n\t\t\t\t\tvars: rawResults.head.vars!,\n\t\t\t\t\tbindings: bindings,\n\t\t\t\t};\n\t\t\t\treturn [ results, response ];\n\t\t\t} );\n\t}\n\n\t/**\n\t * Executes a CONSTRUCT Query and returns a string with the resulting model.\n\t * @param url\n\t * @param constructQuery\n\t * @param options\n\t */\n\tstatic executeRawCONSTRUCTQuery( url:string, constructQuery:string, options:RequestOptions = {} ):Promise<[ string, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/ld+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, constructQuery, options, SPARQLService.STRING_PARSER );\n\t}\n\n\t/**\n\t * Executes a DESCRIBE Query and returns a string with the resulting model.\n\t * @param url\n\t * @param describeQuery\n\t * @param options\n\t */\n\tstatic executeRawDESCRIBEQuery( url:string, describeQuery:string, options:RequestOptions = {} ):Promise<[ string, Response ]> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/ld+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-query\", options );\n\n\t\treturn RequestService.post( url, describeQuery, options, SPARQLService.STRING_PARSER );\n\t}\n\n\t/**\n\t * Executes an UPDATE query.\n\t * @param url\n\t * @param updateQuery\n\t * @param options\n\t */\n\tstatic executeUPDATE( url:string, updateQuery:string, options:RequestOptions = {} ):Promise<Response> {\n\t\toptions = Object.assign( options, SPARQLService.DEFAULT_OPTIONS );\n\n\t\tRequestUtils.setAcceptHeader( \"application/ld+json\", options );\n\t\tRequestUtils.setContentTypeHeader( \"application/sparql-update\", options );\n\n\t\treturn RequestService.post( url, updateQuery, options );\n\t}\n\n\tprivate static __parseRawBindingProperty( rawBindingProperty:SPARQLRawBindingProperty, pointerLibrary:PointerLibrary | $PointerLibrary ):any {\n\t\tswitch( rawBindingProperty.type ) {\n\t\t\tcase \"uri\":\n\t\t\t\treturn _getPointer( pointerLibrary, rawBindingProperty.value );\n\t\t\tcase \"bnode\":\n\t\t\t\tthrow new NotImplementedError( \"BNodes cannot be queried directly\" );\n\t\t\tcase \"literal\":\n\t\t\t\tif( \"datatype\" in rawBindingProperty ) {\n\t\t\t\t\treturn RDFLiteral.parse( rawBindingProperty.value, rawBindingProperty.datatype );\n\t\t\t\t} else {\n\t\t\t\t\treturn RDFLiteral.parse( rawBindingProperty.value );\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentError( \"The bindingProperty has an unsupported type\" );\n\t\t}\n\t}\n\n}\n"],"sourceRoot":"../../src"}