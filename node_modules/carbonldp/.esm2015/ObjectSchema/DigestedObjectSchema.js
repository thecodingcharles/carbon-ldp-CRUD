import { URI } from "../RDF/URI";
import { ObjectSchemaUtils } from "./ObjectSchemaUtils";
export class DigestedObjectSchema {
    constructor() {
        this.base = "";
        this.vocab = undefined;
        this.language = null;
        this.prefixes = new Map();
        this.properties = new Map();
    }
    resolveURI(uri, relativeTo = {}) {
        if (uri === null || URI.isAbsolute(uri) || URI.isBNodeID(uri))
            return uri;
        const [prefix, localName = ""] = uri.split(":");
        const definedReference = this.prefixes.has(prefix) ?
            this.prefixes.get(prefix) : this.properties.has(prefix) ?
            this.properties.get(prefix).uri
            : null;
        if (definedReference !== null && definedReference !== prefix) {
            return this.resolveURI(definedReference + localName, { vocab: true });
        }
        if (localName)
            return uri;
        if (relativeTo.vocab && this.vocab)
            return this.vocab + uri;
        if (relativeTo.base)
            return URI.resolve(this.base, uri);
        return uri;
    }
    getProperty(name) {
        if (!this.properties.has(name))
            return void 0;
        return ObjectSchemaUtils._resolveProperty(this, this.properties.get(name));
    }
}

//# sourceMappingURL=DigestedObjectSchema.js.map
