import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ModelDecorator } from "../Model/ModelDecorator";
import { Pointer } from "../Pointer/Pointer";
export const RegisteredPointer = {
    PROTOTYPE: {
        get $registry() {
            throw new IllegalArgumentError(`Property "$registry" is required.`);
        },
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(RegisteredPointer.PROTOTYPE, object);
    },
    decorate(object) {
        if (RegisteredPointer.isDecorated(object))
            return object;
        const resource = ModelDecorator
            .decorateMultiple(object, Pointer);
        return ModelDecorator
            .definePropertiesFrom(RegisteredPointer.PROTOTYPE, resource);
    },
    create(data) {
        const copy = Object.assign({}, data);
        return RegisteredPointer.createFrom(copy);
    },
    createFrom(object) {
        return RegisteredPointer.decorate(object);
    },
    is(value) {
        return Pointer.is(value)
            && RegisteredPointer.isDecorated(value);
    },
};

//# sourceMappingURL=RegisteredPointer.js.map
