import { GeneralRepository } from "../../GeneralRepository/GeneralRepository";
import { Event } from "../../Messaging/Event";
import { _createDestination } from "../../Messaging/Utils";
import { ModelDecorator } from "../../Model/ModelDecorator";
import { isObject } from "../../Utils";
export const EventEmitterDocumentsRepositoryTrait = {
    PROTOTYPE: {
        on(event, uriPattern, onEvent, onError) {
            try {
                const destination = _createDestination(event, uriPattern, this.context.baseURI);
                this.context.messaging.subscribe(destination, onEvent, onError);
            }
            catch (error) {
                if (!onError)
                    throw error;
                onError(error);
            }
        },
        off(event, uriPattern, onEvent, onError) {
            try {
                const destination = _createDestination(event, uriPattern, this.context.baseURI);
                this.context.messaging.unsubscribe(destination, onEvent);
            }
            catch (error) {
                if (!onError)
                    throw error;
                onError(error);
            }
        },
        one(event, uriPattern, onEvent, onError) {
            try {
                const destination = _createDestination(event, uriPattern, this.context.baseURI);
                const onEventWrapper = message => {
                    onEvent(message);
                    this.context.messaging.unsubscribe(destination, onEventWrapper);
                };
                this.context.messaging.subscribe(destination, onEventWrapper, onError);
            }
            catch (error) {
                if (!onError)
                    throw error;
                onError(error);
            }
        },
        onChildCreated(uriPattern, onEvent, onError) {
            return this.on(Event.CHILD_CREATED, uriPattern, onEvent, onError);
        },
        onDocumentModified(uriPattern, onEvent, onError) {
            return this.on(Event.DOCUMENT_MODIFIED, uriPattern, onEvent, onError);
        },
        onDocumentDeleted(uriPattern, onEvent, onError) {
            return this.on(Event.DOCUMENT_DELETED, uriPattern, onEvent, onError);
        },
        onMemberAdded(uriPattern, onEvent, onError) {
            return this.on(Event.MEMBER_ADDED, uriPattern, onEvent, onError);
        },
        onMemberRemoved(uriPattern, onEvent, onError) {
            return this.on(Event.MEMBER_REMOVED, uriPattern, onEvent, onError);
        },
    },
    isDecorated(object) {
        return isObject(object)
            && ModelDecorator
                .hasPropertiesFrom(EventEmitterDocumentsRepositoryTrait.PROTOTYPE, object);
    },
    decorate(object) {
        if (EventEmitterDocumentsRepositoryTrait.isDecorated(object))
            return object;
        const resource = ModelDecorator
            .decorateMultiple(object, GeneralRepository);
        return ModelDecorator
            .definePropertiesFrom(EventEmitterDocumentsRepositoryTrait.PROTOTYPE, resource);
    },
};

//# sourceMappingURL=EventEmitterDocumentsRepositoryTrait.js.map
