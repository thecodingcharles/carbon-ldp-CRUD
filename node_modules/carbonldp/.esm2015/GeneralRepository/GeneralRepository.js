import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ModelDecorator } from "../Model/ModelDecorator";
import { Repository } from "../Repository/Repository";
export const GeneralRepository = {
    PROTOTYPE: {
        get context() {
            throw new IllegalArgumentError(`Property "context" is required.`);
        },
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(GeneralRepository.PROTOTYPE, object);
    },
    decorate(object) {
        if (GeneralRepository.isDecorated(object))
            return object;
        const target = ModelDecorator
            .decorateMultiple(object, Repository);
        return ModelDecorator
            .definePropertiesFrom(GeneralRepository.PROTOTYPE, target);
    },
    create(data) {
        return GeneralRepository.createFrom(Object.assign({}, data));
    },
    createFrom(object) {
        return GeneralRepository.decorate(object);
    },
};

//# sourceMappingURL=GeneralRepository.js.map
