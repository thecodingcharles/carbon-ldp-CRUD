{"version":3,"sources":["LDP/ErrorResponse.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,CAAC,EAAE,MAAM,mBAAmB,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,qBAAqB,CAAC;AAuC1C,MAAM,MAAM,GAAgB;IAC3B,QAAQ,EAAE;QACT,KAAK,EAAE,CAAC,CAAC,KAAK;QACd,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;IACD,WAAW,EAAE;QACZ,KAAK,EAAE,CAAC,CAAC,SAAS;QAClB,OAAO,EAAE,GAAG,CAAC,MAAM;KACnB;IACD,YAAY,EAAE;QACb,KAAK,EAAE,CAAC,CAAC,cAAc;QACvB,OAAO,EAAE,GAAG,CAAC,GAAG;KAChB;CACD,CAAC;AAMF,MAAM,CAAC,MAAM,aAAa,GAAwB;IACjD,IAAI,EAAE,CAAC,CAAC,aAAa;IACrB,MAAM;IAGN,EAAE,CAAE,KAAS;QACZ,OAAO,QAAQ,CAAC,EAAE,CAAE,KAAK,CAAE;eACvB,KAAK,CAAC,QAAQ,CAAE,aAAa,CAAC,IAAI,CAAE,CACtC;IACH,CAAC;IAGD,UAAU,CAAE,aAA2B;QACtC,OAAO,aAAa,CAAC,MAAM;aACzB,GAAG,CAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAE;aAClC,IAAI,CAAE,IAAI,CAAE,CAAC;IAChB,CAAC;CAED,CAAC","file":"ErrorResponse.js","sourcesContent":["import { ModelSchema } from \"../Model/ModelSchema\";\n\nimport { ObjectSchema } from \"../ObjectSchema/ObjectSchema\";\n\nimport { Resource } from \"../Resource/Resource\";\n\nimport { C } from \"../Vocabularies/C\";\nimport { XSD } from \"../Vocabularies/XSD\";\n\nimport { Error } from \"./Error\";\n\n\n/**\n * Model that represents a `c:ErrorResponse`.\n * This model is returned as the response of a request when any error occurs.\n */\nexport interface ErrorResponse extends Resource {\n\t/**\n\t * Set of all the errors that the request generated.\n\t */\n\terrors:Error[];\n\t/**\n\t * String that identifies the request that caused the error.\n\t */\n\trequestID:string;\n\t/**\n\t * The HTTP status code for the general error of the request.\n\t */\n\tstatusCode:number;\n}\n\n\n/**\n * Factory, decorator and utils for {@link ErrorResponse}.\n */\nexport interface ErrorResponseFactory extends ModelSchema {\n\tTYPE:C[ \"ErrorResponse\" ];\n\tSCHEMA:ObjectSchema;\n\n\n\tis( value:any ):value is ErrorResponse;\n\n\n\tgetMessage( errorResponse:ErrorResponse ):string;\n}\n\nconst SCHEMA:ObjectSchema = {\n\t\"errors\": {\n\t\t\"@id\": C.error,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n\t\"requestID\": {\n\t\t\"@id\": C.requestID,\n\t\t\"@type\": XSD.string,\n\t},\n\t\"statusCode\": {\n\t\t\"@id\": C.httpStatusCode,\n\t\t\"@type\": XSD.int,\n\t},\n};\n\n/**\n * Constant that implements {@link ErrorResponseFactory}.\n */\n// TODO: Change to type-alias\nexport const ErrorResponse:ErrorResponseFactory = {\n\tTYPE: C.ErrorResponse,\n\tSCHEMA,\n\n\n\tis( value:any ):value is ErrorResponse {\n\t\treturn Resource.is( value )\n\t\t\t&& value.$hasType( ErrorResponse.TYPE )\n\t\t\t;\n\t},\n\n\n\tgetMessage( errorResponse:ErrorResponse ):string {\n\t\treturn errorResponse.errors\n\t\t\t.map( error => error.errorMessage )\n\t\t\t.join( \", \" );\n\t},\n\n};\n"],"sourceRoot":"../../src"}