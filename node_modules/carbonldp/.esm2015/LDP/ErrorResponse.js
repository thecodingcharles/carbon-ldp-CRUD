import { Resource } from "../Resource/Resource";
import { C } from "../Vocabularies/C";
import { XSD } from "../Vocabularies/XSD";
const SCHEMA = {
    "errors": {
        "@id": C.error,
        "@type": "@id",
        "@container": "@set",
    },
    "requestID": {
        "@id": C.requestID,
        "@type": XSD.string,
    },
    "statusCode": {
        "@id": C.httpStatusCode,
        "@type": XSD.int,
    },
};
export const ErrorResponse = {
    TYPE: C.ErrorResponse,
    SCHEMA,
    is(value) {
        return Resource.is(value)
            && value.$hasType(ErrorResponse.TYPE);
    },
    getMessage(errorResponse) {
        return errorResponse.errors
            .map(error => error.errorMessage)
            .join(", ");
    },
};

//# sourceMappingURL=ErrorResponse.js.map
