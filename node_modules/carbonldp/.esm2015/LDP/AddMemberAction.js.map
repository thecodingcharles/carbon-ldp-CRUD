{"version":3,"sources":["LDP/AddMemberAction.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,CAAC,EAAE,MAAM,mBAAmB,CAAC;AA0CtC,MAAM,MAAM,GAAgB;IAC3B,eAAe,EAAE;QAChB,KAAK,EAAE,CAAC,CAAC,YAAY;QACrB,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,MAAM;KACpB;CACD,CAAC;AAKF,MAAM,CAAC,MAAM,eAAe,GAA0B;IACrD,IAAI,EAAE,CAAC,CAAC,eAAe;IACvB,MAAM;IAEN,EAAE,CAAE,KAAS;QACZ,OAAO,QAAQ,CAAC,EAAE,CAAE,KAAK,CAAE;eACvB,KAAK,CAAC,QAAQ,CAAE,eAAe,CAAC,IAAI,CAAE,CACxC;IACH,CAAC;IAGD,MAAM,CAAoB,IAA4B;QACrD,MAAM,IAAI,GAA2B,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC/D,OAAO,eAAe,CAAC,UAAU,CAAE,IAAI,CAAE,CAAC;IAC3C,CAAC;IAED,UAAU,CAAoB,MAA8B;QAC3D,MAAM,QAAQ,GAAuB,QAAQ,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;QAEnE,QAAQ,CAAC,QAAQ,CAAE,eAAe,CAAC,IAAI,CAAE,CAAC;QAE1C,OAAO,QAAQ,CAAC;IACjB,CAAC;CACD,CAAC","file":"AddMemberAction.js","sourcesContent":["import { ModelFactory } from \"../Model/ModelFactory\";\n\nimport { ObjectSchema } from \"../ObjectSchema/ObjectSchema\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { BaseResource } from \"../Resource/BaseResource\";\nimport { Resource } from \"../Resource/Resource\";\n\nimport { C } from \"../Vocabularies/C\";\n\n\n/**\n * Base properties for a {@link AddMemberAction}.\n */\nexport interface BaseAddMemberAction extends BaseResource {\n\t/**\n\t * The resources to be added as members.\n\t */\n\ttargetMembers:Pointer[];\n}\n\n\n/**\n * Model that represents a `c:AddMemberAction`.\n * This model is used as a request body for adding members.\n */\nexport interface AddMemberAction extends Resource {\n\t/**\n\t * Resources to add as members.\n\t */\n\ttargetMembers:Pointer[];\n}\n\n\n/**\n * Factory, decorator and utils for {@link AddMemberAction}.\n */\n// TODO: Change to type-alias\nexport interface AddMemberActionFactory extends ModelFactory<AddMemberAction> {\n\tTYPE:C[ \"AddMemberAction\" ];\n\tSCHEMA:ObjectSchema;\n\n\tis( value:any ):value is AddMemberAction;\n\n\n\tcreate<T extends object>( data:T & BaseAddMemberAction ):T & AddMemberAction;\n\n\tcreateFrom<T extends object>( data:T & BaseAddMemberAction ):T & AddMemberAction;\n}\n\nconst SCHEMA:ObjectSchema = {\n\t\"targetMembers\": {\n\t\t\"@id\": C.targetMember,\n\t\t\"@type\": \"@id\",\n\t\t\"@container\": \"@set\",\n\t},\n};\n\n/**\n * Constant that implements {@link AddMemberActionFactory}.\n */\nexport const AddMemberAction:AddMemberActionFactory = {\n\tTYPE: C.AddMemberAction,\n\tSCHEMA,\n\n\tis( value:any ):value is AddMemberAction {\n\t\treturn Resource.is( value )\n\t\t\t&& value.$hasType( AddMemberAction.TYPE )\n\t\t\t;\n\t},\n\n\n\tcreate<T extends object>( data:T & BaseAddMemberAction ):T & AddMemberAction {\n\t\tconst copy:T & BaseAddMemberAction = Object.assign( {}, data );\n\t\treturn AddMemberAction.createFrom( copy );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseAddMemberAction ):T & AddMemberAction {\n\t\tconst resource:T & AddMemberAction = Resource.createFrom( object );\n\n\t\tresource.$addType( AddMemberAction.TYPE );\n\n\t\treturn resource;\n\t},\n};\n"],"sourceRoot":"../../src"}