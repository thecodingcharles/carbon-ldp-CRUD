import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ModelDecorator } from "../Model/ModelDecorator";
import { URI } from "../RDF/URI";
import { Resource } from "../Resource/Resource";
export const TransientFragment = {
    PROTOTYPE: {
        get $registry() {
            throw new IllegalArgumentError(`Property "$registry" is required.`);
        },
        get $slug() {
            return URI.generateBNodeID();
        },
        get $id() {
            if (URI.isBNodeID(this.$slug))
                return this.$slug;
            return this.$document.$id + "#" + this.$slug;
        },
        set $id(value) {
            if (URI.isBNodeID(value))
                this.$slug = value;
            else
                this.$slug = URI.getFragment(value);
        },
        get $document() {
            return this.$registry;
        },
        set $document(document) {
            this.$registry = document;
        },
    },
    isDecorated(object) {
        return Resource.isDecorated(object);
    },
    decorate(object) {
        if (TransientFragment.isDecorated(object))
            return object;
        const target = ModelDecorator
            .decorateMultiple(object, Resource);
        if (!target.$registry)
            delete target.$registry;
        if (!target.$slug)
            delete target.$slug;
        return ModelDecorator
            .definePropertiesFrom(TransientFragment.PROTOTYPE, target);
    },
    is(value) {
        return Resource.is(value);
    },
    create(data) {
        const copy = Object.assign({}, data);
        return TransientFragment.createFrom(copy);
    },
    createFrom(object) {
        return TransientFragment.decorate(object);
    },
};

//# sourceMappingURL=TransientFragment.js.map
