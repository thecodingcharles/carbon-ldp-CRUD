import { ModelDecorator } from "../Model/ModelDecorator";
import { QueryablePointer } from "../QueryDocuments/QueryablePointer";
import { TransientFragment } from "./TransientFragment";
export const Fragment = {
    PROTOTYPE: {
        get $repository() {
            return this.$registry;
        },
        set $repository(document) {
            this.$registry = document;
        },
        get $_resolved() {
            return this.$document.$_resolved;
        },
        set $_resolved(_value) { },
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(Fragment.PROTOTYPE, object);
    },
    decorate(object) {
        if (Fragment.isDecorated(object))
            return object;
        const forced = Object.assign(object, {
            $document: object.$registry,
            $repository: object.$registry,
        });
        const target = ModelDecorator
            .decorateMultiple(forced, TransientFragment, QueryablePointer);
        return ModelDecorator
            .definePropertiesFrom(Fragment.PROTOTYPE, target);
    },
    create: TransientFragment.create,
    createFrom: TransientFragment.createFrom,
};

//# sourceMappingURL=Fragment.js.map
