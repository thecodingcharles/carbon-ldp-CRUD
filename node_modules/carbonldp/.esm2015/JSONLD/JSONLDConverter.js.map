{"version":3,"sources":["JSONLD/JSONLDConverter.ts"],"names":[],"mappings":"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","file":"JSONLDConverter.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { ContainerType } from \"../ObjectSchema/ContainerType\";\nimport { DigestedObjectSchema } from \"../ObjectSchema/DigestedObjectSchema\";\nimport { DigestedObjectSchemaProperty } from \"../ObjectSchema/DigestedObjectSchemaProperty\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\nimport { $PointerLibrary, _getPointer, PointerLibrary } from \"../Pointer/PointerLibrary\";\n\nimport { RDFList } from \"../RDF/List\";\n\nimport { Serializer } from \"../RDF/Literal/Serializer\";\nimport * as XSDSerializers from \"../RDF/Literal/Serializers/XSD\";\n\nimport { RDFNode } from \"../RDF/Node\";\nimport { URI } from \"../RDF/URI\";\nimport { RDFValue } from \"../RDF/Value\";\n\nimport { _isExistingValue, isFunction, isNull, isObject, isString, MapUtils } from \"../Utils\";\n\nimport { XSD } from \"../Vocabularies/XSD\";\n\nimport { _guessXSDType } from \"./Utils\";\n\n\n// TODO: Use Literal.Parsers to parse literals\n/**\n * Service with that can convert expanded JSON-LD objects to compacted resources and viceversa.\n */\nexport class JSONLDConverter {\n\tprivate readonly _literalSerializers:Map<string, Serializer>;\n\n\t/**\n\t * Map object with data-type/serializer pairs for stringify the data of a resource when expanding it.\n\t */\n\tget literalSerializers():Map<string, Serializer> { return this._literalSerializers; }\n\n\tprivate static getDefaultSerializers():Map<string, Serializer> {\n\t\tlet literalSerializers:Map<string, Serializer> = new Map<string, Serializer>();\n\n\t\tliteralSerializers.set( XSD.date, XSDSerializers.dateSerializer );\n\t\tliteralSerializers.set( XSD.dateTime, XSDSerializers.dateTimeSerializer );\n\t\tliteralSerializers.set( XSD.time, XSDSerializers.timeSerializer );\n\t\tliteralSerializers.set( XSD.integer, XSDSerializers.integerSerializer );\n\t\tliteralSerializers.set( XSD.int, XSDSerializers.integerSerializer );\n\t\tliteralSerializers.set( XSD.unsignedInt, XSDSerializers.unsignedIntegerSerializer );\n\t\tliteralSerializers.set( XSD.long, XSDSerializers.longSerializer );\n\t\tliteralSerializers.set( XSD.unsignedLong, XSDSerializers.unsignedLongSerializer );\n\t\tliteralSerializers.set( XSD.float, XSDSerializers.floatSerializer );\n\t\tliteralSerializers.set( XSD.double, XSDSerializers.floatSerializer );\n\t\tliteralSerializers.set( XSD.boolean, XSDSerializers.booleanSerializer );\n\t\tliteralSerializers.set( XSD.string, XSDSerializers.stringSerializer );\n\n\t\treturn literalSerializers;\n\t}\n\n\t/**\n\t * Creates a JSONLD Converter from optional literal serializers.\n\t * @param literalSerializers Serializers to be set in the instance.\n\t */\n\tconstructor( literalSerializers?:Map<string, Serializer> ) {\n\t\tthis._literalSerializers = literalSerializers ?\n\t\t\tMapUtils.extend( new Map(), literalSerializers ) :\n\t\t\tJSONLDConverter.getDefaultSerializers()\n\t\t;\n\t}\n\n\t/**\n\t * Assigns the data of the expanded JSON-LD objects to the target objects in a friendly mode.\n\t * i.e. without the JSON-LD Syntax Tokens and parsed values, in accordance to the schema provided.\n\t * @param expandedObjects The JSON-LD objects to compact.\n\t * @param targetObjects The target objects where will be added the compact data of the expanded object.\n\t * @param digestedSchema The schema that describes how compact the expanded object.\n\t * @param pointerLibrary An object from where one can obtain the pointers of resources.\n\t */\n\tcompact( expandedObjects:object[], targetObjects:object[], digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary ):object[];\n\t/**\n\t * Assigns the data of the expanded JSON-LD object to the target object in a friendly mode.\n\t * i.e. without the JSON-LD Syntax Tokens and parsed values, in accordance to the schema provided.\n\t * @param expandedObject The JSON-LD object to compact.\n\t * @param targetObject The target object where will be added the compact data of the expanded object.\n\t * @param digestedSchema The schema that describes how compact the expanded object.\n\t * @param pointerLibrary An object from where one can obtain the pointers of resources.\n\t * @param strict Flag to ignore the compaction of properties that are not defined in the schema.\n\t */\n\tcompact( expandedObject:object, targetObject:object, digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary, strict?:boolean ):object;\n\t/**\n\t * Assigns the data of the expanded JSON-LD objects into new objects in a friendly mode.\n\t * i.e. without the JSON-LD Syntax Tokens and parsed values, in accordance to the schema provided.\n\t * @param expandedObjects The JSON-LD objects to compact.\n\t * @param digestedSchema The schema that describes how compact the expanded object.\n\t * @param pointerLibrary An object from where one can obtain the pointers of resources.\n\t */\n\tcompact( expandedObjects:object[], digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary ):object[];\n\t/**\n\t * Assigns the data of the expanded JSON-LD object into a new object in a friendly mode.\n\t * i.e. without the JSON-LD Syntax Tokens and parsed values, in accordance to the schema provided.\n\t * @param expandedObject The JSON-LD object to compact.\n\t * @param digestedSchema The schema that describes how compact the expanded object.\n\t * @param pointerLibrary An object from where one can obtain the pointers of resources.\n\t */\n\tcompact( expandedObject:object, digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary ):object;\n\tcompact( expandedObjectOrObjects:any, targetObjectOrObjectsOrDigestedContext:any, digestedSchemaOrPointerLibrary:any, pointerLibrary?:PointerLibrary | $PointerLibrary, strict?:boolean ):any {\n\t\tlet targetObjectOrObjects:any = ! pointerLibrary ? null : targetObjectOrObjectsOrDigestedContext;\n\t\tlet digestedSchema:any = ! pointerLibrary ? targetObjectOrObjectsOrDigestedContext : digestedSchemaOrPointerLibrary;\n\t\tpointerLibrary = ! pointerLibrary ? digestedSchemaOrPointerLibrary : pointerLibrary;\n\n\t\tif( ! Array.isArray( expandedObjectOrObjects ) ) return this.__compactSingle( expandedObjectOrObjects, targetObjectOrObjects, digestedSchema, pointerLibrary!, strict );\n\n\t\tlet expandedObjects:Object[] = expandedObjectOrObjects;\n\t\tlet targetObjects:Object[] = ! ! targetObjectOrObjects ? targetObjectOrObjects : [];\n\t\tfor( let i:number = 0, length:number = expandedObjects.length; i < length; i ++ ) {\n\t\t\tlet expandedObject:Object = expandedObjects[ i ];\n\t\t\tlet targetObject:Object = targetObjects[ i ] = ! ! targetObjects[ i ] ? targetObjects[ i ] : {};\n\n\t\t\tthis.__compactSingle( expandedObject, targetObject, digestedSchema, pointerLibrary!, strict );\n\t\t}\n\n\t\treturn targetObjects;\n\t}\n\n\t/**\n\t * Creates an expanded JSON-LD object from the compacted objects in accordance to the schema provided.\n\t * @param compactedObjects The compacted resources to expand.\n\t * @param generalSchema The general schema that applies to any compacted resource.\n\t * @param digestedSchema The specific schema that applies to the compacted resources.\n\t */\n\texpand( compactedObjects:object[], generalSchema:DigestedObjectSchema, digestedSchema:DigestedObjectSchema ):RDFNode[];\n\t/**\n\t * Creates an expanded JSON-LD object from the compacted object in accordance to the schema provided.\n\t * @param compactedObject The compacted resource to expand.\n\t * @param generalSchema The general schema that applies to any compacted resource.\n\t * @param digestedSchema The specific schema that applies to the compacted resource.\n\t */\n\texpand( compactedObject:object, generalSchema:DigestedObjectSchema, digestedSchema:DigestedObjectSchema ):RDFNode;\n\texpand( compactedObjectOrObjects:object[], generalSchema:DigestedObjectSchema, digestedSchema:DigestedObjectSchema ):any {\n\t\tif( ! Array.isArray( compactedObjectOrObjects ) ) return this.__expandSingle( compactedObjectOrObjects, generalSchema, digestedSchema );\n\t}\n\n\n\t/**\n\t * Compacts and updates the data of the expanded JSON-LD object into the target object.\n\t * i.e. without the JSON-LD Syntax Tokens and parsed values, in accordance to the schema provided.\n\t * @param target Object to be updated from the expanded one.\n\t * @param node The expanded object to be compacted and updated into the target\n\t * @param digestedSchema The schema that describes how compact the expanded object.\n\t * @param pointerLibrary An object from where one can obtain the pointers of resources.\n\t * @param strict Flag to ignore the compaction of properties that are not defined in the schema.\n\t */\n\tupdate( target:object, node:RDFNode, digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary, strict?:boolean ):void {\n\t\tconst compactedData:object = this.compact( node, {}, digestedSchema, pointerLibrary, strict );\n\n\t\tnew Set( [\n\t\t\t...Object.getOwnPropertyNames( target ),\n\t\t\t...Object.keys( compactedData ),\n\t\t] ).forEach( key => {\n\t\t\tif( key.startsWith( \"$\" ) ) return;\n\t\t\tif( isFunction( target[ key ] ) ) return;\n\n\t\t\tif( ! compactedData.hasOwnProperty( key ) ) {\n\t\t\t\tif( ! strict || digestedSchema.properties.has( key ) ) delete target[ key ];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif( ! Array.isArray( target[ key ] ) ) {\n\t\t\t\ttarget[ key ] = compactedData[ key ];\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst values:any[] = Array.isArray( compactedData[ key ] ) ? compactedData[ key ] : [ compactedData[ key ] ];\n\t\t\ttarget[ key ].length = 0;\n\t\t\ttarget[ key ].push( ...values );\n\t\t} );\n\t}\n\n\n\tprivate __expandSingle( compactedObject:Object, generalSchema:DigestedObjectSchema, digestedSchema:DigestedObjectSchema ):RDFNode {\n\t\tlet expandedObject:any = {};\n\n\t\texpandedObject[ \"@id\" ] = ! ! compactedObject[ \"$id\" ] ? compactedObject[ \"$id\" ] : \"\";\n\n\t\tif( compactedObject[ \"types\" ] ) {\n\t\t\tconst types:string[] = Array.isArray( compactedObject[ \"types\" ] ) ?\n\t\t\t\tcompactedObject[ \"types\" ] : [ compactedObject[ \"types\" ] ];\n\n\t\t\tif( types.length )\n\t\t\t\texpandedObject[ \"@type\" ] = types\n\t\t\t\t\t.map( type => generalSchema.resolveURI( type, { vocab: true, base: true } ) );\n\t\t}\n\n\t\tfor( const propertyName of Object.keys( compactedObject ) ) {\n\t\t\tif( propertyName === \"$id\" ) continue;\n\t\t\tif( propertyName === \"types\" ) continue;\n\n\t\t\tconst expandedPropertyName:string = digestedSchema.resolveURI( propertyName, { vocab: true } );\n\t\t\tif( URI.isRelative( expandedPropertyName ) ) continue;\n\n\t\t\tconst expandedValue:any[] | null = this.__expandProperty( propertyName, compactedObject[ propertyName ], digestedSchema, generalSchema );\n\t\t\tif( expandedValue === null ) continue;\n\n\t\t\texpandedObject[ expandedPropertyName ] = expandedValue;\n\t\t}\n\n\t\treturn expandedObject;\n\t}\n\n\tprivate __expandProperty( propertyName:string, propertyValue:any, digestedSchema:DigestedObjectSchema, generalSchema:DigestedObjectSchema ):any[] | null {\n\t\tconst definition:DigestedObjectSchemaProperty | undefined = digestedSchema.properties.get( propertyName );\n\n\t\tconst propertyContainer:ContainerType | undefined | null = definition ? definition.containerType : void 0;\n\t\tif( propertyContainer === ContainerType.LANGUAGE ) return this.__expandPropertyLanguageMap( propertyValue );\n\n\t\tpropertyValue = Array.isArray( propertyValue ) ? propertyValue : [ propertyValue ];\n\t\tif( propertyContainer === null ) propertyValue = [ propertyValue[ 0 ] ];\n\n\t\tconst propertyType:boolean | null = definition ? definition.literal : null;\n\t\tconst expandedValues:any[] = propertyType === true ?\n\t\t\tthis.__expandPropertyLiteral( propertyValue, definition!, digestedSchema ) :\n\t\t\tpropertyType === false ?\n\t\t\t\tthis.__expandPropertyPointer( propertyValue, digestedSchema, generalSchema ) :\n\t\t\t\tthis.__expandPropertyValue( propertyValue, digestedSchema, generalSchema )\n\t\t;\n\n\t\tconst filteredValues:any[] = expandedValues.filter( value => value !== null );\n\t\tif( ! filteredValues.length ) return null;\n\n\t\tif( propertyContainer === ContainerType.LIST ) return [\n\t\t\t{ \"@list\": filteredValues },\n\t\t];\n\n\t\treturn filteredValues;\n\t}\n\n\tprivate __expandPropertyValue( propertyValue:any[], digestedSchema:DigestedObjectSchema, generalSchema:DigestedObjectSchema ):any[] {\n\t\treturn propertyValue.map( value => this.__expandValue( value, digestedSchema, generalSchema ) );\n\t}\n\n\tprivate __expandPropertyPointer( propertyValue:any[], digestedSchema:DigestedObjectSchema, generalSchema:DigestedObjectSchema ):any[] {\n\t\treturn propertyValue.map( value => this.__expandPointerValue( value, digestedSchema, generalSchema ) );\n\t}\n\n\tprivate __expandPropertyLiteral( propertyValue:any[], definition:DigestedObjectSchemaProperty, digestedSchema:DigestedObjectSchema ):any[] {\n\t\tconst literalType:string = digestedSchema.resolveURI( definition.literalType!, { vocab: true, base: true } );\n\t\tconst expandedValues:any[] = propertyValue.map( value => this.__expandLiteralValue( value, literalType ) );\n\n\t\tif( definition.language ) expandedValues.forEach( value => value[ \"@language\" ] = definition.language );\n\n\t\treturn expandedValues;\n\t}\n\n\tprivate __expandPropertyLanguageMap( propertyValue:any ):any {\n\t\tif( ! isObject( propertyValue ) ) {\n\t\t\t// TODO: Warn of data loss\n\t\t\treturn null;\n\t\t}\n\n\t\tlet mapValues:Array<any> = [];\n\t\tfor( const languageTag of Object.keys( propertyValue ) ) {\n\t\t\t// TODO: Validate language tags\n\n\t\t\tlet serializedValue:string = this.literalSerializers.get( XSD.string )!.serialize( propertyValue[ languageTag ] );\n\t\t\tmapValues.push( { \"@value\": serializedValue, \"@type\": XSD.string, \"@language\": languageTag } );\n\t\t}\n\n\t\treturn mapValues;\n\t}\n\n\tprivate __expandPointerValue( propertyValue:any, digestedSchema:DigestedObjectSchema, generalSchema:DigestedObjectSchema ):RDFNode | null {\n\t\tconst isStringID:boolean = isString( propertyValue );\n\t\tconst id:string = Pointer.is( propertyValue ) ?\n\t\t\tpropertyValue.$id :\n\t\t\tisStringID ?\n\t\t\t\tpropertyValue :\n\t\t\t\tnull;\n\n\t\t// TODO: Warn of data loss\n\t\tif( ! id ) return null;\n\n\t\tconst resolved:string = generalSchema.resolveURI( id, { vocab: isStringID } );\n\t\treturn { \"@id\": resolved };\n\t}\n\n\tprivate __expandValue( propertyValue:any, digestedSchema:DigestedObjectSchema, generalSchema:DigestedObjectSchema ):any {\n\t\t// TODO: Lists of lists are not currently supported by the spec\n\t\tif( Array.isArray( propertyValue ) ) return null;\n\n\t\treturn Pointer.is( propertyValue ) ?\n\t\t\tthis.__expandPointerValue( propertyValue, generalSchema, digestedSchema ) :\n\t\t\tthis.__expandLiteralValue( propertyValue, _guessXSDType( propertyValue ) )\n\t\t\t;\n\t}\n\n\tprivate __expandLiteralValue( literalValue:any, literalType:string | null ):any | null {\n\t\tif( literalType === null ) return null;\n\n\t\t// TODO: Warn of data loss\n\t\tif( ! this.literalSerializers.has( literalType ) ) return null;\n\n\t\tconst serializedValue:string = this.literalSerializers\n\t\t\t.get( literalType )!\n\t\t\t.serialize( literalValue );\n\t\treturn { \"@value\": serializedValue, \"@type\": literalType };\n\t}\n\n\n\tprivate __compactSingle( expandedObject:any, targetObject:any, digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary, strict?:boolean ):void {\n\t\tif( ! expandedObject[ \"@id\" ] ) throw new IllegalArgumentError( \"The expandedObject doesn't have an @id defined.\" );\n\n\t\ttargetObject[ \"$id\" ] = expandedObject[ \"@id\" ];\n\t\ttargetObject[ \"types\" ] = ! ! expandedObject[ \"@type\" ] ? expandedObject[ \"@type\" ] : [];\n\n\t\tconst propertyURINameMap:Map<string, string> = this.__getPropertyURINameMap( digestedSchema );\n\t\tfor( const propertyURI of Object.keys( expandedObject ) ) {\n\t\t\tif( propertyURI === \"@id\" ) continue;\n\t\t\tif( propertyURI === \"@type\" ) continue;\n\n\t\t\tconst propertyValues:any[] = expandedObject[ propertyURI ];\n\t\t\tif( ! _isExistingValue( propertyValues ) ) continue;\n\n\t\t\tif( ! propertyURINameMap.has( propertyURI ) && strict ) continue;\n\n\t\t\tconst propertyName:string = propertyURINameMap.has( propertyURI ) ?\n\t\t\t\tpropertyURINameMap.get( propertyURI )! :\n\t\t\t\tdigestedSchema.vocab ?\n\t\t\t\t\tURI.getRelativeURI( propertyURI, digestedSchema.vocab ) :\n\t\t\t\t\tpropertyURI\n\t\t\t;\n\n\t\t\tconst targetValue:any = this.__getPropertyValue( propertyName, propertyValues, digestedSchema, pointerLibrary );\n\t\t\tif( targetValue === null || targetValue === void 0 ) continue;\n\n\t\t\ttargetObject[ propertyName ] = targetValue;\n\t\t}\n\n\t\treturn targetObject;\n\t}\n\n\tprivate __getPropertyContainerType( propertyValues:any ):ContainerType | null {\n\t\tif( propertyValues.length === 1 ) {\n\t\t\tif( RDFList.is( propertyValues[ 0 ] ) ) return ContainerType.LIST;\n\t\t} else {\n\t\t\treturn ContainerType.SET;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate __getPropertyValue( propertyName:string, propertyValues:any[], digestedSchema:DigestedObjectSchema, pointerLibrary:PointerLibrary | $PointerLibrary ):any {\n\t\tconst definition:DigestedObjectSchemaProperty | undefined = digestedSchema.properties.get( propertyName );\n\t\tconst propertyContainer:ContainerType | null = definition ?\n\t\t\tdefinition.containerType :\n\t\t\tthis.__getPropertyContainerType( propertyValues );\n\n\t\tif( propertyContainer === ContainerType.LANGUAGE ) {\n\t\t\treturn RDFNode.getPropertyLanguageMap( propertyValues );\n\t\t}\n\n\t\tif( propertyContainer === ContainerType.LIST ) {\n\t\t\tconst list:RDFList | undefined = RDFNode.getList( propertyValues );\n\n\t\t\tif( ! list ) return null;\n\t\t\tpropertyValues = list[ \"@list\" ];\n\t\t}\n\n\t\tconst propertyType:boolean | null = definition ? definition.literal : null;\n\n\t\tif( propertyType === true && (definition && definition.language) ) {\n\t\t\tpropertyValues = propertyValues.filter( value => value[ \"@language\" ] === definition.language );\n\t\t}\n\n\t\tif( propertyContainer === null ) propertyValues = [ propertyValues[ 0 ] ];\n\n\t\tconst compactedValues:any[] | undefined = propertyType === true ?\n\t\t\tthis.__compactPropertyLiteral( propertyValues, definition!, digestedSchema ) :\n\t\t\tpropertyType === false ?\n\t\t\t\tthis.__getPropertyPointers( propertyValues, pointerLibrary ) :\n\t\t\t\tthis.__getProperties( propertyValues, pointerLibrary )\n\t\t;\n\t\tif( ! compactedValues ) return null;\n\n\t\tconst filteredValues:any[] = compactedValues.filter( value => value !== null );\n\t\tif( ! filteredValues.length ) return null;\n\n\t\tif( propertyContainer === null ) return filteredValues[ 0 ];\n\t\treturn filteredValues;\n\t}\n\n\tprivate __getPropertyURINameMap( digestedSchema:DigestedObjectSchema ):Map<string, string> {\n\t\tconst map:Map<string, string> = new Map<string, string>();\n\t\tdigestedSchema.properties.forEach( ( definition:DigestedObjectSchemaProperty, propertyName:string ):void => {\n\t\t\tconst uri:string = digestedSchema.resolveURI( definition.uri!, { vocab: true } );\n\t\t\tmap.set( uri, propertyName );\n\t\t} );\n\t\treturn map;\n\t}\n\n\tprivate __compactPropertyLiteral( propertyValues:any[], definition:DigestedObjectSchemaProperty, digestedSchema:DigestedObjectSchema ):any[] | undefined {\n\t\tconst literalType:string = definition.literalType === null ?\n\t\t\tXSD.string : digestedSchema.resolveURI( definition.literalType, { vocab: true, base: true } );\n\n\t\treturn RDFNode.getPropertyLiterals( propertyValues, literalType );\n\t}\n\n\tprivate __getProperties( propertyValues:any[], pointerLibrary:PointerLibrary | $PointerLibrary ):any[] | undefined {\n\t\tif( ! Array.isArray( propertyValues ) ) return;\n\n\t\treturn propertyValues\n\t\t\t.map( RDFValue.parse.bind( null, pointerLibrary ) )\n\t\t\t.filter( value => ! isNull( value ) )\n\t\t\t;\n\t}\n\n\tprivate __getPropertyPointers( propertyValues:any[], pointerLibrary:PointerLibrary | $PointerLibrary ):any[] | undefined {\n\t\tif( ! Array.isArray( propertyValues ) ) return;\n\n\t\treturn propertyValues\n\t\t\t.filter( RDFNode.is )\n\t\t\t.map( RDFNode.getID )\n\t\t\t.map( _getPointer.bind( null, pointerLibrary ) )\n\t\t\t.filter( pointer => ! isNull( pointer ) )\n\t\t\t;\n\t}\n\n}\n"],"sourceRoot":"../../src"}