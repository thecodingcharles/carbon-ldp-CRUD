import { isFunction } from "../Utils";
export const ModelDecorator = {
    hasPropertiesFrom(prototype, object) {
        const prototypeKeys = Object
            .keys(prototype);
        const shouldAddDollar = "$id" in object
            && !prototypeKeys.some(key => key.startsWith("$"));
        return prototypeKeys
            .every(key => {
            const targetKey = shouldAddDollar ?
                "$" + key : key;
            const definition = Object
                .getOwnPropertyDescriptor(prototype, key);
            if (!definition)
                return false;
            const targetDefinition = Object
                .getOwnPropertyDescriptor(object, targetKey);
            if (!targetDefinition)
                return false;
            if (isFunction(definition.value))
                return isFunction(targetDefinition.value);
            return !targetDefinition.enumerable;
        });
    },
    definePropertiesFrom(prototype, object) {
        const prototypeKeys = Object
            .keys(prototype);
        const shouldAddDollar = "$id" in object
            && !prototypeKeys.some(key => key.startsWith("$"));
        prototypeKeys
            .forEach(key => {
            const targetKey = shouldAddDollar ?
                "$" + key : key;
            const definition = Object
                .getOwnPropertyDescriptor(prototype, key);
            const descriptor = {
                enumerable: false,
                configurable: true,
            };
            if (isFunction(definition.value)) {
                descriptor.writable = false;
                descriptor.value = definition.value;
            }
            else if (!definition.set) {
                descriptor.writable = true;
                descriptor.value = object.hasOwnProperty(targetKey) ?
                    object[targetKey] : definition.get ?
                    definition.get() : definition.value;
            }
            else {
                descriptor.get = definition.get;
                descriptor.set = definition.set;
            }
            Object.defineProperty(object, targetKey, descriptor);
        });
        return object;
    },
    decorateMultiple(object, ...models) {
        models.forEach(model => model.decorate(object));
        return object;
    },
};

//# sourceMappingURL=ModelDecorator.js.map
