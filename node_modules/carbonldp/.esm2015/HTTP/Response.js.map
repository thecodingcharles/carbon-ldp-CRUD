{"version":3,"sources":["HTTP/Response.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,gBAAgB,EAAE,MAAM,wCAAwC,CAAC;AAC1E,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAMlC,MAAM,OAAO,QAAQ;IA8BpB,YAAa,OAAsC,EAAE,IAAY,EAAE,QAAyB;QAC3F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,OAAO,cAAc,KAAK,WAAW,IAAI,OAAO,YAAY,cAAc,EAAG;YAChF,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC;YACjC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,YAAY,CAAE,OAAO,CAAC,qBAAqB,EAAE,CAAE,CAAC;SAEtE;aAAM;YACN,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,QAAQ,IAAI,QAAQ,CAAC,UAAU,IAAI,CAAC,CAAC;YAEnD,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAkB,CAAC;YACzC,IAAI,CAAE,QAAQ;gBAAG,OAAO;YAExB,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,OAAO,EAAG;gBACrC,MAAM,MAAM,GAAU,IAAI,MAAM,CAAE,QAAQ,CAAC,OAAO,CAAE,IAAI,CAAE,CAAE,CAAC;gBAC7D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAE,IAAI,CAAC,WAAW,EAAE,EAAE,MAAM,CAAE,CAAC;aAC/C;SACD;IACF,CAAC;IAOD,SAAS,CAAE,IAAW;QACrB,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAE,IAAI,CAAE,IAAI,IAAI,CAAC;IACzC,CAAC;IAMD,OAAO;QACN,MAAM,UAAU,GAAiB,IAAI,CAAC,SAAS,CAAE,MAAM,CAAE,CAAC;QAG1D,IAAI,CAAE,UAAU,IAAI,CAAE,UAAU,CAAC,MAAM,CAAC,MAAM;YAC7C,MAAM,IAAI,gBAAgB,CAAE,sCAAsC,EAAE,IAAI,CAAE,CAAC;QAE5E,OAAO,UAAU,CAAC,MAAM,CAAE,CAAC,CAAE,CAAC;IAC/B,CAAC;CAED","file":"Response.js","sourcesContent":["import { ClientRequest, IncomingMessage } from \"http\";\n\nimport { BadResponseError } from \"./Errors/ServerErrors/BadResponseError\";\nimport { Header } from \"./Header\";\n\n\n/**\n * Class that represents an HTTP response.\n */\nexport class Response {\n\t/**\n\t * The status code of the request.\n\t */\n\treadonly status:number;\n\t/**\n\t * The RAW body of the request.\n\t */\n\treadonly data:string;\n\t/**\n\t * A map object containing the headers of the request's response.\n\t */\n\treadonly headers:Map<string, Header>;\n\t/**\n\t * The XMLHttpRequest or ClientRequest provided in the constructor.\n\t */\n\treadonly request:XMLHttpRequest | ClientRequest;\n\n\t/**\n\t * Creates an instance from a XMLHttpRequest.\n\t * @param request The XMLHttpRequest used in the Browser request.\n\t */\n\tconstructor( request:XMLHttpRequest );\n\t/**\n\t * Creates an instance from a ClientRequest, a data and an IncomingMessage.\n\t * @param request The ClientRequest used in the Node.js request.\n\t * @param data The full data received in the Node.js request.\n\t * @param response The IncomingMessage of the Node.js request.\n\t */\n\tconstructor( request:ClientRequest, data:string, response?:IncomingMessage );\n\tconstructor( request:XMLHttpRequest | ClientRequest, data?:string, response?:IncomingMessage ) {\n\t\tthis.request = request;\n\t\tif( typeof XMLHttpRequest !== \"undefined\" && request instanceof XMLHttpRequest ) {\n\t\t\tthis.status = request.status;\n\t\t\tthis.data = request.responseText;\n\t\t\tthis.headers = Header.parseHeaders( request.getAllResponseHeaders() );\n\n\t\t} else {\n\t\t\tthis.data = data || \"\";\n\t\t\tthis.status = response && response.statusCode || 0;\n\n\t\t\tthis.headers = new Map<string, Header>();\n\t\t\tif( ! response ) return;\n\n\t\t\tfor( const name in response.headers ) {\n\t\t\t\tconst header:Header = new Header( response.headers[ name ] );\n\t\t\t\tthis.headers.set( name.toLowerCase(), header );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Header object referred by the name specified.\n\t * If no header exists `null` will be returned.\n\t * @param name The name of the header to look for.\n\t */\n\tgetHeader( name:string ):Header | null {\n\t\tname = name.toLowerCase();\n\t\treturn this.headers.get( name ) || null;\n\t}\n\n\t/**\n\t * Returns the eTag header value.\n\t * If no such header exists a {@link BadResponseError} will be thrown.\n\t */\n\tgetETag():string {\n\t\tconst eTagHeader:Header | null = this.getHeader( \"ETag\" );\n\n\t\t// TODO: Warn multiple ETags\n\t\tif( ! eTagHeader || ! eTagHeader.values.length )\n\t\t\tthrow new BadResponseError( \"The response doesn't contain an ETag\", this );\n\n\t\treturn eTagHeader.values[ 0 ];\n\t}\n\n}\n"],"sourceRoot":"../../src"}