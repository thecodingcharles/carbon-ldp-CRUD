{"version":3,"sources":["HTTP/Header.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAC;AAKtE,MAAM,OAAO,MAAM;IAUlB,MAAM,CAAC,YAAY,CAAE,aAAoB;QACxC,MAAM,OAAO,GAAuB,IAAI,GAAG,EAAkB,CAAC;QAE9D,aAAa,CAAC,KAAK,CAAE,OAAO,CAAE,CAAC,OAAO,CAAE,SAAS,CAAC,EAAE;YACnD,IAAI,CAAE,SAAS,CAAC,IAAI,EAAE;gBAAG,OAAO;YAEhC,MAAM,KAAK,GAAY,SAAS,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC;YAC9C,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;gBAAG,MAAM,IAAI,oBAAoB,CAAE,gCAAgC,CAAE,CAAC;YAE1F,MAAM,IAAI,GAAU,KAAK,CAAE,CAAC,CAAE,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACpD,MAAM,MAAM,GAAY,MAAM,CAAC,aAAa,CAAE,KAAK,CAAC,KAAK,CAAE,CAAC,CAAE,CAAC,IAAI,CAAE,GAAG,CAAE,CAAE,CAAC;YAE7E,IAAI,OAAO,CAAC,GAAG,CAAE,IAAI,CAAE,EAAG;gBACzB,OAAO,CAAC,GAAG,CAAE,IAAI,CAAG,CAAC,MAAM,CAAC,IAAI,CAAE,GAAG,MAAM,CAAE,CAAC;aAC9C;iBAAM;gBACN,OAAO,CAAC,GAAG,CAAE,IAAI,EAAE,IAAI,MAAM,CAAE,MAAM,CAAE,CAAE,CAAC;aAC1C;QACF,CAAC,CAAE,CAAC;QAEJ,OAAO,OAAO,CAAC;IAChB,CAAC;IAEO,MAAM,CAAC,aAAa,CAAE,SAA4B;QACzD,IAAI,CAAE,SAAS;YAAG,OAAO,EAAE,CAAC;QAE5B,OAAO,SAAS;aACd,KAAK,CAAE,GAAG,CAAE;aACZ,GAAG,CAAE,WAAW,CAAC,EAAE;YACnB,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAC,CAAE,CACF;IACH,CAAC;IAOD,YAAa,MAA2B;QACvC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAE,MAAM,CAAE,CAAC,CAAC;YACtC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAE,MAAM,CAAE,CAAC;IAC1C,CAAC;IAMD,QAAQ,CAAE,KAAY;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,KAAK,CAAE,KAAK,CAAE,CAAC,CAAC;IAC7C,CAAC;IAMD,QAAQ,CAAE,KAAY;QACrB,MAAM,SAAS,GAAY,MAAM,CAAC,aAAa,CAAE,KAAK,CAAE,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,GAAG,SAAS,CAAE,CAAC;IAClC,CAAC;IAKD,QAAQ;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IACjC,CAAC;CACD","file":"Header.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\n/**\n * Class to manage the values in an HTTP header.\n */\nexport class Header {\n\t/**\n\t * Array with each value of the header.\n\t */\n\treadonly values:string[];\n\n\t/**\n\t * Returns a Map which relates all header names with a {@link Header} object containing their values.\n\t * @param headersString The string to be parsed into a map of name -> Header.\n\t */\n\tstatic parseHeaders( headersString:string ):Map<string, Header> {\n\t\tconst headers:Map<string, Header> = new Map<string, Header>();\n\n\t\theadersString.split( /\\r?\\n/ ).forEach( strHeader => {\n\t\t\tif( ! strHeader.trim() ) return;\n\n\t\t\tconst parts:string[] = strHeader.split( \":\" );\n\t\t\tif( parts.length < 2 ) throw new IllegalArgumentError( \"The header couldn't be parsed.\" );\n\n\t\t\tconst name:string = parts[ 0 ].trim().toLowerCase();\n\t\t\tconst values:string[] = Header.__parseValues( parts.slice( 1 ).join( \":\" ) );\n\n\t\t\tif( headers.has( name ) ) {\n\t\t\t\theaders.get( name )!.values.push( ...values );\n\t\t\t} else {\n\t\t\t\theaders.set( name, new Header( values ) );\n\t\t\t}\n\t\t} );\n\n\t\treturn headers;\n\t}\n\n\tprivate static __parseValues( strValues:string | undefined ):string[] {\n\t\tif( ! strValues ) return [];\n\n\t\treturn strValues\n\t\t\t.split( \",\" )\n\t\t\t.map( valueString => {\n\t\t\t\treturn valueString.trim();\n\t\t\t} )\n\t\t\t;\n\t}\n\n\t/**\n\t * Create an instance with an array of values or a string that will be parsed\n\t * into the multiple values that may contain.\n\t * @param values The array of values of the string to be parsed.\n\t */\n\tconstructor( values?:(string | string[]) ) {\n\t\tthis.values = Array.isArray( values ) ?\n\t\t\tvalues : Header.__parseValues( values );\n\t}\n\n\t/**\n\t * Returns true when the specified value exists in the values stored.\n\t * @param value The value to check if is stored.\n\t */\n\thasValue( value:string ):boolean {\n\t\treturn this.values.indexOf( value ) !== - 1;\n\t}\n\n\t/**\n\t * Parse and add the string value(s) into the current header.\n\t * @param value Value or values to add.\n\t */\n\taddValue( value:string ):void {\n\t\tconst newValues:string[] = Header.__parseValues( value );\n\t\tthis.values.push( ...newValues );\n\t}\n\n\t/**\n\t * Returns the string representation of all the values of the headers.\n\t */\n\ttoString():string {\n\t\treturn this.values.join( \", \" );\n\t}\n}\n"],"sourceRoot":"../../src"}