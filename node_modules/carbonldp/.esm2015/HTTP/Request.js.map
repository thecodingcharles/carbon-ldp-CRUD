{"version":3,"sources":["HTTP/Request.ts"],"names":[],"mappings":"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","file":"Request.js","sourcesContent":["import HTTP from \"http\";\nimport HTTPS from \"https\";\nimport URL from \"url\";\n\nimport { hasProperty, hasPropertyDefined, isNumber, isString } from \"../Utils\";\n\nimport { HTTPError } from \"./Errors/HTTPError\";\nimport { statusCodeMap } from \"./Errors/index\";\nimport { BadResponseError } from \"./Errors/ServerErrors/BadResponseError\";\nimport { UnknownError } from \"./Errors/UnknownError\";\n\nimport { Header } from \"./Header\";\nimport { HTTPMethod } from \"./HTTPMethod\";\nimport { Parser } from \"./Parser\";\nimport { Response } from \"./Response\";\n\n\n/**\n * Customizable options that can change the behaviour of a request.\n */\nexport interface RequestOptions {\n\t/**\n\t * Map that contains the headers to include in the request.\n\t */\n\theaders?:Map<string, Header>;\n\t/**\n\t * Flag that enables Cross-Origin Resource Sharing (CORS).\n\t */\n\tsendCredentialsOnCORS?:boolean;\n\t/**\n\t * Timeout of the request.\n\t */\n\ttimeout?:number;\n\t/**\n\t * Specific XMLHttpRequest to be used for the request.\n\t */\n\trequest?:XMLHttpRequest;\n}\n\n/**\n * Customizable options for a `GET` request.\n */\nexport interface GETOptions extends RequestOptions {\n\t/**\n\t * Flag that ignores the cache of the SDK and ensures to make a request.\n\t */\n\tensureLatest?:boolean;\n}\n\n/**\n * Object used by {@link RequestUtils.setRetrievalPreferences()}\n * which specifies the behaviour of a request when using an `ldp:Container` interaction model.\n */\nexport interface RetrievalPreferences {\n\t/**\n\t * Prefer URIs that indicates some specific information should be returned in the request's response.\n\t */\n\tinclude?:string[];\n\t/**\n\t * Prefer URIs that indicates some specific information should NOT be included in the request's response.\n\t */\n\tomit?:string[];\n}\n\ntype ResolveCallback = ( response:Response ) => void;\ntype RejectCallback = ( error:HTTPError ) => void;\n\nfunction __onResolve( resolve:ResolveCallback, reject:RejectCallback, response:Response ):void {\n\tif( response.status >= 200 && response.status <= 299 ) {\n\t\tresolve( response );\n\t} else {\n\t\tif( ! statusCodeMap.has( response.status ) )\n\t\t\treturn reject( new UnknownError( response.data, response ) );\n\n\t\treject( new (statusCodeMap.get( response.status )!)( response.data, response ) );\n\t}\n}\n\nfunction __sendWithBrowser( method:string, url:string, body:string | Blob, options:RequestOptions ):Promise<Response> {\n\treturn new Promise<Response>( ( resolve:ResolveCallback, reject:RejectCallback ):void => {\n\t\tlet request:XMLHttpRequest = options.request ? options.request : new XMLHttpRequest();\n\t\trequest.open( method, url, true );\n\n\t\tif( options.headers ) options.headers\n\t\t\t.forEach( ( header:Header, name:string ) => request.setRequestHeader( name, header.toString() ) );\n\n\t\trequest.withCredentials = ! ! options.sendCredentialsOnCORS;\n\t\tif( options.timeout ) request.timeout = options.timeout;\n\n\t\trequest.onload = request.onerror = () => {\n\t\t\tlet response:Response = new Response( request );\n\t\t\t__onResolve( resolve, reject, response );\n\t\t};\n\n\t\tif( body ) {\n\t\t\trequest.send( body );\n\t\t} else {\n\t\t\trequest.send();\n\t\t}\n\t} );\n}\n\nfunction __sendWithNode( method:string, url:string, body:string | Buffer, options:RequestOptions ):Promise<Response> {\n\treturn new Promise<Response>( ( resolve:ResolveCallback, reject:RejectCallback ):void => {\n\t\tfunction returnResponse( request:HTTP.ClientRequest, res:HTTP.IncomingMessage ):void {\n\t\t\tlet rawData:Buffer[] = [];\n\n\t\t\tres.on( \"data\", ( chunk:string | Buffer ):void => {\n\t\t\t\tif( typeof chunk === \"string\" ) chunk = Buffer.from( <any>chunk, \"utf-8\" );\n\t\t\t\trawData.push( chunk );\n\t\t\t} ).on( \"end\", () => {\n\t\t\t\tlet data:string = Buffer.concat( rawData ).toString( \"utf8\" );\n\t\t\t\tlet response:Response = new Response( request, data, res );\n\n\t\t\t\t__onResolve( resolve, reject, response );\n\t\t\t} );\n\t\t}\n\n\t\tlet numberOfRedirects:number = 0;\n\n\t\tfunction sendRequestWithRedirect( _url:string ):void {\n\t\t\tlet parsedURL:URL.Url = URL.parse( _url );\n\t\t\tlet Adapter:any = parsedURL.protocol === \"http:\" ? HTTP : HTTPS;\n\n\t\t\tlet requestOptions:HTTP.RequestOptions = {\n\t\t\t\tprotocol: parsedURL.protocol,\n\t\t\t\thostname: parsedURL.hostname,\n\t\t\t\tport: parsedURL.port,\n\t\t\t\tpath: parsedURL.path,\n\t\t\t\tmethod: method,\n\t\t\t\theaders: {},\n\t\t\t};\n\n\t\t\tif( options.headers ) options.headers\n\t\t\t\t.forEach( ( header:Header, name:string ) => requestOptions.headers![ name ] = header.toString() );\n\n\t\t\tlet request:HTTP.ClientRequest = Adapter.request( requestOptions );\n\t\t\tif( options.timeout ) request.setTimeout( options.timeout );\n\t\t\trequest.on( \"response\", ( res:HTTP.IncomingMessage ) => {\n\t\t\t\tif( res.statusCode! >= 300 && res.statusCode! <= 399 && \"location\" in res.headers ) {\n\t\t\t\t\tif( ++ numberOfRedirects < 10 ) return sendRequestWithRedirect( URL.resolve( _url, res.headers!.location! ) );\n\t\t\t\t}\n\n\t\t\t\treturnResponse( request, res );\n\t\t\t} );\n\n\t\t\trequest.on( \"error\", ( error ) => {\n\t\t\t\tlet response:Response = new Response( request, error.message );\n\t\t\t\t__onResolve( resolve, reject, response );\n\t\t\t} );\n\n\t\t\tif( body ) {\n\t\t\t\t// Force to send body in `DELETE` (`RemoveMemberAction`)\n\t\t\t\tif( method === \"DELETE\" ) request.useChunkedEncodingByDefault = true;\n\t\t\t\trequest.write( body );\n\t\t\t}\n\n\t\t\trequest.end();\n\t\t}\n\n\t\tsendRequestWithRedirect( url );\n\n\t} );\n}\n\nfunction __sendRequest( method:string, url:string, body:string | Blob | Buffer | undefined, options:RequestOptions ):Promise<Response> {\n\treturn typeof XMLHttpRequest !== \"undefined\" ?\n\t\t__sendWithBrowser( method, url, <string | Blob>body, options ) :\n\t\t__sendWithNode( method, url, <string | Buffer>body, options );\n}\n\nfunction __isBody( data:string | Blob | Buffer ):boolean {\n\treturn isString( data )\n\t\t|| typeof Blob !== \"undefined\" && data instanceof Blob\n\t\t|| typeof Buffer !== \"undefined\" && data instanceof Buffer;\n}\n\n/**\n * Service with static methods to send HTTP request.\n */\nexport class RequestService {\n\tprivate static defaultOptions:RequestOptions = {\n\t\tsendCredentialsOnCORS: true,\n\t};\n\n\t/**\n\t * Generic send method, to be used by the others methods in the class.\n\t * @param method The method of the request to be sent.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic send( method:(HTTPMethod | string), url:string, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Generic send method, to be used by the others methods in the class.\n\t * @param method The method of the request to be sent.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic send( method:(HTTPMethod | string), url:string, body:string | Blob | Buffer, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Generic send method, to be used by the others methods in the class.\n\t * @param method The method of the request to be sent.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic send<T>( method:(HTTPMethod | string), url:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\t/**\n\t * Generic send method, to be used by the others methods in the class.\n\t * @param method The method of the request to be sent.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic send<T>( method:(HTTPMethod | string), url:string, body?:string | Blob | Buffer, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic send<T>( method:any, url:string, bodyOrOptions?:any, optionsOrParser?:any, parser?:Parser<T> ):any {\n\t\tlet body:string | Blob | Buffer | undefined = undefined;\n\t\tlet options:RequestOptions = hasProperty( optionsOrParser, \"parse\" ) ? bodyOrOptions : optionsOrParser;\n\t\tparser = hasProperty( optionsOrParser, \"parse\" ) ? optionsOrParser : parser;\n\n\t\tif( ! bodyOrOptions || __isBody( bodyOrOptions ) ) {\n\t\t\tbody = bodyOrOptions;\n\t\t} else {\n\t\t\toptions = bodyOrOptions ? bodyOrOptions : options;\n\t\t}\n\n\t\toptions = Object.assign( {}, RequestService.defaultOptions, options );\n\n\t\tif( isNumber( method ) ) method = HTTPMethod[ method ];\n\n\t\tconst requestPromise:Promise<Response> = __sendRequest( method, url, body, options )\n\t\t\t.then( response => {\n\t\t\t\tif( method === \"GET\" && options.headers ) return this.__handleGETResponse( url, options, response );\n\t\t\t\telse return response;\n\t\t\t} )\n\t\t;\n\n\t\tif( ! parser ) return requestPromise;\n\n\t\treturn requestPromise.then( ( response:Response ) => {\n\t\t\treturn parser!.parse( response.data ).then( ( parsedBody:T ) => {\n\t\t\t\treturn [ parsedBody, response ];\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Sends an `OPTIONS` request.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic options( url:string, options:RequestOptions = RequestService.defaultOptions ):Promise<Response> {\n\t\treturn RequestService.send( HTTPMethod.OPTIONS, url, options );\n\t}\n\n\t/**\n\t * Sends an `HEAD` request.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic head( url:string, options:RequestOptions = RequestService.defaultOptions ):Promise<Response> {\n\t\treturn RequestService.send( HTTPMethod.HEAD, url, options );\n\t}\n\n\t/**\n\t * Sends an `GET` request.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic get( url:string, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Sends an `GET` request and parses its response data.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic get<T>( url:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic get<T>( url:string, options:RequestOptions = RequestService.defaultOptions, parser?:Parser<T> ):any {\n\t\treturn RequestService.send( HTTPMethod.GET, url, undefined, options, parser );\n\t}\n\n\t/**\n\t * Sends an `POST` request.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic post( url:string, body:string | Blob | Buffer, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Sends an `POST` request and parses its response data.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic post<T>( url:string, body:string | Blob | Buffer, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic post<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, options:RequestOptions = RequestService.defaultOptions, parser?:Parser<T> ):any {\n\t\treturn RequestService.send( HTTPMethod.POST, url, bodyOrOptions, options, parser );\n\t}\n\n\t/**\n\t * Sends an `PUT` request.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic put( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Sends an `PUT` request and parses its response data.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic put<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic put<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, options:RequestOptions = RequestService.defaultOptions, parser?:Parser<T> ):any {\n\t\treturn RequestService.send( HTTPMethod.PUT, url, bodyOrOptions, options, parser );\n\t}\n\n\t/**\n\t * Sends an `PATCH` request.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic patch( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Sends an `PATCH` request and parses its response data.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic patch<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic patch<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, options:RequestOptions = RequestService.defaultOptions, parser?:Parser<T> ):any {\n\t\treturn RequestService.send( HTTPMethod.PATCH, url, bodyOrOptions, options, parser );\n\t}\n\n\t/**\n\t * Sends an `DELETE` request.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic delete( url:string, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Sends an `DELETE` request.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t */\n\tstatic delete( url:string, body:string, options?:RequestOptions ):Promise<Response>;\n\t/**\n\t * Sends an `DELETE` request and parses its response data.\n\t * @param url URL of the request to be sent.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic delete<T>( url:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\t/**\n\t * Sends an `DELETE` request and parses its response data.\n\t * @param url URL of the request to be sent.\n\t * @param body Body to be sent int he request.\n\t * @param options Customizable options for the request.\n\t * @param parser Parser to be used in the response body of the request.\n\t */\n\tstatic delete<T>( url:string, body:string, options?:RequestOptions, parser?:Parser<T> ):Promise<[ T, Response ]>;\n\tstatic delete<T>( url:string, bodyOrOptions:any = RequestService.defaultOptions, optionsOrParser:any = RequestService.defaultOptions, parser?:Parser<T> ):any {\n\t\treturn RequestService.send( HTTPMethod.DELETE, url, bodyOrOptions, optionsOrParser, parser );\n\t}\n\n\t/**\n\t * GET requests can be affected by previously cached resources that were originally requested with a different Accept header.\n\t * This method identifies that and retries the request with headers that force browsers to ignore cache.\n\t */\n\tprivate static __handleGETResponse( url:string, requestOptions:RequestOptions, response:Response ):Promise<Response> {\n\t\treturn Promise.resolve()\n\t\t\t.then( () => {\n\t\t\t\tif( this.__contentTypeIsAccepted( requestOptions, response ) ) return response;\n\n\t\t\t\tthis.__setNoCacheHeaders( requestOptions );\n\n\t\t\t\tif( ! this.__isChromiumAgent() ) this.__setFalseETag( requestOptions );\n\n\t\t\t\treturn __sendRequest( \"GET\", url, undefined, requestOptions )\n\t\t\t\t\t.then( noCachedResponse => {\n\t\t\t\t\t\tif( ! this.__contentTypeIsAccepted( requestOptions, response ) ) {\n\t\t\t\t\t\t\tthrow new BadResponseError( \"The server responded with an unacceptable Content-Type\", response );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn noCachedResponse;\n\t\t\t\t\t} );\n\t\t\t} );\n\t}\n\n\tprivate static __contentTypeIsAccepted( requestOptions:RequestOptions, response:Response ):boolean {\n\t\tif( ! requestOptions.headers ) return true;\n\n\t\tconst accepts:string[] = requestOptions.headers.has( \"accept\" ) ?\n\t\t\trequestOptions.headers.get( \"accept\" )!.values :\n\t\t\t[]\n\t\t;\n\n\t\tconst contentType:Header | undefined = response.headers.has( \"content-type\" ) ?\n\t\t\tresponse.headers.get( \"content-type\" ) :\n\t\t\tundefined\n\t\t;\n\n\t\treturn ! contentType || accepts.some( contentType.hasValue, contentType );\n\t}\n\n\tprivate static __setNoCacheHeaders( requestOptions:RequestOptions ):void {\n\t\trequestOptions.headers!\n\t\t\t.set( \"pragma\", new Header( \"no-cache\" ) )\n\t\t\t.set( \"cache-control\", new Header( \"no-cache, max-age=0\" ) )\n\t\t;\n\t}\n\n\tprivate static __isChromiumAgent():boolean {\n\t\treturn typeof window !== \"undefined\" && ! ! window[ \"chrome\" ];\n\t}\n\n\tprivate static __setFalseETag( requestOptions:RequestOptions ):void {\n\t\trequestOptions.headers!.set( \"if-none-match\", new Header() );\n\t}\n}\n\n/**\n * Service with static utils methods for elements related to requests.\n */\nexport class RequestUtils {\n\n\t/**\n\t * Returns the header object inside an options object.\n\t * Returns `undefined` if the header doesn't exists.\n\t * If `initialize` flag is provided with true, an empty header will be created if not exits.\n\t * @param headerName The name of the header to return/create.\n\t * @param requestOptions The options where to look/create the header.\n\t * @param initialize Flag to create the header of not exists.\n\t */\n\tstatic getHeader( headerName:string, requestOptions:RequestOptions, initialize?:true ):Header | undefined {\n\t\tif( ! requestOptions.headers ) {\n\t\t\tif( ! initialize ) return undefined;\n\n\t\t\trequestOptions.headers = new Map();\n\t\t}\n\n\t\theaderName = headerName.toLowerCase();\n\t\tlet header:Header | undefined = requestOptions.headers!.get( headerName );\n\n\t\tif( ! header ) {\n\t\t\tif( ! initialize ) return undefined;\n\n\t\t\theader = new Header();\n\t\t\trequestOptions.headers!.set( headerName, header );\n\t\t}\n\n\t\treturn header;\n\t}\n\n\n\t/**\n\t * Sets an `accept` header in the options object request.\n\t * @param accept The `accept` header value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setAcceptHeader( accept:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tRequestUtils.__addHeaderValue( \"accept\", accept, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets a `content-type` header in the options object request.\n\t * @param contentType The `content-type` header value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setContentTypeHeader( contentType:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tRequestUtils.__addHeaderValue( \"content-type\", contentType, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets an `if-match` header in the options object request.\n\t * @param eTag The `if-match` header value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setIfMatchHeader( eTag:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tif( ! eTag ) return requestOptions;\n\n\t\tRequestUtils.__addHeaderValue( \"if-match\", eTag, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets an `if-none` header in the options object request.\n\t * @param eTag The `if-none` header value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setIfNoneMatchHeader( eTag:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tif( ! eTag ) return requestOptions;\n\n\t\tRequestUtils.__addHeaderValue( \"if-none-match\", eTag, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets a `prefer` header with `rel=interaction-model` in the options object request.\n\t * @param interactionModelURI The `interaction-model` value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setPreferredInteractionModel( interactionModelURI:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tconst headerValue:string = `${ interactionModelURI }; rel=interaction-model`;\n\t\tRequestUtils.__addHeaderValue( \"prefer\", headerValue, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets a `prefer` header with `return` in the options object request.\n\t * @param retrievalType The `return` value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setPreferredRetrieval( retrievalType:\"representation\" | \"minimal\", requestOptions:RequestOptions ):RequestOptions {\n\t\tconst headerValue:string = `return=${ retrievalType }`;\n\t\tRequestUtils.__addHeaderValue( \"prefer\", headerValue, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets a `prefer` header with `include/omit` preferences in the options object request.\n\t * @param preferences The preferences to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setRetrievalPreferences( preferences:RetrievalPreferences, requestOptions:RequestOptions ):RequestOptions {\n\t\tconst prefer:Header = RequestUtils.getHeader( \"prefer\", requestOptions, true )!;\n\n\t\tconst keys:string[] = [ \"include\", \"omit\" ];\n\t\tfor( const key of keys ) {\n\t\t\tif( ! (key in preferences) ) continue;\n\t\t\tif( preferences[ key ].length <= 0 ) continue;\n\n\t\t\tconst strPreferences:string = preferences[ key ].join( \" \" );\n\t\t\tprefer.values.push( `${ key }=\"${ strPreferences }\"` );\n\t\t}\n\n\t\treturn requestOptions;\n\t}\n\n\t/**\n\t * Sets an `slug` header in the options object request.\n\t * @param slug The `slug` header value to be set.\n\t * @param requestOptions The options where to set the header.\n\t */\n\tstatic setSlug( slug:string, requestOptions:RequestOptions ):RequestOptions {\n\t\tRequestUtils.__addHeaderValue( \"slug\", slug, requestOptions );\n\n\t\treturn requestOptions;\n\t}\n\n\n\t/**\n\t * Checks if the value provided can be considered a {@link RequestOptions}.\n\t * @param value The value to be checked.\n\t */\n\tstatic isOptions( value:any ):value is RequestOptions {\n\t\treturn hasPropertyDefined( value, \"headers\" )\n\t\t\t|| hasPropertyDefined( value, \"sendCredentialsOnCORS\" )\n\t\t\t|| hasPropertyDefined( value, \"timeout\" )\n\t\t\t|| hasPropertyDefined( value, \"request\" );\n\t}\n\n\t/**\n\t * Clones the options into a new object including coping the headers map into a different map.\n\t * @param options The options to be clones.\n\t */\n\tstatic cloneOptions( options:RequestOptions ):RequestOptions {\n\t\tconst clone:RequestOptions = {\n\t\t\t...options,\n\t\t\theaders: new Map(),\n\t\t};\n\n\t\tif( options.headers ) options.headers\n\t\t\t.forEach( ( value, key ) => clone.headers!.set( key, new Header( value.values.slice() ) ) );\n\n\t\treturn clone;\n\t}\n\n\n\tprivate static __addHeaderValue( headerName:string, headerValue:string, requestOptions:RequestOptions ):void {\n\t\tconst header:Header = RequestUtils.getHeader( headerName, requestOptions, true )!;\n\t\theader.addValue( headerValue );\n\t}\n\n}\n"],"sourceRoot":"../../src"}