import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
export class Header {
    static parseHeaders(headersString) {
        const headers = new Map();
        headersString.split(/\r?\n/).forEach(strHeader => {
            if (!strHeader.trim())
                return;
            const parts = strHeader.split(":");
            if (parts.length < 2)
                throw new IllegalArgumentError("The header couldn't be parsed.");
            const name = parts[0].trim().toLowerCase();
            const values = Header.__parseValues(parts.slice(1).join(":"));
            if (headers.has(name)) {
                headers.get(name).values.push(...values);
            }
            else {
                headers.set(name, new Header(values));
            }
        });
        return headers;
    }
    static __parseValues(strValues) {
        if (!strValues)
            return [];
        return strValues
            .split(",")
            .map(valueString => {
            return valueString.trim();
        });
    }
    constructor(values) {
        this.values = Array.isArray(values) ?
            values : Header.__parseValues(values);
    }
    hasValue(value) {
        return this.values.indexOf(value) !== -1;
    }
    addValue(value) {
        const newValues = Header.__parseValues(value);
        this.values.push(...newValues);
    }
    toString() {
        return this.values.join(", ");
    }
}

//# sourceMappingURL=Header.js.map
