import * as Utils from "../Utils";
import { XSD } from "../Vocabularies/XSD";
import { RDFList } from "./List";
import { RDFLiteral } from "./Literal";
import { URI } from "./URI";
export const RDFNode = {
    is(value) {
        return Utils.hasProperty(value, "@id")
            && Utils.isString(value["@id"]);
    },
    create(uri) {
        return {
            "@id": uri,
        };
    },
    getID(node) {
        return node["@id"];
    },
    getRelativeID(node) {
        const id = RDFNode.getID(node);
        return URI.hasFragment(id) ? URI.getFragment(id) : id;
    },
    areEqual(node1, node2) {
        return RDFNode.getID(node1) === RDFNode.getID(node2);
    },
    isFragment(node) {
        const id = RDFNode.getID(node);
        return URI.hasFragment(id) || URI.isBNodeID(id);
    },
    hasType(node, type) {
        return RDFNode.getTypes(node).indexOf(type) !== -1;
    },
    getTypes(node) {
        if (!("@type" in node))
            return [];
        return node["@type"];
    },
    getList(propertyValues) {
        if (!Array.isArray(propertyValues))
            return;
        return propertyValues
            .find(RDFList.is);
    },
    getPropertyLiterals(propertyValues, literalType) {
        if (!Array.isArray(propertyValues))
            return;
        return propertyValues
            .filter(RDFLiteral.is)
            .filter(literal => RDFLiteral.hasType(literal, literalType))
            .map(RDFLiteral.parse);
    },
    getPropertyLanguageMap(propertyValues) {
        if (!Array.isArray(propertyValues))
            return;
        const propertyLanguageMap = {};
        for (const propertyValue of propertyValues) {
            if (!RDFLiteral.is(propertyValue))
                continue;
            if (!RDFLiteral.hasType(propertyValue, XSD.string))
                continue;
            const languageTag = propertyValue["@language"];
            if (!languageTag)
                continue;
            propertyLanguageMap[languageTag] = RDFLiteral.parse(propertyValue);
        }
        return propertyLanguageMap;
    },
};

//# sourceMappingURL=Node.js.map
