import { isNumber } from "../Utils";
export class LDPatchToken {
    constructor() {
        this.token = "ldpatch";
        this.prologues = [];
        this.statements = [];
    }
    toString() {
        const tokens = [
            ...this.prologues,
            ...this.statements,
        ];
        return tokens.join(" ");
    }
}
export class PrefixToken {
    constructor(namespace, iri) {
        this.token = "prefix";
        this.namespace = namespace;
        this.iri = iri;
    }
    toString() {
        return `@prefix ${this.namespace}: ${this.iri}.`;
    }
}
export class AddToken {
    constructor() {
        this.token = "add";
        this.triples = [];
    }
    toString() {
        return `Add { ${this.triples.join(". ")}. }.`;
    }
}
export class DeleteToken {
    constructor() {
        this.token = "delete";
        this.triples = [];
    }
    toString() {
        return `Delete { ${this.triples.join(". ")}. }.`;
    }
}
export class UpdateListToken {
    constructor(subject, predicate, slice, collection) {
        this.token = "updateList";
        this.subject = subject;
        this.predicate = predicate;
        this.slice = slice;
        this.collection = collection;
    }
    toString() {
        return `UpdateList ${this.subject} ${this.predicate} ${this.slice} ${this.collection}.`;
    }
}
export class SliceToken {
    constructor(minIndex, maxIndex) {
        this.token = "slice";
        if (isNumber(minIndex))
            this.minIndex = minIndex;
        if (isNumber(maxIndex))
            this.maxIndex = maxIndex;
    }
    toString() {
        let buffer = "..";
        if (this.minIndex !== void 0)
            buffer = this.minIndex + buffer;
        if (this.maxIndex !== void 0)
            buffer = buffer + this.maxIndex;
        return buffer;
    }
}

//# sourceMappingURL=Tokens.js.map
