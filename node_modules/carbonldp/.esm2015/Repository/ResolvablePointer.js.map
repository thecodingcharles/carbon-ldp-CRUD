{"version":3,"sources":["Repository/ResolvablePointer.ts"],"names":[],"mappings":"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","file":"ResolvablePointer.js","sourcesContent":["import { _parseResourceParams, _parseURIParams } from \"../DocumentsRepository/Utils\";\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\nimport { ModelTypeGuard } from \"../Model/ModelTypeGuard\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { isFunction, isObject, ObjectUtils } from \"../Utils\";\n\nimport { BaseResolvablePointer } from \"./BaseResolvablePointer\";\nimport { $Repository, Repository } from \"./Repository\";\n\n\n/**\n * Interface that represents the base to any model that can be fetched by any {@link Repository}/{@link $Repository}.\n */\nexport interface ResolvablePointer extends Pointer, $Repository {\n\t/**\n\t * Repository with request methods associated to the resource.\n\t */\n\t$repository:Repository | $Repository;\n\t/**\n\t * Identifier that describes the state of the last data retrieved.\n\t */\n\t$eTag:string | undefined | null;\n\n\t$_resolved:boolean;\n\t/**\n\t * Shallow copy of the pointer, which is used to track its changes.\n\t */\n\t$_snapshot:object;\n\n\n\t/**\n\t * Returns true when the pointer has been retrieved.\n\t */\n\t$isResolved():boolean;\n\n\n\t/**\n\t * Updates the snapshot with the current data of the resource.\n\t */\n\t$_syncSnapshot():void;\n\n\t/**\n\t * Returns true if the resource presents differences from its snapshot.\n\t */\n\t$isDirty():boolean;\n\n\t/**\n\t * Reverts the changes made to the resource into the state of the snapshot.\n\t */\n\t$revert():void;\n\n\n\t/**\n\t * Calls the `get` method of the associated repository,\n\t * except the URI since it will be taken from the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$get( ...params:any[] ):Promise<ResolvablePointer>;\n\t/**\n\t * Calls the `get` method of the associated repository,\n\t * with the specified URI.\n\t * @param uri URI of the specific document.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$get( uri:string, ...params:any[] ):Promise<ResolvablePointer>;\n\n\t/**\n\t * Calls the `resolve` method of the associated repository,\n\t * except the resource since it will be taken as the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$resolve( ...params:any[] ):Promise<ResolvablePointer>;\n\t/**\n\t * Calls the `resolve` method of the associated repository,\n\t * with the specified resource.\n\t * @param resource The specific resource.\n\t * @param params The params required by the respective repository method.\n\t */\n\t$resolve( resource:ResolvablePointer, ...params:any[] ):Promise<ResolvablePointer>;\n\n\t/**\n\t * Calls the `exists` method of the associated repository,\n\t * except the URI since it will be taken from the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$exists( ...params:any[] ):Promise<boolean>;\n\t/**\n\t * Calls the `exists` method of the associated repository,\n\t * with the specified URI.\n\t * @param uri URI of the specific document.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$exists( uri:string, ...params:any[] ):Promise<boolean>;\n\n\n\t/**\n\t * Calls the `refresh` method of the associated repository,\n\t * except the resource since it will be taken as the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$refresh( ...params:any[] ):Promise<ResolvablePointer>;\n\t/**\n\t * Calls the `refresh` method of the associated repository,\n\t * with the specified resource.\n\t * @param resource The specific resource.\n\t * @param params The params required by the respective repository method.\n\t */\n\t$refresh( resource:ResolvablePointer, ...params:any[] ):Promise<ResolvablePointer>;\n\n\t/**\n\t * Calls the `save` method of the associated repository,\n\t * except the resource since it will be taken as the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$save( ...params:any[] ):Promise<ResolvablePointer>;\n\t/**\n\t * Calls the `save` method of the associated repository,\n\t * with the specified resource.\n\t * @param resource The specific resource.\n\t * @param params The params required by the respective repository method.\n\t */\n\t$save( resource:ResolvablePointer, ...params:any[] ):Promise<ResolvablePointer>;\n\n\t/**\n\t * Calls the `saveAndRefresh` method of the associated repository,\n\t * except the resource since it will be taken as the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$saveAndRefresh( ...params:any[] ):Promise<ResolvablePointer>;\n\t/**\n\t * Calls the `saveAndRefresh` method of the associated repository,\n\t * with the specified resource.\n\t * @param resource The specific resource.\n\t * @param params The params required by the respective repository method.\n\t */\n\t$saveAndRefresh( resource:ResolvablePointer, ...params:any[] ):Promise<ResolvablePointer>;\n\n\n\t/**\n\t * Calls the `delete` method of the associated repository,\n\t * except the URI since it will be taken from the current resource.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$delete( ...params:any[] ):Promise<void>;\n\t/**\n\t * Calls the `delete` method of the associated repository,\n\t * with the specified URI.\n\t * @param uri URI of the specific document.\n\t * @param params Rest params required by the respective repository method.\n\t */\n\t$delete( uri:string, ...params:any[] ):Promise<void>;\n}\n\n\nfunction __internalRevert( target:any, source:any ):void {\n\tif( ! isObject( target ) || ! isObject( source ) ) return;\n\n\tnew Set<string>( [\n\t\t...Object.keys( target ),\n\t\t...Object.keys( source ),\n\t] ).forEach( key => {\n\t\tconst sourceValue:any = Array.isArray( source[ key ] ) ?\n\t\t\t[ ...source[ key ] ] : source[ key ];\n\n\t\tif( sourceValue === null || sourceValue === void 0 ) {\n\t\t\tdelete target[ key ];\n\t\t\treturn;\n\t\t}\n\n\t\tif( isFunction( sourceValue ) ) return;\n\n\t\ttarget[ key ] = sourceValue;\n\t} );\n}\n\n\n/**\n * Factory, decorator and utils for {@link ResolvablePointer}.\n */\nexport type ResolvablePointerFactory =\n\t& ModelPrototype<ResolvablePointer, Pointer>\n\t& ModelDecorator<ResolvablePointer, BaseResolvablePointer>\n\t& ModelTypeGuard<ResolvablePointer>\n\t;\n\n/**\n * Constant that implements {@link ResolvablePointerFactory}.\n */\nexport const ResolvablePointer:ResolvablePointerFactory = {\n\tPROTOTYPE: {\n\t\tget $repository():Repository | $Repository {\n\t\t\tthrow new IllegalArgumentError( `Property \"$repository\" is required.` );\n\t\t},\n\n\t\t$eTag: void 0,\n\n\n\t\t$_resolved: false,\n\n\t\t$isResolved( this:ResolvablePointer ):boolean {\n\t\t\treturn this.$_resolved;\n\t\t},\n\n\n\t\t$_snapshot: {},\n\n\t\t$_syncSnapshot( this:{ types?:string[] } & ResolvablePointer ):void {\n\t\t\tconst clone:{ types?:string[] } & ResolvablePointer = ObjectUtils.clone( this, { arrays: true } )!;\n\t\t\tif( this.types ) clone.types = [ ...this.types ];\n\n\t\t\tthis.$_snapshot = clone;\n\t\t},\n\n\t\t$isDirty( this:ResolvablePointer ):boolean {\n\t\t\treturn ! ObjectUtils\n\t\t\t\t.areEqual( this, this.$_snapshot, { arrays: true } );\n\t\t},\n\n\t\t$revert( this:{ types?:string[] } & ResolvablePointer ):void {\n\t\t\t__internalRevert( this, this.$_snapshot );\n\t\t\tif( ! this.types ) this.types = [];\n\t\t},\n\n\n\t\t$get( this:ResolvablePointer, uri?:string ):Promise<ResolvablePointer> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uri, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$get( _uri, ..._args ) :\n\t\t\t\tthis.$repository.get( _uri, ..._args );\n\t\t},\n\n\t\t$resolve( this:ResolvablePointer, resource?:ResolvablePointer ):Promise<ResolvablePointer> {\n\t\t\tconst { _resource, _args } = _parseResourceParams( this, resource, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$resolve( _resource, ..._args ) :\n\t\t\t\tthis.$repository.resolve( _resource, ..._args );\n\t\t},\n\n\t\t$exists( this:ResolvablePointer, uri?:string ):Promise<boolean> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uri, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$exists( _uri, ..._args ) :\n\t\t\t\tthis.$repository.exists( _uri, ..._args );\n\t\t},\n\n\n\t\t$refresh( this:ResolvablePointer, resource?:ResolvablePointer, ...args:any[] ):Promise<ResolvablePointer> {\n\t\t\tconst { _resource, _args } = _parseResourceParams( this, resource, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$refresh( _resource, ..._args ) :\n\t\t\t\tthis.$repository.refresh( _resource, ..._args );\n\t\t},\n\n\t\t$save( this:ResolvablePointer, resource?:ResolvablePointer, ...args:any[] ):Promise<ResolvablePointer> {\n\t\t\tconst { _resource, _args } = _parseResourceParams( this, resource, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$save( _resource, ..._args ) :\n\t\t\t\tthis.$repository.save( _resource, ..._args );\n\t\t},\n\n\t\t$saveAndRefresh( this:ResolvablePointer, resource?:ResolvablePointer, ...args:any[] ):Promise<ResolvablePointer> {\n\t\t\tconst { _resource, _args } = _parseResourceParams( this, resource, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$saveAndRefresh( _resource, ..._args ) :\n\t\t\t\tthis.$repository.saveAndRefresh( _resource, ..._args );\n\t\t},\n\n\n\t\t$delete( this:ResolvablePointer, uri?:string, ...args:any[] ):Promise<void> {\n\t\t\tconst { _uri, _args } = _parseURIParams( this, uri, arguments );\n\t\t\treturn \"$id\" in this.$repository ?\n\t\t\t\tthis.$repository.$delete( _uri, ..._args ) :\n\t\t\t\tthis.$repository.delete( _uri, ..._args );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is ResolvablePointer {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( ResolvablePointer.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseResolvablePointer>( object:T ):T & ResolvablePointer {\n\t\tif( ResolvablePointer.isDecorated( object ) ) return object;\n\n\t\tconst resource:T & Pointer = ModelDecorator\n\t\t\t.decorateMultiple( object, Pointer );\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( ResolvablePointer.PROTOTYPE, resource );\n\t},\n\n\n\tis( value:any ):value is ResolvablePointer {\n\t\treturn Pointer.is( value )\n\t\t\t&& ResolvablePointer.isDecorated( value )\n\t\t\t;\n\t},\n};\n"],"sourceRoot":"../../src"}