{"version":3,"sources":["GeneralRegistry/GeneralRegistry.ts"],"names":[],"mappings":"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","file":"GeneralRegistry.js","sourcesContent":["import { Context } from \"../Context/Context\";\n\nimport { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { ModelDecorator } from \"../Model/ModelDecorator\";\nimport { ModelFactory } from \"../Model/ModelFactory\";\nimport { ModelPrototype } from \"../Model/ModelPrototype\";\n\nimport { ObjectSchemaResolver } from \"../ObjectSchema/ObjectSchemaResolver\";\n\nimport { Pointer } from \"../Pointer/Pointer\";\n\nimport { URI } from \"../RDF/URI\";\n\nimport { RegisteredPointer } from \"../Registry/RegisteredPointer\";\nimport { Registry } from \"../Registry/Registry\";\n\nimport { BaseResolvablePointer } from \"../Repository/BaseResolvablePointer\";\n\nimport { MapUtils } from \"../Utils\";\n\nimport { BaseGeneralRegistry } from \"./BaseGeneralRegistry\";\nimport { TypedModelDecorator } from \"./TypedModelDecorator\";\n\n\n/**\n * Base registry used by {@link Context}.\n */\nexport interface GeneralRegistry<M extends RegisteredPointer = RegisteredPointer> extends Registry<M>, ObjectSchemaResolver {\n\t/**\n\t * Context where the registry belongs to.\n\t */\n\treadonly context:Context<M, any>;\n\t/**\n\t * Parent registry used to inherit resources and more data.\n\t */\n\treadonly registry:GeneralRegistry | undefined;\n\n\n\t/**\n\t * Map that stores the decorators in the registry.\n\t */\n\t__modelDecorators:Map<string, TypedModelDecorator>;\n\n\t/**\n\t * Stores a decorator in the current registry.\n\t * @param decorator The information of the decorator to store.\n\t */\n\taddDecorator( decorator:TypedModelDecorator ):this;\n\n\t/**\n\t * Applies the corresponding decorators in the entire registry tree.\n\t * @param object with an array of types used to match the decorator to be applied.\n\t */\n\tdecorate( object:{ types?:string[] } ):void;\n\n\n\t/**\n\t * @see {@link Registry._addPointer}\n\t */\n\t_addPointer<T extends object>( pointer:T & Pointer ):T & M;\n\n\t/**\n\t * @see {@link Registry._getLocalID}\n\t */\n\t_getLocalID( id:string ):string;\n}\n\n\nexport type OverloadedFns =\n\t| \"context\"\n\t| \"registry\"\n\t| \"_addPointer\"\n\t| \"_getLocalID\"\n\t;\n\n/**\n * Factory, decorator and utils for {@link GeneralRegistry}.\n */\nexport type GeneralRegistryFactory =\n\t& ModelPrototype<GeneralRegistry, Registry & ObjectSchemaResolver, OverloadedFns>\n\t& ModelDecorator<GeneralRegistry<any>, BaseGeneralRegistry>\n\t& ModelFactory<GeneralRegistry<any>, BaseGeneralRegistry>\n\t;\n\n/**\n * Constant that implements {@link GeneralRegistryFactory}.\n */\nexport const GeneralRegistry:GeneralRegistryFactory = {\n\tPROTOTYPE: {\n\t\tget context():Context {\n\t\t\tthrow new IllegalArgumentError( \"Property context is required.\" );\n\t\t},\n\n\t\tget registry( this:GeneralRegistry ):GeneralRegistry<any> | undefined {\n\t\t\tif( ! this.context || ! this.context.parentContext ) return;\n\t\t\treturn this.context.parentContext.registry;\n\t\t},\n\t\tset registry( value:GeneralRegistry<any> | undefined ) {},\n\n\n\t\tget __modelDecorators():Map<string, TypedModelDecorator> { return new Map(); },\n\n\n\t\taddDecorator( this:GeneralRegistry, decorator:TypedModelDecorator ):GeneralRegistry {\n\t\t\tif( ! decorator.TYPE ) throw new IllegalArgumentError( \"No TYPE specified in the model decorator.\" );\n\n\t\t\tthis.__modelDecorators.set( decorator.TYPE, decorator );\n\t\t\treturn this;\n\t\t},\n\n\t\tdecorate( this:GeneralRegistry, object:{ types?:string[] } ):void {\n\t\t\tif( ! object.types ) return;\n\n\t\t\tobject.types\n\t\t\t\t.filter( type => this.__modelDecorators.has( type ) )\n\t\t\t\t.map( type => this.__modelDecorators.get( type )! )\n\t\t\t\t.forEach( decorator => decorator.decorate( object ) )\n\t\t\t;\n\t\t},\n\n\n\t\t_addPointer<T extends object>( this:GeneralRegistry, pointer:T & Pointer ):T & RegisteredPointer {\n\t\t\tif( this.context.repository )\n\t\t\t\tObject.assign<T, BaseResolvablePointer>( pointer, { $repository: this.context.repository } );\n\n\t\t\tconst resource:T & RegisteredPointer = Registry.PROTOTYPE._addPointer.call( this, pointer );\n\n\t\t\tresource.$id = this.context.getObjectSchema().resolveURI( resource.$id, { base: true } );\n\n\t\t\treturn resource;\n\t\t},\n\n\t\t_getLocalID( this:GeneralRegistry, id:string ):string {\n\t\t\tconst uri:string = this.context.getObjectSchema().resolveURI( id, { base: true } );\n\n\t\t\tif( ! URI.isAbsolute( uri ) || ! URI.isBaseOf( this.context.baseURI, uri ) )\n\t\t\t\tthrow new IllegalArgumentError( `\"${uri}\" is out of scope.` );\n\n\t\t\treturn URI.getRelativeURI( uri, this.context.baseURI );\n\t\t},\n\t},\n\n\n\tisDecorated( object:object ):object is GeneralRegistry {\n\t\treturn ModelDecorator\n\t\t\t.hasPropertiesFrom( GeneralRegistry.PROTOTYPE, object )\n\t\t\t;\n\t},\n\n\tdecorate<T extends BaseGeneralRegistry>( object:T ):T & GeneralRegistry {\n\t\tif( GeneralRegistry.isDecorated( object ) ) return object;\n\n\t\tconst target:T & Registry & ObjectSchemaResolver = ModelDecorator\n\t\t\t.decorateMultiple( object, Registry, ObjectSchemaResolver );\n\n\t\tif( ! target.context ) delete target.context;\n\n\t\treturn ModelDecorator\n\t\t\t.definePropertiesFrom( GeneralRegistry.PROTOTYPE, target );\n\t},\n\n\n\tcreate<T extends object>( data:T & BaseGeneralRegistry ):T & GeneralRegistry {\n\t\t// FIXME: TS 3.0\n\t\treturn GeneralRegistry.createFrom( { ...data as any } );\n\t},\n\n\tcreateFrom<T extends object>( object:T & BaseGeneralRegistry ):T & GeneralRegistry {\n\t\tconst registry:T & GeneralRegistry = GeneralRegistry.decorate( object );\n\n\t\tif( registry.registry )\n\t\t\tMapUtils.extend( registry.__modelDecorators, registry.registry.__modelDecorators );\n\n\t\treturn registry;\n\t},\n};\n"],"sourceRoot":"../../src"}