import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ModelDecorator } from "../Model/ModelDecorator";
import { ObjectSchemaResolver } from "../ObjectSchema/ObjectSchemaResolver";
import { URI } from "../RDF/URI";
import { Registry } from "../Registry/Registry";
import { MapUtils } from "../Utils";
export const GeneralRegistry = {
    PROTOTYPE: {
        get context() {
            throw new IllegalArgumentError("Property context is required.");
        },
        get registry() {
            if (!this.context || !this.context.parentContext)
                return;
            return this.context.parentContext.registry;
        },
        set registry(value) { },
        get __modelDecorators() { return new Map(); },
        addDecorator(decorator) {
            if (!decorator.TYPE)
                throw new IllegalArgumentError("No TYPE specified in the model decorator.");
            this.__modelDecorators.set(decorator.TYPE, decorator);
            return this;
        },
        decorate(object) {
            if (!object.types)
                return;
            object.types
                .filter(type => this.__modelDecorators.has(type))
                .map(type => this.__modelDecorators.get(type))
                .forEach(decorator => decorator.decorate(object));
        },
        _addPointer(pointer) {
            if (this.context.repository)
                Object.assign(pointer, { $repository: this.context.repository });
            const resource = Registry.PROTOTYPE._addPointer.call(this, pointer);
            resource.$id = this.context.getObjectSchema().resolveURI(resource.$id, { base: true });
            return resource;
        },
        _getLocalID(id) {
            const uri = this.context.getObjectSchema().resolveURI(id, { base: true });
            if (!URI.isAbsolute(uri) || !URI.isBaseOf(this.context.baseURI, uri))
                throw new IllegalArgumentError(`"${uri}" is out of scope.`);
            return URI.getRelativeURI(uri, this.context.baseURI);
        },
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(GeneralRegistry.PROTOTYPE, object);
    },
    decorate(object) {
        if (GeneralRegistry.isDecorated(object))
            return object;
        const target = ModelDecorator
            .decorateMultiple(object, Registry, ObjectSchemaResolver);
        if (!target.context)
            delete target.context;
        return ModelDecorator
            .definePropertiesFrom(GeneralRegistry.PROTOTYPE, target);
    },
    create(data) {
        return GeneralRegistry.createFrom(Object.assign({}, data));
    },
    createFrom(object) {
        const registry = GeneralRegistry.decorate(object);
        if (registry.registry)
            MapUtils.extend(registry.__modelDecorators, registry.registry.__modelDecorators);
        return registry;
    },
};

//# sourceMappingURL=GeneralRegistry.js.map
