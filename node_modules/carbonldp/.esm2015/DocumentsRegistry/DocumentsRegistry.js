import { Document } from "../Document/Document";
import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { GeneralRegistry } from "../GeneralRegistry/GeneralRegistry";
import { ModelDecorator } from "../Model/ModelDecorator";
import { URI } from "../RDF/URI";
export const DocumentsRegistry = {
    PROTOTYPE: {
        register(id) {
            return this.getPointer(id, true);
        },
        _getLocalID(id) {
            if (URI.hasFragment(id))
                throw new IllegalArgumentError(`"${id}" is out of scope.`);
            return GeneralRegistry.PROTOTYPE._getLocalID.call(this, id);
        },
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(DocumentsRegistry.PROTOTYPE, object);
    },
    decorate(object) {
        if (DocumentsRegistry.isDecorated(object))
            return object;
        const base = Object.assign(object, {
            __modelDecorator: Document,
        });
        const target = ModelDecorator
            .decorateMultiple(base, GeneralRegistry);
        return ModelDecorator
            .definePropertiesFrom(DocumentsRegistry.PROTOTYPE, target);
    },
    create(data) {
        return DocumentsRegistry.createFrom(Object.assign({}, data));
    },
    createFrom(object) {
        const registry = DocumentsRegistry.decorate(object);
        return GeneralRegistry.createFrom(registry);
    },
};

//# sourceMappingURL=DocumentsRegistry.js.map
