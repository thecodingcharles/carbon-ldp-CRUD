import { isAbsolute } from "sparqler/iri";
import { IllegalArgumentError } from "../Errors/IllegalArgumentError";
import { ModelDecorator } from "../Model/ModelDecorator";
import { URI } from "../RDF/URI";
import { Registry } from "../Registry/Registry";
import { Resource } from "../Resource/Resource";
export const FreeResources = {
    PROTOTYPE: {
        _getLocalID(id) {
            if (isAbsolute(id) && !URI.hasProtocol(id))
                return id;
            throw new IllegalArgumentError(`"${id}" is out of scope.`);
        },
        _addPointer(base) {
            if (!base.$id)
                base.$id = URI.generateBNodeID();
            return Registry.PROTOTYPE._addPointer.call(this, base);
        },
        toJSON(contextOrKey) {
            return this
                .getPointers(true)
                .map(resource => resource.toJSON(contextOrKey));
        },
    },
    is(value) {
        return Registry.isDecorated(value)
            && FreeResources.isDecorated(value);
    },
    isDecorated(object) {
        return ModelDecorator
            .hasPropertiesFrom(FreeResources.PROTOTYPE, object);
    },
    create(data) {
        const copy = Object.assign({}, data);
        return FreeResources.createFrom(copy);
    },
    createFrom(object) {
        return FreeResources.decorate(object);
    },
    decorate(object) {
        if (FreeResources.isDecorated(object))
            return object;
        const base = Object.assign(object, {
            __modelDecorator: Resource,
        });
        const resource = ModelDecorator
            .decorateMultiple(base, Registry);
        return ModelDecorator
            .definePropertiesFrom(FreeResources.PROTOTYPE, resource);
    },
    parseFreeNodes(registry, freeNodes) {
        const freeResources = FreeResources
            .createFrom({ registry: registry });
        freeNodes
            .forEach(node => {
            const digestedSchema = registry.getSchemaFor(node);
            const target = freeResources.getPointer(node["@id"], true);
            registry.context.jsonldConverter.compact(node, target, digestedSchema, freeResources);
        });
        return freeResources;
    },
};

//# sourceMappingURL=FreeResources.js.map
