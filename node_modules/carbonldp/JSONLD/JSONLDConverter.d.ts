import { DigestedObjectSchema } from "../ObjectSchema/DigestedObjectSchema";
import { $PointerLibrary, PointerLibrary } from "../Pointer/PointerLibrary";
import { Serializer } from "../RDF/Literal/Serializer";
import { RDFNode } from "../RDF/Node";
export declare class JSONLDConverter {
    private readonly _literalSerializers;
    readonly literalSerializers: Map<string, Serializer>;
    private static getDefaultSerializers;
    constructor(literalSerializers?: Map<string, Serializer>);
    compact(expandedObjects: object[], targetObjects: object[], digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary | $PointerLibrary): object[];
    compact(expandedObject: object, targetObject: object, digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary | $PointerLibrary, strict?: boolean): object;
    compact(expandedObjects: object[], digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary | $PointerLibrary): object[];
    compact(expandedObject: object, digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary | $PointerLibrary): object;
    expand(compactedObjects: object[], generalSchema: DigestedObjectSchema, digestedSchema: DigestedObjectSchema): RDFNode[];
    expand(compactedObject: object, generalSchema: DigestedObjectSchema, digestedSchema: DigestedObjectSchema): RDFNode;
    update(target: object, node: RDFNode, digestedSchema: DigestedObjectSchema, pointerLibrary: PointerLibrary | $PointerLibrary, strict?: boolean): void;
    private __expandSingle;
    private __expandProperty;
    private __expandPropertyValue;
    private __expandPropertyPointer;
    private __expandPropertyLiteral;
    private __expandPropertyLanguageMap;
    private __expandPointerValue;
    private __expandValue;
    private __expandLiteralValue;
    private __compactSingle;
    private __getPropertyContainerType;
    private __getPropertyValue;
    private __getPropertyURINameMap;
    private __compactPropertyLiteral;
    private __getProperties;
    private __getPropertyPointers;
}
