{"version":3,"sources":["RDF/URI.ts"],"names":[],"mappings":";;AAAA,uEAAsE;AAItE,kCAA4D;AAqI/C,QAAA,GAAG,GAAc;IAC7B,WAAW,EAAX,UAAa,GAAU;QACtB,OAAO,GAAG,CAAC,OAAO,CAAE,GAAG,CAAE,KAAK,CAAE,CAAC,CAAC;IACnC,CAAC;IAED,QAAQ,EAAR,UAAU,GAAU;QACnB,OAAO,GAAG,CAAC,OAAO,CAAE,GAAG,CAAE,KAAK,CAAE,CAAC,CAAC;IACnC,CAAC;IAED,WAAW,EAAX,UAAa,GAAU;QACtB,OAAO,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,UAAU,CAAE,IAAI,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,SAAS,CAAE,CAAC;IAC9F,CAAC;IAED,UAAU,EAAV,UAAY,GAAU;QACrB,OAAO,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,SAAS,CAAE;eAC3C,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,UAAU,CAAE;eACzC,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,KAAK,CAAE,CAAC;IAC1C,CAAC;IAED,UAAU,EAAV,UAAY,GAAU;QACrB,OAAO,CAAE,WAAG,CAAC,UAAU,CAAE,GAAG,CAAE,CAAC;IAChC,CAAC;IAED,SAAS,EAAT,UAAW,GAAU;QACpB,OAAO,mBAAW,CAAC,UAAU,CAAE,GAAG,EAAE,IAAI,CAAE,CAAC;IAC5C,CAAC;IAED,eAAe,EAAf;QACC,OAAO,IAAI,GAAG,iBAAS,CAAC,QAAQ,EAAE,CAAC;IACpC,CAAC;IAED,UAAU,EAAV,UAAY,GAAU;QACrB,OAAO,CAAE,WAAG,CAAC,UAAU,CAAE,GAAG,CAAE,IAAI,CAAE,WAAG,CAAC,SAAS,CAAE,GAAG,CAAE,IAAI,mBAAW,CAAC,QAAQ,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC;IAC9F,CAAC;IAED,YAAY,EAAZ,UAAc,WAAkB,EAAE,GAAU;QAC3C,IAAI,CAAE,WAAG,CAAC,WAAW,CAAE,WAAW,CAAE;YAAG,OAAO,KAAK,CAAC;QAEpD,IAAM,WAAW,GAAU,WAAG,CAAC,cAAc,CAAE,WAAW,CAAE,CAAC;QAC7D,OAAO,WAAW,KAAK,EAAE,IAAI,WAAW,KAAK,GAAG,CAAC;IAClD,CAAC;IAED,QAAQ,EAAR,UAAU,OAAc,EAAE,GAAU;QACnC,IAAI,OAAO,KAAK,GAAG;YAAG,OAAO,IAAI,CAAC;QAClC,IAAI,OAAO,KAAK,EAAE;YAAG,OAAO,IAAI,CAAC;QACjC,IAAI,WAAG,CAAC,UAAU,CAAE,GAAG,CAAE,IAAI,CAAE,WAAG,CAAC,UAAU,CAAE,GAAG,CAAE;YAAG,OAAO,IAAI,CAAC;QAEnE,IAAI,GAAG,CAAC,UAAU,CAAE,OAAO,CAAE,EAAG;YAC/B,IAAI,mBAAW,CAAC,QAAQ,CAAE,OAAO,EAAE,GAAG,CAAE,IAAI,mBAAW,CAAC,QAAQ,CAAE,OAAO,EAAE,GAAG,CAAE;gBAAG,OAAO,IAAI,CAAC;YAE/F,IAAI,WAAW,GAAU,GAAG,CAAC,SAAS,CAAE,OAAO,CAAC,MAAM,CAAE,CAAC;YACzD,IAAI,mBAAW,CAAC,UAAU,CAAE,WAAW,EAAE,GAAG,CAAE,IAAI,mBAAW,CAAC,UAAU,CAAE,WAAW,EAAE,GAAG,CAAE;gBAAG,OAAO,IAAI,CAAC;SAC3G;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAED,cAAc,EAAd,UAAgB,WAAkB,EAAE,IAAW;QAC9C,IAAI,CAAE,WAAW,CAAC,UAAU,CAAE,IAAI,CAAE;YACnC,OAAO,WAAW,CAAC;QACpB,OAAO,WAAW,CAAC,SAAS,CAAE,IAAI,CAAC,MAAM,CAAE,CAAC;IAC7C,CAAC;IAED,cAAc,EAAd,UAAgB,GAAU;QACzB,IAAI,KAAK,GAAY,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC;QACtC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;YAAG,MAAM,IAAI,2CAAoB,CAAE,4CAA4C,CAAE,CAAC;QAEtG,OAAO,KAAK,CAAE,CAAC,CAAE,CAAC;IACnB,CAAC;IAED,WAAW,EAAX,UAAa,GAAU;QACtB,IAAI,KAAK,GAAY,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC;QACtC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;YAAG,MAAM,IAAI,2CAAoB,CAAE,mCAAmC,CAAE,CAAC;QAC7F,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;YAAG,MAAM,IAAI,2CAAoB,CAAE,4CAA4C,CAAE,CAAC;QAEtG,OAAO,KAAK,CAAE,CAAC,CAAE,CAAC;IACnB,CAAC;IAED,OAAO,EAAP,UAAS,GAAU;QAClB,IAAI,QAAQ,GAAY,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC;QACzC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;YAAG,OAAO,WAAG,CAAC,OAAO,CAAE,QAAQ,CAAE,CAAC,CAAE,CAAE,CAAC;QAChE,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;YAAG,MAAM,IAAI,2CAAoB,CAAE,gDAAgD,CAAE,CAAC;QAE7G,GAAG,GAAG,QAAQ,CAAE,CAAC,CAAE,CAAC;QAEpB,IAAI,GAAG,KAAK,EAAE;YAAG,OAAO,GAAG,CAAC;QAC5B,IAAI,GAAG,KAAK,GAAG;YAAG,OAAO,EAAE,CAAC;QAE5B,IAAI,KAAK,GAAY,GAAG,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC;QACtC,IAAI,KAAK,CAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAE,KAAK,EAAE,EAAG;YACtC,OAAO,KAAK,CAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;SACjC;aAAM;YACN,OAAO,KAAK,CAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;SACjC;IACF,CAAC;IAED,aAAa,EAAb,UAAe,GAAU;QACxB,IAAM,UAAU,GAAkC,IAAI,GAAG,EAAE,CAAC;QAE5D,IAAI,CAAE,WAAG,CAAC,QAAQ,CAAE,GAAG,CAAE;YAAG,OAAO,UAAU,CAAC;QAE9C,GAAG,CAAC,OAAO,CAAE,OAAO,EAAE,EAAE,CAAE,CAAC,KAAK,CAAE,GAAG,CAAE,CAAC,OAAO,CAAE,UAAE,KAAY;YAC9D,IAAM,KAAK,GAAY,KAAK;iBAC1B,OAAO,CAAE,KAAK,EAAE,GAAG,CAAE;iBACrB,KAAK,CAAE,GAAG,CAAE,CAAC;YAEf,IAAM,GAAG,GAAU,KAAK,CAAC,KAAK,EAAG,CAAC;YAClC,IAAM,GAAG,GAAU,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAE7D,IAAI,CAAE,UAAU,CAAC,GAAG,CAAE,GAAG,CAAE,EAAG;gBAC7B,UAAU,CAAC,GAAG,CAAE,GAAG,EAAE,GAAG,CAAE,CAAC;aAC3B;iBAAM;gBACN,UAAU,CAAC,GAAG,CAAE,GAAG,EAAE,IAAI,KAAK,EAAU,CAAC,MAAM,CAAE,UAAU,CAAC,GAAG,CAAE,GAAG,CAAG,EAAE,GAAG,CAAE,CAAE,CAAC;aACjF;QACF,CAAC,CAAE,CAAC;QAEJ,OAAO,UAAU,CAAC;IACnB,CAAC;IAED,OAAO,EAAP,UAAS,SAAgB,EAAE,QAAe;QACzC,IAAI,CAAE,SAAS,IAAI,WAAG,CAAC,UAAU,CAAE,QAAQ,CAAE,IAAI,WAAG,CAAC,SAAS,CAAE,QAAQ,CAAE,IAAI,WAAG,CAAC,UAAU,CAAE,QAAQ,CAAE;YACvG,OAAO,QAAQ,CAAC;QAEjB,IAAI,QAAQ,GAAU,SAAS,CAAC,MAAM,CAAE,CAAC,EAAE,SAAS,CAAC,OAAO,CAAE,KAAK,CAAE,GAAG,CAAC,CAAE,CAAC;QAC5E,IAAI,IAAI,GAAU,SAAS,CAAC,MAAM,CAAE,SAAS,CAAC,OAAO,CAAE,KAAK,CAAE,GAAG,CAAC,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC;QAC3F,IAAI,IAAI,CAAC,WAAW,CAAE,GAAG,CAAE,KAAK,CAAE,CAAC;YAAG,IAAI,IAAI,GAAG,CAAC;QAElD,IAAI,mBAAW,CAAC,UAAU,CAAE,QAAQ,EAAE,GAAG,CAAE,IAAI,mBAAW,CAAC,UAAU,CAAE,QAAQ,EAAE,GAAG,CAAE,EAAG;YACxF,IAAI,WAAG,CAAC,QAAQ,CAAE,IAAI,CAAE;gBAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAE,GAAG,CAAE,CAAE,CAAC;YACxE,IAAI,WAAG,CAAC,WAAW,CAAE,IAAI,CAAE,IAAI,CAAC,CAAE,mBAAW,CAAC,UAAU,CAAE,QAAQ,EAAE,GAAG,CAAE,IAAI,mBAAW,CAAC,QAAQ,CAAE,IAAI,EAAE,GAAG,CAAE,CAAC;gBAAG,IAAI,GAAG,WAAG,CAAC,cAAc,CAAE,IAAI,CAAE,CAAC;SACpJ;aAAM;YACN,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,CAAC,EAAE,IAAI,CAAC,WAAW,CAAE,GAAG,CAAE,GAAG,CAAC,CAAE,CAAC;YACrD,IAAI,CAAE,mBAAW,CAAC,QAAQ,CAAE,IAAI,EAAE,GAAG,CAAE,IAAI,CAAE,mBAAW,CAAC,QAAQ,CAAE,IAAI,EAAE,GAAG,CAAE,IAAI,CAAE,mBAAW,CAAC,QAAQ,CAAE,IAAI,EAAE,GAAG,CAAE;gBAAG,IAAI,IAAI,GAAG,CAAC;SACpI;QAED,IAAI,mBAAW,CAAC,UAAU,CAAE,QAAQ,EAAE,GAAG,CAAE,EAAG;YAC7C,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAE,CAAC;SACjD;QAED,OAAO,QAAQ,GAAG,IAAI,GAAG,QAAQ,CAAC;IACnC,CAAC;IAED,cAAc,EAAd,UAAgB,GAAU;QACzB,IAAI,CAAE,WAAG,CAAC,WAAW,CAAE,GAAG,CAAE;YAAG,OAAO,GAAG,CAAC;QAC1C,OAAO,GAAG,CAAC,SAAS,CAAE,GAAG,CAAC,OAAO,CAAE,KAAK,CAAE,GAAG,CAAC,CAAE,CAAC;IAClD,CAAC;IAED,MAAM,EAAN,UAAQ,GAAU,EAAE,oBAAkD,EAAE,SAAiB;QACxF,IAAI,CAAE,gBAAQ,CAAE,oBAAoB,CAAE;YAAG,OAAO,sBAAsB,CAAE,GAAG,EAAE,oBAAoB,CAAE,CAAC;QAEpG,IAAM,MAAM,GAAU,oBAAoB,CAAC;QAE3C,IAAI,WAAG,CAAC,UAAU,CAAE,GAAG,CAAE,IAAI,CAAE,GAAG,CAAC,UAAU,CAAE,SAAU,CAAE;YAAG,OAAO,GAAG,CAAC;QAEzE,OAAW,MAAM,SAAM,GAAG,CAAC,SAAS,CAAE,SAAU,CAAC,MAAM,CAAK,CAAC;IAC9D,CAAC;CACD,CAAC;AAEF,SAAS,sBAAsB,CAAE,GAAU,EAAE,YAAiC;IAC7E,IAAM,aAAa,GAAwC,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC3F,OAAO,IAAI,EAAG;QACb,IAAM,MAAM,GAAsC,aAAa,CAAC,IAAI,EAAE,CAAC;QACvE,IAAI,MAAM,CAAC,IAAI;YAAG,OAAO,GAAG,CAAC;QAEzB,IAAA,iBAAuD,EAArD,cAAM,EAAE,iBAA6C,CAAC;QAC5D,IAAI,CAAE,WAAG,CAAC,UAAU,CAAE,SAAS,CAAE;YAAG,SAAS;QAC7C,IAAI,CAAE,GAAG,CAAC,UAAU,CAAE,SAAS,CAAE;YAAG,SAAS;QAE7C,OAAO,WAAG,CAAC,MAAM,CAAE,GAAG,EAAE,MAAM,EAAE,SAAS,CAAE,CAAC;KAC5C;AACF,CAAC","file":"URI.js","sourcesContent":["import { IllegalArgumentError } from \"../Errors/IllegalArgumentError\";\n\nimport { DigestedObjectSchema } from \"../ObjectSchema/DigestedObjectSchema\";\n\nimport { isString, StringUtils, UUIDUtils } from \"../Utils\";\n\n\n/**\n * Utils for URI strings.\n */\nexport interface URIFactory {\n\t/**\n\t * Returns true if the URI provided contains a fragment.\n\t * @param uri URI to check.\n\t */\n\thasFragment( uri:string ):boolean;\n\n\t/**\n\t * Returns true if the URI provided contains query parameters.\n\t * @param uri URI to check.\n\t */\n\thasQuery( uri:string ):boolean;\n\n\t/**\n\t * Returns true if the URI provided has a protocol.\n\t * @param uri URI to check.\n\t */\n\thasProtocol( uri:string ):boolean;\n\n\t/**\n\t * Returns true if the URI provided is absolute.\n\t * @param uri URI to check.\n\t */\n\tisAbsolute( uri:string ):boolean;\n\n\t/**\n\t * Returns true if the URI provided is relative.\n\t * @param uri URI to check.\n\t */\n\tisRelative( uri:string ):boolean;\n\n\t/**\n\t * Returns true if the URI provided reference to a BlankNode.\n\t * @param uri URI to check.\n\t */\n\tisBNodeID( uri:string ):boolean;\n\n\t/**\n\t * Returns an ID for a BlankNode using a universally unique identifier (UUID).\n\t */\n\tgenerateBNodeID():string;\n\n\t/**\n\t * Returns true if the URI provided has a prefix.\n\t * @param uri URI to check.\n\t */\n\tisPrefixed( uri:string ):boolean;\n\n\t/**\n\t * Returns true if the first URI is a fragment of the second URI provided.\n\t * @param fragmentURI URI to check.\n\t * @param uri Base URI to be checked against {@param fragmentURI}.\n\t */\n\tisFragmentOf( fragmentURI:string, uri:string ):boolean;\n\n\t/**\n\t * Returns true if the first URI is parent of the second URI provided.\n\t * @param baseURI URI to check its the parent.\n\t * @param uri URI to check that is under the {@param baseURI }.\n\t */\n\tisBaseOf( baseURI:string, uri:string ):boolean;\n\n\t/**\n\t * Returns the relative URI from a base URI provided.\n\t * @param absoluteURI URI to be converted into a relative URI.\n\t * @param base The base URI to remove from the {@param absoluteURI}.\n\t */\n\tgetRelativeURI( absoluteURI:string, base:string ):string;\n\n\t/**\n\t * Returns the URI that just reference to the document of the URI provided.\n\t * @param uri URI to obtains its document URI.\n\t */\n\tgetDocumentURI( uri:string ):string;\n\n\t/**\n\t * Returns the name of the fragment in the URI provided.\n\t * If no fragment exists in the URI, null will be returned.\n\t * @param uri URI to obtains its fragment section.\n\t */\n\tgetFragment( uri:string ):string;\n\n\t/**\n\t * Returns the slug of the URI.\n\t * @param uri URI to obtain ir slug.\n\t */\n\tgetSlug( uri:string ):string;\n\n\t/**\n\t * Returns the query parameters of the URI provided in form of a Map.\n\t * @param uri URL to parse is query parameters.\n\t */\n\tgetParameters( uri:string ):Map<string, string | string[]>;\n\n\t/**\n\t * Returns a URI formed from a parent URI and a relative child URI.\n\t * @param parentURI The absolute URI to be used as the base for the resolved URI.\n\t * @param childURI The relative URI to be appended in the parent URI.\n\t */\n\tresolve( parentURI:string, childURI:string ):string;\n\n\t/**\n\t * Removes the protocol of the URI provided.\n\t * @param uri URI to remove its protocol.\n\t */\n\tremoveProtocol( uri:string ):string;\n\n\t/**\n\t * Replace a base of a URI with the prefix provided.\n\t * If the prefix can not be resolved, the URI provided will be returned.\n\t * @param uri URI to be prefixed.\n\t * @param prefix Prefix name to use in the compaction.\n\t * @param prefixURI Prefix URI to ensure the specified URI can be changed for a prefixed name.\n\t */\n\tprefix( uri:string, prefix:string, prefixURI:string ):string;\n\t/**\n\t * Replace the base of a URI with a prefix in accordance with the ObjectSchema provided.\n\t * If the prefix can not be resolved, the URI provided will be returned.\n\t * @param uri URI to be prefixed.\n\t * @param objectSchema Schema to look for a compatible prefix to use.\n\t */\n\tprefix( uri:string, objectSchema:DigestedObjectSchema ):string;\n}\n\n/**\n * Constant that implements {@link URIFactory}.\n */\nexport const URI:URIFactory = {\n\thasFragment( uri:string ):boolean {\n\t\treturn uri.indexOf( \"#\" ) !== - 1;\n\t},\n\n\thasQuery( uri:string ):boolean {\n\t\treturn uri.indexOf( \"?\" ) !== - 1;\n\t},\n\n\thasProtocol( uri:string ):boolean {\n\t\treturn StringUtils.startsWith( uri, \"https://\" ) || StringUtils.startsWith( uri, \"http://\" );\n\t},\n\n\tisAbsolute( uri:string ):boolean {\n\t\treturn StringUtils.startsWith( uri, \"http://\" )\n\t\t\t|| StringUtils.startsWith( uri, \"https://\" )\n\t\t\t|| StringUtils.startsWith( uri, \"://\" );\n\t},\n\n\tisRelative( uri:string ):boolean {\n\t\treturn ! URI.isAbsolute( uri );\n\t},\n\n\tisBNodeID( uri:string ):boolean {\n\t\treturn StringUtils.startsWith( uri, \"_:\" );\n\t},\n\n\tgenerateBNodeID():string {\n\t\treturn \"_:\" + UUIDUtils.generate();\n\t},\n\n\tisPrefixed( uri:string ):boolean {\n\t\treturn ! URI.isAbsolute( uri ) && ! URI.isBNodeID( uri ) && StringUtils.contains( uri, \":\" );\n\t},\n\n\tisFragmentOf( fragmentURI:string, uri:string ):boolean {\n\t\tif( ! URI.hasFragment( fragmentURI ) ) return false;\n\n\t\tconst documentURI:string = URI.getDocumentURI( fragmentURI );\n\t\treturn documentURI === \"\" || documentURI === uri;\n\t},\n\n\tisBaseOf( baseURI:string, uri:string ):boolean {\n\t\tif( baseURI === uri ) return true;\n\t\tif( baseURI === \"\" ) return true;\n\t\tif( URI.isRelative( uri ) && ! URI.isPrefixed( uri ) ) return true;\n\n\t\tif( uri.startsWith( baseURI ) ) {\n\t\t\tif( StringUtils.endsWith( baseURI, \"/\" ) || StringUtils.endsWith( baseURI, \"#\" ) ) return true;\n\n\t\t\tlet relativeURI:string = uri.substring( baseURI.length );\n\t\t\tif( StringUtils.startsWith( relativeURI, \"/\" ) || StringUtils.startsWith( relativeURI, \"#\" ) ) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tgetRelativeURI( absoluteURI:string, base:string ):string {\n\t\tif( ! absoluteURI.startsWith( base ) )\n\t\t\treturn absoluteURI;\n\t\treturn absoluteURI.substring( base.length );\n\t},\n\n\tgetDocumentURI( uri:string ):string {\n\t\tlet parts:string[] = uri.split( \"#\" );\n\t\tif( parts.length > 2 ) throw new IllegalArgumentError( \"The URI provided has more than one # sign.\" );\n\n\t\treturn parts[ 0 ];\n\t},\n\n\tgetFragment( uri:string ):string {\n\t\tlet parts:string[] = uri.split( \"#\" );\n\t\tif( parts.length < 2 ) throw new IllegalArgumentError( \"The URI provided hasn't a # sign.\" );\n\t\tif( parts.length > 2 ) throw new IllegalArgumentError( \"The URI provided has more than one # sign.\" );\n\n\t\treturn parts[ 1 ];\n\t},\n\n\tgetSlug( uri:string ):string {\n\t\tlet uriParts:string[] = uri.split( \"#\" );\n\t\tif( uriParts.length === 2 ) return URI.getSlug( uriParts[ 1 ] );\n\t\tif( uriParts.length > 2 ) throw new IllegalArgumentError( \"Invalid URI: The uri contains two '#' symbols.\" );\n\n\t\turi = uriParts[ 0 ];\n\n\t\tif( uri === \"\" ) return uri;\n\t\tif( uri === \"/\" ) return \"\";\n\n\t\tlet parts:string[] = uri.split( \"/\" );\n\t\tif( parts[ parts.length - 1 ] === \"\" ) {\n\t\t\treturn parts[ parts.length - 2 ];\n\t\t} else {\n\t\t\treturn parts[ parts.length - 1 ];\n\t\t}\n\t},\n\n\tgetParameters( uri:string ):Map<string, string | string[]> {\n\t\tconst parameters:Map<string, string | string[]> = new Map();\n\n\t\tif( ! URI.hasQuery( uri ) ) return parameters;\n\n\t\turi.replace( /^.*\\?/, \"\" ).split( \"&\" ).forEach( ( param:string ) => {\n\t\t\tconst parts:string[] = param\n\t\t\t\t.replace( /\\+/g, \" \" )\n\t\t\t\t.split( \"=\" );\n\n\t\t\tconst key:string = parts.shift()!;\n\t\t\tconst val:string = parts.length > 0 ? parts.join( \"=\" ) : \"\";\n\n\t\t\tif( ! parameters.has( key ) ) {\n\t\t\t\tparameters.set( key, val );\n\t\t\t} else {\n\t\t\t\tparameters.set( key, new Array<string>().concat( parameters.get( key )!, val ) );\n\t\t\t}\n\t\t} );\n\n\t\treturn parameters;\n\t},\n\n\tresolve( parentURI:string, childURI:string ):string {\n\t\tif( ! parentURI || URI.isAbsolute( childURI ) || URI.isBNodeID( childURI ) || URI.isPrefixed( childURI ) )\n\t\t\treturn childURI;\n\n\t\tlet protocol:string = parentURI.substr( 0, parentURI.indexOf( \"://\" ) + 3 );\n\t\tlet path:string = parentURI.substr( parentURI.indexOf( \"://\" ) + 3, parentURI.length - 1 );\n\t\tif( path.lastIndexOf( \"/\" ) === - 1 ) path += \"/\";\n\n\t\tif( StringUtils.startsWith( childURI, \"?\" ) || StringUtils.startsWith( childURI, \"#\" ) ) {\n\t\t\tif( URI.hasQuery( path ) ) path = path.substr( 0, path.indexOf( \"?\" ) );\n\t\t\tif( URI.hasFragment( path ) && (! StringUtils.startsWith( childURI, \"?\" ) || StringUtils.endsWith( path, \"#\" )) ) path = URI.getDocumentURI( path );\n\t\t} else {\n\t\t\tpath = path.substr( 0, path.lastIndexOf( \"/\" ) + 1 );\n\t\t\tif( ! StringUtils.endsWith( path, \"?\" ) && ! StringUtils.endsWith( path, \"#\" ) && ! StringUtils.endsWith( path, \"/\" ) ) path += \"/\";\n\t\t}\n\n\t\tif( StringUtils.startsWith( childURI, \"/\" ) ) {\n\t\t\tchildURI = childURI.substr( 1, childURI.length );\n\t\t}\n\n\t\treturn protocol + path + childURI;\n\t},\n\n\tremoveProtocol( uri:string ):string {\n\t\tif( ! URI.hasProtocol( uri ) ) return uri;\n\t\treturn uri.substring( uri.indexOf( \"://\" ) + 3 );\n\t},\n\n\tprefix( uri:string, prefixOrObjectSchema:string | DigestedObjectSchema, prefixURI?:string ):string {\n\t\tif( ! isString( prefixOrObjectSchema ) ) return prefixWithObjectSchema( uri, prefixOrObjectSchema );\n\n\t\tconst prefix:string = prefixOrObjectSchema;\n\n\t\tif( URI.isPrefixed( uri ) || ! uri.startsWith( prefixURI! ) ) return uri;\n\n\t\treturn `${ prefix }:${ uri.substring( prefixURI!.length ) }`;\n\t},\n};\n\nfunction prefixWithObjectSchema( uri:string, objectSchema:DigestedObjectSchema ):string {\n\tconst prefixEntries:IterableIterator<[ string, string ]> = objectSchema.prefixes.entries();\n\twhile( true ) {\n\t\tconst result:IteratorResult<[ string, string ]> = prefixEntries.next();\n\t\tif( result.done ) return uri;\n\n\t\tlet [ prefix, prefixURI ]:[ string, string ] = result.value;\n\t\tif( ! URI.isAbsolute( prefixURI ) ) continue;\n\t\tif( ! uri.startsWith( prefixURI ) ) continue;\n\n\t\treturn URI.prefix( uri, prefix, prefixURI );\n\t}\n}\n"],"sourceRoot":"../../src"}