import { IRIToken, LiteralToken, VariableToken } from "sparqler/tokens";
import { Pointer } from "../Pointer/Pointer";
import { QueryContainer } from "./QueryContainer";
import { QueryObject } from "./QueryObject";
import { QueryProperty } from "./QueryProperty";
import { QuerySchema } from "./QuerySchema";
import { QueryValue } from "./QueryValue";
export declare class QueryDocumentBuilder {
    static readonly ALL: Readonly<{}>;
    static readonly FULL: Readonly<{}>;
    static readonly INHERIT: Readonly<{}>;
    readonly inherit: Readonly<{}>;
    readonly all: Readonly<{}>;
    readonly _queryContainer: QueryContainer;
    readonly _queryProperty: QueryProperty;
    constructor(queryContainer: QueryContainer, queryProperty: QueryProperty);
    property(name?: string): VariableToken | IRIToken | LiteralToken;
    value(value: string | number | boolean | Date): QueryValue;
    object(object: Pointer | string): QueryObject;
    withType(type: string): this;
    properties(propertiesSchema: QuerySchema): this;
}
export declare class SubQueryDocumentsBuilder extends QueryDocumentBuilder {
    filter(constraint: string): this;
    values(...values: (QueryValue | QueryObject)[]): this;
}
