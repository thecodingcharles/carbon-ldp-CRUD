import { Path, PathBuilder } from "sparqler/patterns";
import { GraphToken, IRIToken, LiteralToken, PathToken, PatternToken, SubjectToken, ValuesToken, VariableToken } from "sparqler/tokens";
import { DigestedObjectSchema } from "../ObjectSchema/DigestedObjectSchema";
import { DigestedObjectSchemaProperty } from "../ObjectSchema/DigestedObjectSchemaProperty";
import { QueryablePropertyData } from "./QueryablePropertyData";
import { QueryContainer } from "./QueryContainer";
import { QueryPropertyData } from "./QueryPropertyData";
import { QueryPropertyType } from "./QueryPropertyType";
import { QuerySubPropertyData } from "./QuerySubPropertyData";
import { SubQueryPropertyDefinition } from "./SubQueryPropertyDefinition";
export declare class QueryProperty implements QueryablePropertyData {
    readonly queryContainer: QueryContainer;
    readonly parent?: QueryProperty;
    readonly name: string;
    readonly fullName: string;
    readonly variable: VariableToken;
    readonly identifier: VariableToken | LiteralToken | IRIToken;
    readonly definition: DigestedObjectSchemaProperty;
    readonly pathBuilderFn?: (pathBuilder: PathBuilder) => Path;
    propertyType?: QueryPropertyType;
    optional: boolean;
    readonly subProperties: Map<string, QueryProperty>;
    readonly values: (LiteralToken | IRIToken)[];
    protected readonly _types: string[];
    protected readonly _filters: string[];
    protected _searchSchema: DigestedObjectSchema | undefined;
    constructor(data: QueryPropertyData);
    hasProperties(): boolean;
    getProperty(path?: string, flags?: {
        create: true;
        inherit?: false;
    }): QueryProperty | undefined;
    addProperty(propertyName: string, propertyDefinition: SubQueryPropertyDefinition): QueryProperty;
    _addSubProperty(propertyName: string, data: QuerySubPropertyData): QueryProperty;
    protected __getDefinition(propertyName: string, propertyDefinition: SubQueryPropertyDefinition): DigestedObjectSchemaProperty;
    protected __getInheritDefinition(propertyName: string, propertyURI?: string): DigestedObjectSchemaProperty | undefined;
    _isComplete(): boolean;
    _isPartial(): boolean;
    _isEmpty(): boolean;
    setType(type: QueryPropertyType): void;
    addType(type: string): void;
    addValues(values: (LiteralToken | IRIToken)[]): void;
    addFilter(constraint: string): void;
    setObligatory(flags?: {
        inheritParents: true;
    }): void;
    _getVariable(name: string): VariableToken;
    protected __createIRIToken(): IRIToken;
    protected __createPathToken(): PathToken | VariableToken;
    protected _getContextVariable(): VariableToken | IRIToken;
    protected _getContextGraph(): GraphToken;
    getSelfPattern(): PatternToken | undefined;
    protected __createSelfPattern(): PatternToken | undefined;
    protected __addPropertyTo(subject: SubjectToken): SubjectToken;
    getSearchPatterns(): PatternToken[];
    protected __createSearchPatterns(): PatternToken[];
    protected __createValuesPattern(): ValuesToken | undefined;
    protected __createSelfTypeFilter(): PatternToken | undefined;
    protected __createPartialSearchPatterns(): PatternToken[];
    protected __createSubPropertiesPatterns(): PatternToken[];
    protected __createTypesSearchPatterns(): PatternToken;
    protected __addTypesTo(pattern: SubjectToken): void;
    protected __createTypesTokens(): IRIToken[];
    protected __createSearchAllPattern(): GraphToken;
    protected __createSearchGraphPattern(): GraphToken;
    protected __getValuedPatterns(): PatternToken[] | undefined;
    getConstructPatterns(): SubjectToken[];
    protected __createSelfConstructPattern(): SubjectToken | undefined;
    protected __createCompleteConstructPattern(): SubjectToken;
    protected __createPartialConstructPattern(): SubjectToken;
    protected __createTypesPattern(): SubjectToken;
    protected __createAllPattern(): SubjectToken;
    protected __createGraphSubPattern(): SubjectToken;
    protected __getSelfToken(): VariableToken | IRIToken;
    getSchemaFor(object: object): DigestedObjectSchema;
    protected __createSchema(): DigestedObjectSchema;
    protected _getSearchSchema(): DigestedObjectSchema;
}
