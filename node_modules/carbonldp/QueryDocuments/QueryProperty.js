"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var patterns_1 = require("sparqler/patterns");
var tokens_1 = require("sparqler/tokens");
var IllegalActionError_1 = require("../Errors/IllegalActionError");
var DigestedObjectSchema_1 = require("../ObjectSchema/DigestedObjectSchema");
var ObjectSchemaDigester_1 = require("../ObjectSchema/ObjectSchemaDigester");
var C_1 = require("../Vocabularies/C");
var QueryPropertyType_1 = require("./QueryPropertyType");
var Utils_1 = require("./Utils");
var QueryProperty = (function () {
    function QueryProperty(data) {
        this.queryContainer = data.queryContainer;
        this.parent = data.parent;
        this.name = data.name;
        this.fullName = data.parent
            ? data.parent.fullName + "." + data.name
            : data.name;
        this.definition = data.definition;
        this.pathBuilderFn = data.pathBuilderFn;
        this.propertyType = data.propertyType;
        this.optional = data.optional === void 0
            ? true
            : data.optional;
        this.subProperties = new Map();
        this.values = data.values ? data.values : [];
        this._types = [];
        this._filters = [];
    }
    Object.defineProperty(QueryProperty.prototype, "variable", {
        get: function () {
            return this.queryContainer
                .getVariable(this.fullName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryProperty.prototype, "identifier", {
        get: function () {
            if (this.values.length === 1) {
                return this.values[0];
            }
            return this.queryContainer
                .getVariable(this.fullName);
        },
        enumerable: true,
        configurable: true
    });
    QueryProperty.prototype.hasProperties = function () {
        return this.subProperties.size !== 0
            || this._isComplete();
    };
    QueryProperty.prototype.getProperty = function (path, flags) {
        if (!path)
            return this;
        var rootPath = Utils_1._getRootPath(path);
        var property = this.subProperties.get(rootPath);
        if (!property) {
            if (rootPath === path && flags && flags.create && this._isComplete()) {
                var newProperty = this.addProperty(rootPath, flags);
                if (this.propertyType === QueryPropertyType_1.QueryPropertyType.FULL)
                    newProperty.setType(QueryPropertyType_1.QueryPropertyType.ALL);
                return newProperty;
            }
            return;
        }
        var restPath = path.substr(rootPath.length + 1);
        return property.getProperty(restPath);
    };
    QueryProperty.prototype.addProperty = function (propertyName, propertyDefinition) {
        var definition = this
            .__getDefinition(propertyName, propertyDefinition);
        return this._addSubProperty(propertyName, {
            definition: definition,
            pathBuilderFn: propertyDefinition.path,
            optional: !propertyDefinition.required,
        });
    };
    QueryProperty.prototype._addSubProperty = function (propertyName, data) {
        var property = new QueryProperty(tslib_1.__assign({}, data, { name: propertyName, queryContainer: this.queryContainer, parent: this }));
        this.subProperties.set(propertyName, property);
        return property;
    };
    QueryProperty.prototype.__getDefinition = function (propertyName, propertyDefinition) {
        var digestedDefinition = this.queryContainer
            .digestProperty(propertyName, propertyDefinition);
        if (propertyDefinition.inherit === false)
            return digestedDefinition;
        var propertyURI = "@id" in propertyDefinition ? digestedDefinition.uri : void 0;
        var inheritDefinition = this
            .__getInheritDefinition(propertyName, propertyURI);
        if (inheritDefinition) {
            for (var key in inheritDefinition) {
                if (digestedDefinition[key] !== null && key !== "uri")
                    continue;
                digestedDefinition[key] = inheritDefinition[key];
            }
        }
        return digestedDefinition;
    };
    QueryProperty.prototype.__getInheritDefinition = function (propertyName, propertyURI) {
        var searchSchema = this._getSearchSchema();
        var localDefinition = Utils_1._getMatchingDefinition(searchSchema, searchSchema, propertyName, propertyURI);
        if (localDefinition)
            return localDefinition;
        var schemas = this.queryContainer.context
            ._getTypeObjectSchemas(this._types);
        for (var _i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {
            var targetSchema = schemas_1[_i];
            var definition = Utils_1._getMatchingDefinition(searchSchema, targetSchema, propertyName, propertyURI);
            if (definition)
                return definition;
        }
    };
    QueryProperty.prototype._isComplete = function () {
        return this.propertyType === QueryPropertyType_1.QueryPropertyType.ALL
            || this.propertyType === QueryPropertyType_1.QueryPropertyType.FULL;
    };
    QueryProperty.prototype._isPartial = function () {
        return this.propertyType === QueryPropertyType_1.QueryPropertyType.PARTIAL
            || this.propertyType === QueryPropertyType_1.QueryPropertyType.ALL
            || !!this.subProperties.size;
    };
    QueryProperty.prototype._isEmpty = function () {
        return this.propertyType === undefined
            || this.propertyType === QueryPropertyType_1.QueryPropertyType.EMPTY;
    };
    QueryProperty.prototype.setType = function (type) {
        this.propertyType = Utils_1._getBestType(this.propertyType, type);
    };
    QueryProperty.prototype.addType = function (type) {
        var schema = this._getSearchSchema();
        var iri = schema.resolveURI(type, { vocab: true });
        this._types.push(iri);
        if (!this.queryContainer.context.hasObjectSchema(iri))
            return;
        var typedSchema = this.queryContainer.context.getObjectSchema(iri);
        ObjectSchemaDigester_1.ObjectSchemaDigester._combineSchemas([schema, typedSchema]);
    };
    QueryProperty.prototype.addValues = function (values) {
        var _a;
        (_a = this.values).push.apply(_a, values);
    };
    QueryProperty.prototype.addFilter = function (constraint) {
        this._filters.push(constraint);
    };
    QueryProperty.prototype.setObligatory = function (flags) {
        if (!this.optional)
            return;
        this.optional = false;
        if (flags && flags.inheritParents && this.parent)
            this.parent.setObligatory(flags);
    };
    QueryProperty.prototype._getVariable = function (name) {
        return this.queryContainer
            .getVariable(this.fullName + "." + name);
    };
    QueryProperty.prototype.__createIRIToken = function () {
        return this
            .queryContainer
            .compactIRI(this.definition.uri);
    };
    QueryProperty.prototype.__createPathToken = function () {
        if (!this.pathBuilderFn)
            return this.__createIRIToken();
        var pathBuilder = patterns_1.PathBuilder
            .createFrom(this.queryContainer, {});
        return this.pathBuilderFn
            .call(void 0, pathBuilder)
            .getPath();
    };
    QueryProperty.prototype._getContextVariable = function () {
        if (this.propertyType === QueryPropertyType_1.QueryPropertyType.FULL)
            return this.__getSelfToken();
        return this._getVariable("_graph");
    };
    QueryProperty.prototype._getContextGraph = function () {
        return new tokens_1.GraphToken(this._getContextVariable());
    };
    QueryProperty.prototype.getSelfPattern = function () {
        var pattern = this.__createSelfPattern();
        if (!pattern)
            return;
        if (!this.optional)
            return pattern;
        return new tokens_1.OptionalToken()
            .addPattern(pattern);
    };
    QueryProperty.prototype.__createSelfPattern = function () {
        if (!this.parent)
            throw new IllegalActionError_1.IllegalActionError("Cannot create pattern without a parent.");
        return this
            .__addPropertyTo(new tokens_1.SubjectToken(this.parent.identifier));
    };
    QueryProperty.prototype.__addPropertyTo = function (subject) {
        return subject
            .addProperty(new tokens_1.PropertyToken(this.__createPathToken())
            .addObject(this.identifier));
    };
    QueryProperty.prototype.getSearchPatterns = function () {
        var _a;
        var patterns = this
            .__createSearchPatterns();
        if (!this.optional)
            return patterns;
        return [(_a = new tokens_1.OptionalToken()).addPattern.apply(_a, patterns),];
    };
    QueryProperty.prototype.__createSearchPatterns = function () {
        var patterns = [];
        var values = this.__createValuesPattern();
        if (values)
            patterns.push(values);
        var selfTriple = this.__createSelfPattern();
        if (selfTriple) {
            if (this.parent && !this.pathBuilderFn) {
                patterns.push(this.parent._getContextGraph()
                    .addPattern(selfTriple));
            }
            else {
                patterns.push(selfTriple);
            }
        }
        switch (this.propertyType) {
            case QueryPropertyType_1.QueryPropertyType.EMPTY:
                patterns.push(this.__createTypesSearchPatterns());
                break;
            case QueryPropertyType_1.QueryPropertyType.PARTIAL:
                patterns.push.apply(patterns, this.__createPartialSearchPatterns());
                break;
            case QueryPropertyType_1.QueryPropertyType.ALL:
                patterns.push(this.__createSearchAllPattern());
                patterns.push.apply(patterns, this.__createSubPropertiesPatterns());
                break;
            case QueryPropertyType_1.QueryPropertyType.FULL:
                patterns.push(this.__createSearchGraphPattern());
                patterns.push.apply(patterns, this.__createSubPropertiesPatterns());
                break;
            default:
                var selfTypeFilter = this.__createSelfTypeFilter();
                if (selfTypeFilter)
                    patterns.push(selfTypeFilter);
                break;
        }
        if (this._filters.length) {
            var filters = this._filters
                .map(function (constraint) { return new tokens_1.FilterToken(constraint); });
            patterns.push.apply(patterns, filters);
        }
        return patterns;
    };
    QueryProperty.prototype.__createValuesPattern = function () {
        if (this.values.length <= 1)
            return;
        var values = new tokens_1.ValuesToken()
            .addVariables(this.variable);
        this.values
            .forEach(function (value) { return values.addValues(value); });
        return values;
    };
    QueryProperty.prototype.__createSelfTypeFilter = function () {
        var identifier = this.identifier;
        if (this.definition.literal) {
            var literalToken = this.queryContainer
                .compactIRI(this.definition.literalType);
            if (identifier.token === "variable")
                return new tokens_1.FilterToken("datatype( " + identifier + " ) = " + literalToken);
        }
        if (this.definition.pointerType !== null && identifier.token === "variable")
            return new tokens_1.FilterToken("! isLiteral( " + identifier + " )");
    };
    QueryProperty.prototype.__createPartialSearchPatterns = function () {
        return [
            this.__createTypesSearchPatterns()
        ].concat(this.__createSubPropertiesPatterns());
    };
    QueryProperty.prototype.__createSubPropertiesPatterns = function () {
        var patterns = [];
        this.subProperties.forEach(function (subProperty) {
            patterns.push.apply(patterns, subProperty.getSearchPatterns());
        });
        return patterns;
    };
    QueryProperty.prototype.__createTypesSearchPatterns = function () {
        var types = this.__createTypesPattern();
        var pattern = this.propertyType === QueryPropertyType_1.QueryPropertyType.EMPTY
            ? types
            : this._getContextGraph()
                .addPattern(types);
        if (!this._types.length)
            return new tokens_1.OptionalToken()
                .addPattern(pattern);
        this.__addTypesTo(types);
        return pattern;
    };
    QueryProperty.prototype.__addTypesTo = function (pattern) {
        var _a;
        var types = this
            .__createTypesTokens();
        var aProperty = pattern.properties
            .find(function (_) { return _.verb === "a"; });
        if (!aProperty) {
            aProperty = new tokens_1.PropertyToken("a");
            pattern.addProperty(aProperty);
        }
        (_a = aProperty.objects).unshift.apply(_a, types);
    };
    QueryProperty.prototype.__createTypesTokens = function () {
        var _this = this;
        return this._types
            .map(function (type) { return _this.queryContainer.compactIRI(type); });
    };
    QueryProperty.prototype.__createSearchAllPattern = function () {
        var pattern = this.__createAllPattern();
        if (this._types.length)
            this.__addTypesTo(pattern);
        return this
            ._getContextGraph()
            .addPattern(pattern);
    };
    QueryProperty.prototype.__createSearchGraphPattern = function () {
        var graph = new tokens_1.GraphToken(this.__getSelfToken());
        if (this._types.length) {
            var pattern = new tokens_1.SubjectToken(this.__getSelfToken());
            this.__addTypesTo(pattern);
            graph.addPattern(pattern);
        }
        return graph
            .addPattern(this.__createGraphSubPattern());
    };
    QueryProperty.prototype.__getValuedPatterns = function () {
        var _a;
        if (this.optional)
            return;
        var selfSubject = new tokens_1.SubjectToken(this.identifier);
        var patterns = [selfSubject];
        var valuesPattern = this.__createValuesPattern();
        if (valuesPattern)
            patterns.push(valuesPattern);
        if (this._types.length) {
            var typesTokens = this
                .__createTypesTokens();
            selfSubject
                .addProperty((_a = new tokens_1.PropertyToken("a")).addObject.apply(_a, typesTokens));
        }
        this.subProperties.forEach(function (subProperty) {
            var subPatterns = subProperty
                .__getValuedPatterns();
            if (subPatterns) {
                subProperty.__addPropertyTo(selfSubject);
                patterns.push.apply(patterns, subPatterns);
            }
        });
        if (!selfSubject.properties.length)
            return patterns.slice(1);
        return patterns;
    };
    QueryProperty.prototype.getConstructPatterns = function () {
        var patterns = [];
        var selfPattern = this.__createSelfConstructPattern();
        if (selfPattern)
            patterns.push(selfPattern);
        this.subProperties.forEach(function (property) {
            var subPatterns = property
                .getConstructPatterns();
            patterns.push.apply(patterns, subPatterns);
        });
        return patterns;
    };
    QueryProperty.prototype.__createSelfConstructPattern = function () {
        switch (this.propertyType) {
            case QueryPropertyType_1.QueryPropertyType.EMPTY:
                return this.__createTypesPattern();
            case QueryPropertyType_1.QueryPropertyType.PARTIAL:
                return this.__createPartialConstructPattern();
            case QueryPropertyType_1.QueryPropertyType.ALL:
            case QueryPropertyType_1.QueryPropertyType.FULL:
                return this.__createCompleteConstructPattern()
                    .addProperty(new tokens_1.PropertyToken(this.queryContainer.compactIRI(C_1.C.document))
                    .addObject(this._getContextVariable()));
            default:
                return;
        }
    };
    QueryProperty.prototype.__createCompleteConstructPattern = function () {
        switch (this.propertyType) {
            case QueryPropertyType_1.QueryPropertyType.ALL:
                return this.__createAllPattern();
            case QueryPropertyType_1.QueryPropertyType.FULL:
                return this.__createGraphSubPattern();
            default:
                throw new IllegalActionError_1.IllegalActionError("Invalid property type");
        }
    };
    QueryProperty.prototype.__createPartialConstructPattern = function () {
        var subject = this.__createTypesPattern()
            .addProperty(new tokens_1.PropertyToken(this.queryContainer.compactIRI(C_1.C.document))
            .addObject(this._getContextVariable()));
        this.subProperties.forEach(function (subProperty) {
            subject.addProperty(new tokens_1.PropertyToken(subProperty.__createIRIToken())
                .addObject(subProperty.identifier));
        });
        return subject;
    };
    QueryProperty.prototype.__createTypesPattern = function () {
        return new tokens_1.SubjectToken(this.identifier)
            .addProperty(new tokens_1.PropertyToken("a")
            .addObject(this._getVariable("types")));
    };
    QueryProperty.prototype.__createAllPattern = function () {
        return new tokens_1.SubjectToken(this.__getSelfToken())
            .addProperty(new tokens_1.PropertyToken(this._getVariable("_predicate"))
            .addObject(this._getVariable("_object")));
    };
    QueryProperty.prototype.__createGraphSubPattern = function () {
        return new tokens_1.SubjectToken(this._getVariable("_subject"))
            .addProperty(new tokens_1.PropertyToken(this._getVariable("_predicate"))
            .addObject(this._getVariable("_object")));
    };
    QueryProperty.prototype.__getSelfToken = function () {
        var identifier = this.identifier;
        if (identifier.token === "literal")
            throw new IllegalActionError_1.IllegalActionError("Property is not a resource.");
        return identifier;
    };
    QueryProperty.prototype.getSchemaFor = function (object) {
        switch (this.propertyType) {
            case void 0:
                return new DigestedObjectSchema_1.DigestedObjectSchema();
            case QueryPropertyType_1.QueryPropertyType.EMPTY:
            case QueryPropertyType_1.QueryPropertyType.PARTIAL:
                return this.__createSchema();
            default:
                return ObjectSchemaDigester_1.ObjectSchemaDigester._combineSchemas([
                    this.queryContainer.context.registry.getSchemaFor(object),
                    this.__createSchema(),
                ]);
        }
    };
    QueryProperty.prototype.__createSchema = function () {
        var schema = new DigestedObjectSchema_1.DigestedObjectSchema();
        this.subProperties.forEach(function (property) {
            schema.properties.set(property.name, property.definition);
        });
        return schema;
    };
    QueryProperty.prototype._getSearchSchema = function () {
        if (this._searchSchema)
            return this._searchSchema;
        return this._searchSchema = this.queryContainer.getGeneralSchema();
    };
    return QueryProperty;
}());
exports.QueryProperty = QueryProperty;

//# sourceMappingURL=QueryProperty.js.map
