import { Path, PathBuilder } from "sparqler/patterns";
import { IRIToken, LiteralToken } from "sparqler/tokens";
import { DigestedObjectSchema } from "../ObjectSchema/DigestedObjectSchema";
import { DigestedObjectSchemaProperty } from "../ObjectSchema/DigestedObjectSchemaProperty";
import { QueryablePropertyData } from "./QueryablePropertyData";
import { QueryPropertyType } from "./QueryPropertyType";
export declare class QueryableProperty {
    readonly definition: DigestedObjectSchemaProperty;
    readonly pathBuilderFn?: (pathBuilder: PathBuilder) => Path;
    propertyType?: QueryPropertyType;
    optional: boolean;
    readonly subProperties: Map<string, QueryableProperty>;
    readonly values: (IRIToken | LiteralToken)[];
    constructor(data: QueryablePropertyData);
    setType(type: QueryPropertyType): void;
    setProperty(propertyName: string, property: QueryableProperty): void;
    getProperty(propertyName: string, data?: QueryablePropertyData): QueryableProperty;
    mergeData(propertyName: string, data: QueryablePropertyData): void;
    protected __mergeDefinition(propertyName: string, newDefinition: DigestedObjectSchemaProperty): void;
    getSchema(): DigestedObjectSchema;
}
