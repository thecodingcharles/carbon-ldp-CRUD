"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var data_1 = require("sparqler/data");
var iri_1 = require("sparqler/iri");
var patterns_1 = require("sparqler/patterns");
var tokens_1 = require("sparqler/tokens");
var IllegalArgumentError_1 = require("../Errors/IllegalArgumentError");
var ObjectSchemaDigester_1 = require("../ObjectSchema/ObjectSchemaDigester");
var QueryContainerProperty_1 = require("./QueryContainerProperty");
var QueryRootProperty_1 = require("./QueryRootProperty");
var QueryVariable_1 = require("./QueryVariable");
var QueryContainer = (function (_super) {
    tslib_1.__extends(QueryContainer, _super);
    function QueryContainer(context, propertyData) {
        var _this = this;
        var schema = context.getObjectSchema();
        _this = _super.call(this, {
            iriResolver: __createIRIResolver(schema),
            targetToken: void 0,
            fluentPathFactory: patterns_1.FluentPath.createFrom,
            deniableFluentPathFactory: patterns_1.DeniableFluentPath.createFrom,
        }) || this;
        _this.context = context;
        _this._generalSchema = schema;
        _this._prefixesTuples = Array.from(schema.prefixes);
        _this._variablesCounter = 0;
        _this._variablesMap = new Map();
        if ("uris" in propertyData) {
            var values = propertyData.uris.map(_this.compactIRI, _this);
            _this._queryProperty = new QueryRootProperty_1.QueryRootProperty({
                queryContainer: _this,
                values: values,
            });
        }
        else {
            var iri = _this.compactIRI(propertyData.uri);
            _this._queryProperty = new QueryContainerProperty_1.QueryContainerProperty({
                queryContainer: _this,
                containerIRI: iri,
                containerPropertyType: propertyData.containerPropertyType,
            });
        }
        return _this;
    }
    QueryContainer.prototype.getVariable = function (name) {
        if (this._variablesMap.has(name))
            return this._variablesMap.get(name);
        var variable = new QueryVariable_1.QueryVariable(name, this._variablesCounter++);
        this._variablesMap.set(name, variable);
        return variable;
    };
    QueryContainer.prototype.compactIRI = function (iri) {
        var compactedIRI = this.__getCompactedIRI(iri);
        return this.iriResolver.resolve(compactedIRI);
    };
    QueryContainer.prototype.__getCompactedIRI = function (iri) {
        if (iri_1.isPrefixed(iri))
            return iri;
        var prefix = this._prefixesTuples
            .find(function (_a) {
            var x = _a[1];
            return iri.startsWith(x);
        });
        if (!prefix)
            return iri;
        var namespace = prefix[0], prefixIRI = prefix[1];
        return namespace + ":" + iri.substr(prefixIRI.length);
    };
    QueryContainer.prototype.getPrologues = function () {
        return this._prefixesTuples
            .filter(this.__isUsedPrefix, this)
            .map(__createPrefixToken);
    };
    QueryContainer.prototype.__isUsedPrefix = function (_a) {
        var namespace = _a[0];
        return !!this.iriResolver.prefixes.get(namespace);
    };
    QueryContainer.prototype.digestProperty = function (name, definition) {
        return ObjectSchemaDigester_1.ObjectSchemaDigester
            .digestProperty(name, definition, this._generalSchema);
    };
    QueryContainer.prototype.getGeneralSchema = function () {
        return ObjectSchemaDigester_1.ObjectSchemaDigester
            .combineDigestedObjectSchemas([this._generalSchema]);
    };
    QueryContainer.prototype.serializeLiteral = function (type, value) {
        if (!this.context.jsonldConverter.literalSerializers.has(type))
            throw new IllegalArgumentError_1.IllegalArgumentError("Type \"" + type + "\" hasn't a defined serializer.");
        return this.context.jsonldConverter
            .literalSerializers
            .get(type)
            .serialize(value);
    };
    return QueryContainer;
}(patterns_1.FluentPathContainer));
exports.QueryContainer = QueryContainer;
function __createIRIResolver(schema) {
    var iriResolver = new data_1.IRIResolver(void 0, schema.vocab);
    Array.from(schema.prefixes.keys())
        .forEach(function (key) { return iriResolver.prefixes.set(key, false); });
    return iriResolver;
}
function __createPrefixToken(_a) {
    var namespace = _a[0], iri = _a[1];
    return new tokens_1.PrefixToken(namespace, new tokens_1.IRIRefToken(iri));
}

//# sourceMappingURL=QueryContainer.js.map
