import { FluentPathContainer } from "sparqler/patterns";
import { IRIToken, PrefixToken } from "sparqler/tokens";
import { AbstractContext } from "../Context/AbstractContext";
import { DigestedObjectSchema } from "../ObjectSchema/DigestedObjectSchema";
import { DigestedObjectSchemaProperty } from "../ObjectSchema/DigestedObjectSchemaProperty";
import { ObjectSchemaProperty } from "../ObjectSchema/ObjectSchemaProperty";
import { RegisteredPointer } from "../Registry/RegisteredPointer";
import { QueryContainerProperty } from "./QueryContainerProperty";
import { QueryContainerPropertyType } from "./QueryContainerPropertyType";
import { QueryRootProperty } from "./QueryRootProperty";
import { QueryVariable } from "./QueryVariable";
export declare class QueryContainer extends FluentPathContainer<undefined> {
    readonly context: AbstractContext<RegisteredPointer, any, any>;
    readonly _queryProperty: QueryRootProperty | QueryContainerProperty;
    private readonly _generalSchema;
    private readonly _prefixesTuples;
    private readonly _variablesMap;
    private _variablesCounter;
    constructor(context: AbstractContext<any, any, any>, propertyData: {
        uri: string;
        containerPropertyType: QueryContainerPropertyType;
    } | {
        uris: string[];
    });
    getVariable(name: string): QueryVariable;
    compactIRI(iri: string): IRIToken;
    protected __getCompactedIRI(iri: string): string;
    getPrologues(): PrefixToken[];
    protected __isUsedPrefix([namespace,]: [string, string]): boolean;
    digestProperty(name: string, definition: ObjectSchemaProperty): DigestedObjectSchemaProperty;
    getGeneralSchema(): DigestedObjectSchema;
    serializeLiteral(type: string, value: any): string;
}
