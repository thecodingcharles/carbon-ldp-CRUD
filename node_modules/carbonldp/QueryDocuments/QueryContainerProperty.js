"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tokens_1 = require("sparqler/tokens");
var IllegalArgumentError_1 = require("../Errors/IllegalArgumentError");
var IllegalStateError_1 = require("../Errors/IllegalStateError");
var DigestedObjectSchemaProperty_1 = require("../ObjectSchema/DigestedObjectSchemaProperty");
var LDP_1 = require("../Vocabularies/LDP");
var QueryContainerPropertyType_1 = require("./QueryContainerPropertyType");
var QueryProperty_1 = require("./QueryProperty");
var QueryPropertyType_1 = require("./QueryPropertyType");
var QueryContainerProperty = (function (_super) {
    tslib_1.__extends(QueryContainerProperty, _super);
    function QueryContainerProperty(data) {
        var _this = _super.call(this, {
            queryContainer: data.queryContainer,
            name: data.containerPropertyType,
            definition: new DigestedObjectSchemaProperty_1.DigestedObjectSchemaProperty(),
            optional: false,
            propertyType: QueryPropertyType_1.QueryPropertyType.PARTIAL,
        }) || this;
        _this.containerIRI = data.containerIRI;
        _this.containerPropertyType = data.containerPropertyType;
        return _this;
    }
    QueryContainerProperty.prototype.__createSelfPattern = function () {
        var subSelect = new tokens_1.SubSelectToken("DISTINCT")
            .addVariable(this.variable);
        switch (this.containerPropertyType) {
            case QueryContainerPropertyType_1.QueryContainerPropertyType.CHILD:
                subSelect.addPattern(this.__createChildSelfPattern());
                break;
            case QueryContainerPropertyType_1.QueryContainerPropertyType.MEMBER:
                subSelect.addPattern.apply(subSelect, this.__createMemberSelfPattern());
                break;
            default:
                throw new IllegalStateError_1.IllegalStateError("Invalid container type.");
        }
        var valuedPatterns = this.__getValuedPatterns();
        if (valuedPatterns)
            subSelect.addPattern.apply(subSelect, valuedPatterns);
        this.__addOrderTo(subSelect);
        this.__addLimitTo(subSelect);
        this.__addOffsetTo(subSelect);
        return subSelect;
    };
    QueryContainerProperty.prototype.__createChildSelfPattern = function () {
        return new tokens_1.SubjectToken(this.containerIRI)
            .addProperty(new tokens_1.PropertyToken(this.queryContainer.compactIRI(LDP_1.LDP.contains))
            .addObject(this.identifier));
    };
    QueryContainerProperty.prototype.__createMemberSelfPattern = function () {
        var membershipResource = this.queryContainer.getVariable("membershipResource");
        var hasMemberRelation = this.queryContainer.getVariable("hasMemberRelation");
        var memberRelations = new tokens_1.SubSelectToken()
            .addVariable(membershipResource, hasMemberRelation)
            .addPattern(new tokens_1.SubjectToken(this.containerIRI)
            .addProperty(new tokens_1.PropertyToken(this.queryContainer.compactIRI(LDP_1.LDP.membershipResource))
            .addObject(membershipResource))
            .addProperty(new tokens_1.PropertyToken(this.queryContainer.compactIRI(LDP_1.LDP.hasMemberRelation))
            .addObject(hasMemberRelation)));
        var memberSelection = new tokens_1.SubjectToken(membershipResource)
            .addProperty(new tokens_1.PropertyToken(hasMemberRelation)
            .addObject(this.identifier));
        return [memberRelations, memberSelection];
    };
    QueryContainerProperty.prototype.__addLimitTo = function (subSelect) {
        if (this._limit === void 0)
            return;
        subSelect.addModifier(new tokens_1.LimitToken(this._limit));
    };
    QueryContainerProperty.prototype.__addOffsetTo = function (subSelect) {
        if (this._offset === void 0)
            return;
        subSelect.addModifier(new tokens_1.OffsetToken(this._offset));
    };
    QueryContainerProperty.prototype.__addOrderTo = function (subSelect) {
        if (!this.order)
            return;
        var targetProperty = this.getProperty(this.order.path, { create: true });
        if (!targetProperty)
            throw new IllegalArgumentError_1.IllegalArgumentError("Property \"" + this.order.path + "\" hasn't been defined.");
        var identifier = targetProperty.identifier;
        var constraint = identifier.token === "variable"
            ? identifier
            : "( " + identifier + " )";
        subSelect.addModifier(new tokens_1.OrderToken(constraint, this.order.flow));
        var orderPatterns = this.__createSubPatternsFrom(targetProperty);
        orderPatterns
            .filter(function (pattern) {
            if (pattern.token !== "subject")
                return true;
            var targetSubject = subSelect
                .where.groupPattern.patterns
                .find(function (selectPattern) {
                if (selectPattern.token !== "subject")
                    return false;
                return selectPattern.subject === pattern.subject;
            });
            if (!targetSubject)
                return true;
            pattern.properties.forEach(function (property) {
                var targetPredicate = targetSubject
                    .properties
                    .find(function (selectProperty) {
                    return property.toString() === selectProperty.toString();
                });
                if (!targetPredicate)
                    targetSubject.addProperty(property);
                property.objects.forEach(function (object) {
                    var targetObject = targetPredicate
                        .objects
                        .find(function (selectObject) {
                        return selectObject.toString() === object.toString();
                    });
                    if (!targetObject)
                        targetPredicate.addObject(object);
                });
            });
        })
            .forEach(function (pattern) {
            subSelect.addPattern(pattern);
        });
    };
    QueryContainerProperty.prototype.__createSubPatternsFrom = function (targetProperty) {
        var matchPatterns = [];
        while (targetProperty !== this) {
            var subTargetPattern = targetProperty.getSelfPattern();
            if (subTargetPattern.token !== "optional") {
                matchPatterns.unshift(subTargetPattern);
            }
            else {
                matchPatterns = [
                    subTargetPattern
                        .addPattern.apply(subTargetPattern, matchPatterns),
                ];
            }
            if (!targetProperty.parent)
                break;
            targetProperty = targetProperty.parent;
        }
        return matchPatterns;
    };
    QueryContainerProperty.prototype.__addTypesTo = function (pattern) { };
    QueryContainerProperty.prototype.setOrder = function (order) {
        this.order = order;
    };
    QueryContainerProperty.prototype.setLimit = function (limit) {
        this._limit = limit;
    };
    QueryContainerProperty.prototype.setOffset = function (offset) {
        this._offset = offset;
    };
    return QueryContainerProperty;
}(QueryProperty_1.QueryProperty));
exports.QueryContainerProperty = QueryContainerProperty;

//# sourceMappingURL=QueryContainerProperty.js.map
