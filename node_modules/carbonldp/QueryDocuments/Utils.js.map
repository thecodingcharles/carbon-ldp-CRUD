{"version":3,"sources":["QueryDocuments/Utils.ts"],"names":[],"mappings":";;AAEA,uEAAsE;AAStE,SAAgB,YAAY,CAAE,IAAW;IAChC,IAAA;;uBAAI,CAEI;IAEhB,OAAO,IAAI,CAAC;AACb,CAAC;AAND,oCAMC;AAQD,SAAgB,gBAAgB,CAAE,OAAW,EAAE,IAAW;IACzD,IAAI,OAAO,KAAK,KAAK,CAAC,IAAI,CAAE,IAAI;QAAG,OAAO,OAAO,CAAC;IAE5C,IAAA,oBAA8C,EAA5C,gBAAQ,EAAE,uBAAkC,CAAC;IAErD,IAAM,QAAQ,GAAO,OAAO,CAAE,QAAQ,CAAE,CAAC;IACzC,IAAM,QAAQ,GAAU,SAAS,CAAC,IAAI,CAAE,GAAG,CAAE,CAAC;IAE9C,OAAO,gBAAgB,CAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;AAC/C,CAAC;AATD,4CASC;AAQD,SAAgB,iBAAiB,CAAE,CAAK,EAAE,CAAK;IAC9C,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC;QAAG,OAAO,IAAI,CAAC;IACxC,IAAI,OAAO,CAAC,KAAK,QAAQ;QAAG,OAAO,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,IAAI,CAAC;IAE3E,OAAO,KAAK,CAAC;AACd,CAAC;AALD,8CAKC;AAQD,SAAgB,YAAY,CAAE,KAAuB,EAAE,KAAuB;IAC7E,IAAI,KAAK,IAAI,KAAK;QACjB,OAAO,KAAK,CAAC;IAEd,OAAO,KAAK,CAAC;AACd,CAAC;AALD,oCAKC;AAWD,SAAgB,sBAAsB,CAAE,aAAkC,EAAE,YAAiC,EAAE,YAAmB,EAAE,WAAmB;IACtJ,IAAI,CAAE,YAAY,CAAC,UAAU,CAAC,GAAG,CAAE,YAAY,CAAE;QAAG,OAAO;IAE3D,IAAM,UAAU,GAAgC,qCAAiB;SAC/D,gBAAgB,CAAE,aAAa,EAAE,YAAY,CAAC,UAAU,CAAC,GAAG,CAAE,YAAY,CAAG,CAAE,CAAC;IAElF,IAAI,WAAW,KAAK,KAAK,CAAC,IAAI,WAAW,KAAK,UAAU,CAAC,GAAG;QAC3D,OAAO,UAAU,CAAC;AACpB,CAAC;AARD,wDAQC","file":"Utils.js","sourcesContent":["import { DigestedObjectSchema } from \"../ObjectSchema/DigestedObjectSchema\";\nimport { DigestedObjectSchemaProperty } from \"../ObjectSchema/DigestedObjectSchemaProperty\";\nimport { ObjectSchemaUtils } from \"../ObjectSchema/ObjectSchemaUtils\";\n\nimport { QueryPropertyType } from \"./QueryPropertyType\";\n\n\n/**\n * Returns the root name of a full property path.\n * @param path The path to extract its root.\n */\nexport function _getRootPath( path:string ):string {\n\tconst [ root ]:string[] = path\n\t\t.split( \".\" )\n\t\t.slice( 0, 1 );\n\n\treturn root;\n}\n\n\n/**\n * Search and returns the property value indicated by the specified path inside the element provided.\n * @param element The element where to find the desired property.\n * @param path The path in the element to the desired property.\n */\nexport function _getPathProperty( element:any, path:string ):any {\n\tif( element === void 0 || ! path ) return element;\n\n\tconst [ propName, ...restParts ] = path.split( \".\" );\n\n\tconst property:any = element[ propName ];\n\tconst restPath:string = restParts.join( \".\" );\n\n\treturn _getPathProperty( property, restPath );\n}\n\n/**\n * Returns true if the two elements provided can be classified as different type.\n * This simulates the basic comparision in the SPARQL language.\n * @param a The first element to check against.\n * @param b The second element to check against.\n */\nexport function _areDifferentType( a:any, b:any ):boolean {\n\tif( typeof a !== typeof b ) return true;\n\tif( typeof a === \"object\" ) return a instanceof Date !== b instanceof Date;\n\n\treturn false;\n}\n\n\n/**\n * Returns the general type that would match the two provided.\n * @param type1 The first type to compare.\n * @param type2 The second type to compare.\n */\nexport function _getBestType( type1:QueryPropertyType, type2:QueryPropertyType ):QueryPropertyType {\n\tif( type2 <= type1 )\n\t\treturn type1;\n\n\treturn type2;\n}\n\n/**\n * Returns the definition from the target schema that matched the name and the URI provided.\n * If no correct match is found, `undefined` will be returned.\n *\n * @param generalSchema The schema to use in the resolution of relative URI in the matched definition.\n * @param targetSchema The schema where to look for the property's definition.\n * @param propertyName The name of the property to look for.\n * @param propertyURI The optional URI that the property has to have for have a true matching.\n */\nexport function _getMatchingDefinition( generalSchema:DigestedObjectSchema, targetSchema:DigestedObjectSchema, propertyName:string, propertyURI?:string ):DigestedObjectSchemaProperty | undefined {\n\tif( ! targetSchema.properties.has( propertyName ) ) return;\n\n\tconst definition:DigestedObjectSchemaProperty = ObjectSchemaUtils\n\t\t._resolveProperty( generalSchema, targetSchema.properties.get( propertyName )! );\n\n\tif( propertyURI === void 0 || propertyURI === definition.uri )\n\t\treturn definition;\n}\n"],"sourceRoot":"../../src"}