import { FinishClause } from "./clauses/FinishClause";
import { QueryClause } from "./clauses/QueryClause";
import { FinishFactory } from "./FinishFactory";
/**
 * Interface with the same name fo the SPARQLER class, that helps
 * in the definition of the methods decorated by {@link QueryClause.createFrom}
 */
export interface SPARQLER<SELECT extends FinishClause = FinishClause, ASK extends FinishClause = FinishClause> extends QueryClause<SELECT, ASK> {
}
/**
 * Class that allows to create the SPARQL query builder.
 *
 * See {@link QueryClause} for know the methods available for
 * construct the queries.
 */
export declare class SPARQLER<SELECT extends FinishClause = FinishClause, ASK extends FinishClause = FinishClause> implements SPARQLER<SELECT, ASK> {
    /**
     * Constructor that allows to create query builder with custom finish
     * methods specified by the factories provided if specified.
     *
     * If no custom factory specified {@link FinishClause.createFrom}
     * will be used instead.
     *
     * @param finishSelectFactory Factory for finishing a SELECT query.
     * @param finishAskFactory Factory for finishing an ASK query.
     */
    constructor(finishSelectFactory?: FinishFactory<SELECT>, finishAskFactory?: FinishFactory<ASK>);
}
