import { isPrefixed, isRelative } from "../iri/utils";
import { IRIRefToken } from "../tokens/IRIRefToken";
import { PrefixedNameToken } from "../tokens/PrefixedNameToken";
export class IRIResolver {
    constructor(base, vocab) {
        this.prefixes = base
            ? new Map(base.prefixes.entries())
            : new Map();
        this.vocab = vocab
            ? vocab
            : base && base.vocab;
        if (new.target === IRIResolver)
            Object.freeze(this);
    }
    resolve(relativeIRI, vocab) {
        if (isPrefixed(relativeIRI))
            return this.resolvePrefixed(relativeIRI);
        return this.resolveIRIRef(relativeIRI, vocab);
    }
    resolveIRIRef(relativeIRI, vocab = false) {
        if (vocab && this.vocab && isRelative(relativeIRI))
            relativeIRI = this.vocab + relativeIRI;
        return new IRIRefToken(relativeIRI);
    }
    resolvePrefixed(prefixedName) {
        let token = new PrefixedNameToken(prefixedName);
        const used = this.prefixes.get(token.namespace);
        if (used === void 0)
            throw new Error(`The prefix "${token.namespace}" has not been declared.`);
        if (!used)
            this.prefixes.set(token.namespace, true);
        return token;
    }
}

//# sourceMappingURL=IRIResolver.js.map
