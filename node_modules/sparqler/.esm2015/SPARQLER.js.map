{"version":3,"sources":["SPARQLER.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAI/D,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAgBjD,MAAM,OAAO,QAAQ;IAYpB,YACC,sBAA4C,YAAY,CAAC,UAAmC,EAC5F,mBAAsC,YAAY,CAAC,UAAgC;QAGnF,MAAM,SAAS,GAAmC,IAAI,kBAAkB,CAAE;YACzE,WAAW,EAAE,IAAI,WAAW,EAAE;YAC9B,WAAW,EAAE,IAAI,UAAU,CAAE,KAAK,CAAC,CAAE;YACrC,yBAAyB,EAAE,mBAAmB;YAC9C,sBAAsB,EAAE,gBAAgB;SACxC,CAAE,CAAC;QAEJ,OAAO,WAAW,CAAC,UAAU,CAAE,SAAS,EAAE,IAAI,CAAE,CAAC;IAClD,CAAC;CAED","file":"SPARQLER.js","sourcesContent":["import { FinishClause } from \"./clauses/FinishClause\";\nimport { QueryClause } from \"./clauses/QueryClause\";\n\nimport { IRIResolver } from \"./data/IRIResolver\";\nimport { QueryUnitContainer } from \"./data/QueryUnitContainer\";\n\nimport { FinishFactory } from \"./FinishFactory\";\n\nimport { QueryToken } from \"./tokens/QueryToken\";\n\n\n/**\n * Interface with the same name fo the SPARQLER class, that helps\n * in the definition of the methods decorated by {@link QueryClause.createFrom}\n */\nexport interface SPARQLER<SELECT extends FinishClause = FinishClause, ASK extends FinishClause = FinishClause> extends QueryClause<SELECT, ASK> {\n}\n\n/**\n * Class that allows to create the SPARQL query builder.\n *\n * See {@link QueryClause} for know the methods available for\n * construct the queries.\n */\nexport class SPARQLER<SELECT extends FinishClause = FinishClause, ASK extends FinishClause = FinishClause> implements SPARQLER<SELECT, ASK> {\n\n\t/**\n\t * Constructor that allows to create query builder with custom finish\n\t * methods specified by the factories provided if specified.\n\t *\n\t * If no custom factory specified {@link FinishClause.createFrom}\n\t * will be used instead.\n\t *\n\t * @param finishSelectFactory Factory for finishing a SELECT query.\n\t * @param finishAskFactory Factory for finishing an ASK query.\n\t */\n\tconstructor(\n\t\tfinishSelectFactory:FinishFactory<SELECT> = FinishClause.createFrom as FinishFactory<SELECT>,\n\t\tfinishAskFactory:FinishFactory<ASK> = FinishClause.createFrom as FinishFactory<ASK>,\n\t) {\n\n\t\tconst container:QueryUnitContainer<SELECT, ASK> = new QueryUnitContainer( {\n\t\t\tiriResolver: new IRIResolver(),\n\t\t\ttargetToken: new QueryToken( void 0 ),\n\t\t\tselectFinishClauseFactory: finishSelectFactory,\n\t\t\taskFinishClauseFactory: finishAskFactory,\n\t\t} );\n\n\t\treturn QueryClause.createFrom( container, this );\n\t}\n\n}"],"sourceRoot":"../src"}