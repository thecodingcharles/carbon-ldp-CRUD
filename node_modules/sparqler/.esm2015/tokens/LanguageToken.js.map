{"version":3,"sources":["tokens/LanguageToken.ts"],"names":[],"mappings":"AAMA,MAAM,cAAc,GAAU,6BAA6B,CAAC;AAQ5D,MAAM,OAAO,aAAa;IAIzB,YAAa,GAAU;QAHd,UAAK,GAAc,UAAU,CAAC;QAItC,IAAI,CAAE,cAAc,CAAC,IAAI,CAAE,GAAG,CAAE;YAAG,MAAM,IAAI,KAAK,CAAE,IAAK,GAAI,+BAA+B,CAAE,CAAC;QAC/F,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IAChB,CAAC;IAED,QAAQ,CAAE,MAAc;QACvB,OAAO,IAAK,IAAI,CAAC,GAAI,EAAE,CAAC;IACzB,CAAC;CACD","file":"LanguageToken.js","sourcesContent":["import { TokenNode } from \"./TokenNode\";\n\n\n/**\n * Regex of a valid language tag\n */\nconst LANGUAGE_REGEX:RegExp = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n\n\n/**\n * The token of the language tag term.\n *\n * @see {@link https://www.w3.org/TR/sparql11-query/#rLANGTAG}\n */\nexport class LanguageToken implements TokenNode {\n\treadonly token:\"language\" = \"language\";\n\treadonly tag:string;\n\n\tconstructor( tag:string ) {\n\t\tif( ! LANGUAGE_REGEX.test( tag ) ) throw new Error( `\"${ tag }\" is an invalid language tag.` );\n\t\tthis.tag = tag;\n\t}\n\n\ttoString( spaces?:number ):string {\n\t\treturn `@${ this.tag }`;\n\t}\n}\n"],"sourceRoot":"../../src"}