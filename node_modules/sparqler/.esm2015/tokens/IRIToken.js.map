{"version":3,"sources":["tokens/IRIToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAgBxD,MAAM,UAAU,WAAW,CAAE,GAAU;IACtC,IAAI,UAAU,CAAE,GAAG,CAAE;QAAG,OAAO,IAAI,iBAAiB,CAAE,GAAG,CAAE,CAAC;IAC5D,OAAO,IAAI,WAAW,CAAE,GAAG,CAAE,CAAC;AAC/B,CAAC","file":"IRIToken.js","sourcesContent":["import { isPrefixed } from \"../iri/utils\";\nimport { IRIRefToken } from \"./IRIRefToken\";\nimport { PrefixedNameToken } from \"./PrefixedNameToken\";\n\n\n/**\n * Alias for any IRI token.\n *\n * @see {@link https://www.w3.org/TR/sparql11-query/#riri}\n */\nexport type IRIToken = IRIRefToken | PrefixedNameToken;\n\n\n/**\n * Returns the respective token from the IRI string.\n *\n * @param iri The IRI string to be converted into a token.\n */\nexport function getIRIToken( iri:string ):IRIToken {\n\tif( isPrefixed( iri ) ) return new PrefixedNameToken( iri );\n\treturn new IRIRefToken( iri );\n}\n"],"sourceRoot":"../../src"}