import { Container } from "../../data/Container";
import { cloneElement } from "../../data/utils";
import { GroupPatternToken } from "../../tokens/GroupPatternToken";
import { NotTriplePattern } from "./NotTriplePattern";
function getAndFn(container) {
    return patterns => {
        patterns = Array.isArray(patterns) ? patterns : [patterns];
        const newGroupToken = new GroupPatternToken();
        newGroupToken.patterns.push(...patterns.map(x => x.getPattern()));
        const groupPatterns = container.targetToken.groupPatterns.concat(newGroupToken);
        const unionToken = cloneElement(container.targetToken, { groupPatterns });
        const newContainer = new Container({
            iriResolver: container.iriResolver,
            targetToken: unionToken,
        });
        return UnionPattern.createFrom(newContainer, {});
    };
}
export const UnionPattern = {
    createFrom(container, object) {
        return NotTriplePattern.createFrom(container, Object.assign(object, {
            and: getAndFn(container),
        }));
    },
};

//# sourceMappingURL=UnionPattern.js.map
