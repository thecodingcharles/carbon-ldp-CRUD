import { Container } from "../../data/Container";
import { SubSelectToken } from "../../tokens/SubSelectToken";
import { VariableToken } from "../../tokens/VariableToken";
import { WherePattern } from "./WherePattern";
function getSelectFn(container, modifier) {
    return (...variables) => {
        const targetToken = new SubSelectToken(modifier);
        if (variables.length)
            targetToken.addVariable(...variables.map(x => new VariableToken(x)));
        const newContainer = new Container({
            iriResolver: container.iriResolver,
            targetToken
        });
        return WherePattern.createFrom(newContainer, {});
    };
}
export const SubSelectPattern = {
    createFrom(container, object) {
        return Object.assign(object, {
            select: getSelectFn(container),
            selectDistinct: getSelectFn(container, "DISTINCT"),
            selectReduced: getSelectFn(container, "REDUCED"),
            selectAll: () => getSelectFn(container)(),
            selectAllDistinct: () => getSelectFn(container, "DISTINCT")(),
            selectAllReduced: () => getSelectFn(container, "REDUCED")(),
        });
    },
};

//# sourceMappingURL=SubSelectPattern.js.map
