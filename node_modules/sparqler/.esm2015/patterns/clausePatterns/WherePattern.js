import { GroupClause } from "../../clauses/GroupClause";
import { cloneElement } from "../../data/utils";
import { WhereToken } from "../../tokens/WhereToken";
import { FinishPattern } from "./FinishPattern";
function getWhereFn(container) {
    return (patterns) => {
        const where = new WhereToken();
        patterns = Array.isArray(patterns) ? patterns : [patterns];
        where.groupPattern.patterns.push(...patterns.map(x => x.getPattern()));
        const targetToken = cloneElement(container.targetToken, { where });
        const newContainer = cloneElement(container, { targetToken });
        const groupClause = GroupClause.createFrom(FinishPattern.createFrom, newContainer, {});
        return FinishPattern.createFrom(newContainer, groupClause);
    };
}
export const WherePattern = {
    createFrom(container, object) {
        return Object.assign(object, {
            where: getWhereFn(container),
        });
    },
};

//# sourceMappingURL=WherePattern.js.map
