{"version":3,"sources":["patterns/PatternBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAG1C,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAC;AACrE,OAAO,EAAE,wBAAwB,EAAE,MAAM,8CAA8C,CAAC;AACxF,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,qBAAqB,EAAE,MAAM,wCAAwC,CAAC;AAa/E,MAAM,CAAC,MAAM,cAAc,GAuBvB;IACH,MAAM,CAAE,WAAuB;QAC9B,MAAM,SAAS,GAAwB,IAAI,SAAS,CAAE;YACrD,WAAW;YACX,WAAW,EAAE,KAAK,CAAC;SACnB,CAAE,CAAC;QAEJ,OAAO,cAAc;aACnB,UAAU,CAAE,SAAS,EAAE,EAAE,CAAE,CAAC;IAC/B,CAAC;IAED,UAAU,CAAoD,SAAW,EAAE,MAAQ;QAClF,OAAO,OAAO,CAAC,UAAU,CACxB,qBAAqB,CAAC,UAAU,EAChC,wBAAwB,CAAC,UAAU,EACnC,gBAAgB,CAAC,UAAU,EAC3B,YAAY,CAAC,UAAU,CACvB,CAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IACxB,CAAC;CACD,CAAC","file":"PatternBuilder.js","sourcesContent":["import { Container } from \"../data/Container\";\nimport { Factory } from \"../data/Factory\";\nimport { IRIResolver } from \"../data/IRIResolver\";\n\nimport { SubSelectPattern } from \"./clausePatterns/SubSelectPattern\";\nimport { NotTriplePatternsBuilder } from \"./notTriplePatterns/NotTriplePatternsBuilder\";\nimport { PathsBuilder } from \"./paths/PathsBuilder\";\nimport { TriplePatternsBuilder } from \"./triplePatterns/TriplePatternsBuilder\";\n\n\n/**\n * Helper builder for generate patters.\n */\nexport interface PatternBuilder extends TriplePatternsBuilder, NotTriplePatternsBuilder, SubSelectPattern, PathsBuilder {\n}\n\n\n/**\n * Constant with the utils for {@link PatternBuilder} objects.\n */\nexport const PatternBuilder:{\n\t/**\n\t * Function that crete a {@link PatternBuilder}.\n\t *\n\t * @param iriResolver The iri resolver that will use the\n\t * pattern builder.\n\t *\n\t * @return The {@link PatternBuilder} created.\n\t */\n\tcreate( iriResolver:IRIResolver ):PatternBuilder;\n\t/**\n\t * Factory function that allows to crete a {@link PatternBuilder}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link PatternBuilder} statement.\n\t * @param object The base base from where to create the\n\t * {@link PatternBuilder} statement.\n\t *\n\t * @return The {@link PatternBuilder} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<undefined>, O extends object>( container:C, object:O ):O & PatternBuilder;\n} = {\n\tcreate( iriResolver:IRIResolver ):PatternBuilder {\n\t\tconst container:Container<undefined> = new Container( {\n\t\t\tiriResolver,\n\t\t\ttargetToken: void 0,\n\t\t} );\n\n\t\treturn PatternBuilder\n\t\t\t.createFrom( container, {} );\n\t},\n\n\tcreateFrom<C extends Container<undefined>, O extends object>( container:C, object:O ):O & PatternBuilder {\n\t\treturn Factory.createFrom(\n\t\t\tTriplePatternsBuilder.createFrom,\n\t\t\tNotTriplePatternsBuilder.createFrom,\n\t\t\tSubSelectPattern.createFrom,\n\t\t\tPathsBuilder.createFrom,\n\t\t)( container, object );\n\t},\n};"],"sourceRoot":"../../src"}