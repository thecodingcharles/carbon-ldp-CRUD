import { PathInverseToken } from "../../../tokens/PathInverseToken";
import { FluentPathContainer } from "../FluentPathContainer";
import { getPropertyToken } from "../utils";
import { _getTokenWrapper, _isBasePrimitive } from "./utils";
const _getInInverseToken = _getTokenWrapper("pathAlternative", "pathSequence", "pathInverse");
export function getInverseFn(container) {
    return (path) => {
        const token = container.targetToken
            ? container.targetToken
            : getPropertyToken(container, path);
        const inInverseToken = _getInInverseToken(token);
        const targetToken = new PathInverseToken(inInverseToken);
        const newContainer = new FluentPathContainer(Object.assign({}, container, { targetToken }));
        if (_isBasePrimitive(token))
            return container.deniableFluentPathFactory(newContainer, {});
        return container.fluentPathFactory(newContainer, {});
    };
}

//# sourceMappingURL=inverseFn.js.map
