import { PathModToken } from "../../../tokens/PathModToken";
import { FluentPathContainer } from "../FluentPathContainer";
import { getPropertyToken } from "../utils";
import { _getTokenWrapper } from "./utils";
const _getInModToken = _getTokenWrapper("pathAlternative", "pathSequence", "pathInverse", "pathMod");
export function getModFn(container, mod) {
    return (path) => {
        const token = container.targetToken
            ? container.targetToken
            : getPropertyToken(container, path);
        const inModToken = _getInModToken(token);
        const targetToken = new PathModToken(inModToken, mod);
        const newContainer = new FluentPathContainer(Object.assign({}, container, { targetToken }));
        return container.fluentPathFactory(newContainer, {});
    };
}

//# sourceMappingURL=modFn.js.map
