{"version":3,"sources":["patterns/paths/fns/modFn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAK5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAE7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAK3C,MAAM,cAAc,GAAG,gBAAgB,CAAoB,iBAAiB,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,CAAE,CAAC;AAMzH,MAAM,UAAU,QAAQ,CAAE,SAAoD,EAAE,GAAmB;IAClG,OAAO,CAAE,IAAkB,EAAG,EAAE;QAC/B,MAAM,KAAK,GAAa,SAAS,CAAC,WAAW;YAC5C,CAAC,CAAC,SAAS,CAAC,WAAW;YACvB,CAAC,CAAC,gBAAgB,CAAE,SAAS,EAAE,IAAK,CAAE,CAAC;QAExC,MAAM,UAAU,GAAoB,cAAc,CAAE,KAAK,CAAE,CAAC;QAC5D,MAAM,WAAW,GAAgB,IAAI,YAAY,CAAE,UAAU,EAAE,GAAG,CAAE,CAAC;QAErE,MAAM,YAAY,GAAqC,IAAI,mBAAmB,mBAC1E,SAAS,IACZ,WAAW,IACT,CAAC;QAEJ,OAAO,SAAS,CAAC,iBAAiB,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACxD,CAAC,CAAC;AACH,CAAC","file":"modFn.js","sourcesContent":["import { PathModToken } from \"../../../tokens/PathModToken\";\nimport { PathPrimaryToken } from \"../../../tokens/PathPrimaryToken\";\nimport { PathToken } from \"../../../tokens/PathToken\";\nimport { Resource } from \"../../triplePatterns/Resource\";\nimport { FluentPath } from \"../FluentPath\";\nimport { FluentPathContainer } from \"../FluentPathContainer\";\nimport { Path } from \"../Path\";\nimport { getPropertyToken } from \"../utils\";\nimport { _getTokenWrapper } from \"./utils\";\n\n\ntype TargetParams = Path<PathToken> | Resource | \"a\" | string;\n\nconst _getInModToken = _getTokenWrapper<PathPrimaryToken>( \"pathAlternative\", \"pathSequence\", \"pathInverse\", \"pathMod\" );\n\n\nexport type ModFn = ( path?:Resource | \"a\" | string | Path<PathToken> ) =>\n\tFluentPath<PathModToken>;\n\nexport function getModFn( container:FluentPathContainer<undefined | PathToken>, mod:\"?\" | \"*\" | \"+\" ):ModFn {\n\treturn ( path?:TargetParams ) => {\n\t\tconst token:PathToken = container.targetToken\n\t\t\t? container.targetToken\n\t\t\t: getPropertyToken( container, path! );\n\n\t\tconst inModToken:PathPrimaryToken = _getInModToken( token );\n\t\tconst targetToken:PathModToken = new PathModToken( inModToken, mod );\n\n\t\tconst newContainer:FluentPathContainer<PathModToken> = new FluentPathContainer( {\n\t\t\t...container,\n\t\t\ttargetToken,\n\t\t} );\n\n\t\treturn container.fluentPathFactory( newContainer, {} );\n\t};\n}"],"sourceRoot":"../../../../src"}