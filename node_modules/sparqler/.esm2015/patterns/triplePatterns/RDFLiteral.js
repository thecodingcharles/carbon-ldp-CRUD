import { cloneElement } from "../../data/utils";
import { LanguageToken } from "../../tokens/LanguageToken";
import { XSD } from "../../utils/XSD";
import { TripleSubject } from "./TripleSubject";
function getWithTypeFn(container) {
    return type => {
        if (type in XSD)
            type = XSD[type];
        const iriType = container.iriResolver.resolve(type, true);
        const subject = cloneElement(container.targetToken.subject, { type: iriType });
        const targetToken = cloneElement(container.targetToken, { subject });
        const newContainer = cloneElement(container, { targetToken });
        return TripleSubject.createFrom(newContainer, {});
    };
}
function getWithLanguageFn(container) {
    return language => {
        const langToken = new LanguageToken(language);
        const subject = cloneElement(container.targetToken.subject, { language: langToken });
        const targetToken = cloneElement(container.targetToken, { subject });
        const newContainer = cloneElement(container, { targetToken });
        return TripleSubject.createFrom(newContainer, {});
    };
}
export const RDFLiteral = {
    createFrom(container, object) {
        return TripleSubject.createFrom(container, Object.assign(object, {
            withType: getWithTypeFn(container),
            withLanguage: getWithLanguageFn(container),
        }));
    },
};

//# sourceMappingURL=RDFLiteral.js.map
