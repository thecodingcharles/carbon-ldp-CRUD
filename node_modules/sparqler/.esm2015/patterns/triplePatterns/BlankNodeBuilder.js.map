{"version":3,"sources":["patterns/triplePatterns/BlankNodeBuilder.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAYpD,MAAM,mBAAmB,GAAoB,CAAE,SAAS,EAAE,MAAM,EAAG,EAAE,CAAC,MAAM,CAAC;AAM7E,MAAM,CAAC,MAAM,gBAAgB,GAczB;IACH,UAAU,CAAiE,SAAW,EAAE,MAAQ;QAC/F,OAAO,eAAe,CAAC,UAAU,CAAE,mBAAmB,EAAE,SAAS,EAAE,MAAM,CAAE,CAAC;IAC7E,CAAC;CACD,CAAC","file":"BlankNodeBuilder.js","sourcesContent":["import { Container } from \"../../data/Container\";\nimport { Factory } from \"../../data/Factory\";\n\nimport { BlankNodePropertyToken } from \"../../tokens/BlankNodePropertyToken\";\n\nimport { PropertyBuilder } from \"./PropertyBuilder\";\n\n\n/**\n * Builder for construct a inline blank node property list.\n */\nexport interface BlankNodeBuilder extends PropertyBuilder<{}> {}\n\n\n/**\n * Factory that only returns the same object provided.\n */\nconst emptyGenericFactory:Factory<any, {}> = ( container, object ) => object;\n\n\n/**\n * Constant with utils for {@link BlankNodeBuilder}\n */\nexport const BlankNodeBuilder:{\n\t/**\n\t * Factory function that allows to crete a {@link BlankNodeBuilder}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link BlankNodeBuilder} statement.\n\t * @param object The base base from where to create the\n\t * {@link BlankNodeBuilder} statement.\n\t *\n\t * @return The {@link BlankNodeBuilder} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<BlankNodePropertyToken>, O extends object>( container:C, object:O ):O & BlankNodeBuilder;\n} = {\n\tcreateFrom<C extends Container<BlankNodePropertyToken>, O extends object>( container:C, object:O ):O & BlankNodeBuilder {\n\t\treturn PropertyBuilder.createFrom( emptyGenericFactory, container, object );\n\t}\n};\n"],"sourceRoot":"../../../src"}