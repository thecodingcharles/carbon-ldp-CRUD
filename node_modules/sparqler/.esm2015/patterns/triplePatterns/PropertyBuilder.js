import { cloneElement } from "../../data/utils";
import { PropertyToken } from "../../tokens/PropertyToken";
import { getPropertyToken } from "../paths/utils";
import { convertValue } from "../utils";
function _cloneContainer(container, propertyToken) {
    const properties = container.targetToken.properties.concat(propertyToken);
    const targetToken = cloneElement(container.targetToken, { properties });
    return cloneElement(container, { targetToken });
}
function _updateContainer(container, propertyToken) {
    container.targetToken.properties.push(propertyToken);
    return container;
}
function getHasFn(genericFactory, container) {
    return (property, objects) => {
        const verbToken = getPropertyToken(container, property);
        const propertyToken = new PropertyToken(verbToken);
        objects = Array.isArray(objects) ? objects : [objects];
        propertyToken.addObject(...objects.map(convertValue));
        const newContainer = container.targetToken.token === "subject" ?
            _cloneContainer(container, propertyToken) :
            _updateContainer(container, propertyToken);
        const genericObject = genericFactory(newContainer, {});
        return PropertyBuilderMore.createFrom(genericFactory, newContainer, genericObject);
    };
}
export const PropertyBuilder = {
    createFrom(genericFactory, container, object) {
        return Object.assign(object, {
            has: getHasFn(genericFactory, container),
        });
    }
};
export const PropertyBuilderMore = {
    createFrom(genericFactory, container, object) {
        return Object.assign(object, {
            and: getHasFn(genericFactory, container),
        });
    }
};

//# sourceMappingURL=PropertyBuilder.js.map
