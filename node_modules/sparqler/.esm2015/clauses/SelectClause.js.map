{"version":3,"sources":["clauses/SelectClause.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAE9C,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAG7C,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAGxD,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAkF1C,SAAS,WAAW,CAA2D,cAA6D,EAAE,SAAW,EAAE,QAAgC;IAC1L,OAAO,CAAE,GAAG,SAAkB,EAAG,EAAE;QAClC,MAAM,WAAW,GAAe,IAAI,WAAW,CAAE,QAAQ,CAAE,CAAC;QAC5D,IAAI,SAAS,CAAC,MAAM;YAAG,WAAW,CAAC,WAAW,CAAE,GAAG,SAAS,CAAC,GAAG,CAAE,CAAC,CAAC,EAAE,CAAC,IAAI,aAAa,CAAE,CAAC,CAAE,CAAE,CAAE,CAAC;QAElG,MAAM,UAAU,GAA2B,YAAY,CAAE,SAAS,CAAC,WAAW,EAAE,EAAE,WAAW,EAAE,CAAE,CAAC;QAClG,MAAM,YAAY,GAAsC,IAAI,SAAS,CAAE;YACtE,WAAW,EAAE,SAAS,CAAC,WAAW;YAClC,WAAW,EAAE,UAAU;SACvB,CAAE,CAAC;QAEJ,OAAO,UAAU,CAAC,UAAU,CAAE,cAAc,EAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IAClE,CAAC,CAAC;AACH,CAAC;AAMD,MAAM,CAAC,MAAM,YAAY,GAgBrB;IACH,UAAU,CAA6E,cAA6D,EAAE,SAAW,EAAE,MAAQ;QAC1K,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,MAAM,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,CAAE;YAChD,cAAc,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,UAAU,CAAE;YACpE,aAAa,EAAE,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,SAAS,CAAE;YAClE,SAAS,EAAE,GAAG,EAAE,CAAC,WAAW,CAAE,cAAc,EAAE,SAAS,CAAE,EAAE;YAC3D,iBAAiB,EAAE,GAAG,EAAE,CAAC,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,UAAU,CAAE,EAAE;YAC/E,gBAAgB,EAAE,GAAG,EAAE,CAAC,WAAW,CAAE,cAAc,EAAE,SAAS,EAAE,SAAS,CAAE,EAAE;SAC7E,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"SelectClause.js","sourcesContent":["import { Container } from \"../data/Container\";\nimport { Factory } from \"../data/Factory\";\nimport { cloneElement } from \"../data/utils\";\n\nimport { QueryToken } from \"../tokens/QueryToken\";\nimport { SelectToken } from \"../tokens/SelectToken\";\nimport { VariableToken } from \"../tokens/VariableToken\";\n\nimport { FinishClause } from \"./FinishClause\";\nimport { FromClause } from \"./FromClause\";\n\n\n/**\n * Interface with the methods available to make a SELECT query.\n */\nexport interface SelectClause<T extends FinishClause> {\n\t/**\n\t * Set a list of variables to be retrieved by the query.\n\t *\n\t * @param variables The list of variables.\n\t * IF no variable is provided, the behaviour will be the same\n\t * as {@link SelectClause.selectAll}\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselect( ...variables:string[] ):FromClause<T>;\n\n\t/**\n\t * Set a list of variables to be retrieved by the query ensuring no\n\t * repetitions in the set of solutions.\n\t *\n\t * @param variables The list of variables.\n\t * IF no variable is provided, the behaviour will be the same\n\t * as {@link SelectClause.selectAllDistinct}\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectDistinct( ...variables:string[] ):FromClause<T>;\n\n\t/**\n\t * Set a list of variables to be retrieved by the query permitting\n\t * eliminations of non-distinct solutions, but not ensuring a set of\n\t * unique ones.\n\t *\n\t * @param variables The list of variables.\n\t * IF no variable is provided, the behaviour will be the same\n\t * as {@link SelectClause.selectAllReduced}\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectReduced( ...variables:string[] ):FromClause<T>;\n\n\t/**\n\t * Set that the query must return all the solutions for the variables\n\t * used in the where pattern matching.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectAll():FromClause<T>;\n\n\t/**\n\t * Set that the query must return all the solutions for the variables\n\t * used in the where pattern matching, ensuring there is not\n\t * duplicated solutions.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectAllDistinct():FromClause<T>;\n\n\t/**\n\t * Set that the query must return all the solutions for the variables\n\t * used in the where pattern matching, permitting eliminations of\n\t * non-distinct solutions, but not ensuring a set of unique ones.\n\t *\n\t * @returns Object with the methods to keep constructing the query.\n\t */\n\tselectAllReduced():FromClause<T>;\n}\n\n\n/**\n * Function that creates a generic {@link SelectClause.select} function.\n * This function is used to create all the methods for the {@link SelectClause}\n *\n * @param genericFactory The factory for the generic {@link FinishClause}\n * that the {@link SelectClause} receives.\n * @param container The container with the query data for the statement.\n * @param modifier The optional modifier of the SELECT queries.\n *\n * @returns A generic \"select\" function that shares the {@link SelectClause.select} signature.\n * It behaviour depends of the {@param modifier} set.\n *\n * @private\n */\nfunction getSelectFn<C extends Container<QueryToken>, T extends FinishClause>( genericFactory:Factory<Container<QueryToken<SelectToken>>, T>, container:C, modifier?:\"DISTINCT\" | \"REDUCED\" ):SelectClause<T>[ \"select\" ] {\n\treturn ( ...variables:string[] ) => {\n\t\tconst queryClause:SelectToken = new SelectToken( modifier );\n\t\tif( variables.length ) queryClause.addVariable( ...variables.map( x => new VariableToken( x ) ) );\n\n\t\tconst queryToken:QueryToken<SelectToken> = cloneElement( container.targetToken, { queryClause } );\n\t\tconst newContainer:Container<QueryToken<SelectToken>> = new Container( {\n\t\t\tiriResolver: container.iriResolver,\n\t\t\ttargetToken: queryToken,\n\t\t} );\n\n\t\treturn FromClause.createFrom( genericFactory, newContainer, {} );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link SelectClause} objects.\n */\nexport const SelectClause:{\n\t/**\n\t * Factory function that allows to crete a {@link SelectClause}\n\t * from the {@param object} provided.\n\t *\n\t * @param genericFactory The factory to create the generic finish\n\t * of the {@link SelectClause} statement.\n\t * @param container The related container with the data for the\n\t * {@link SelectClause} statement.\n\t * @param object The base base from where to create the\n\t * {@link SelectClause} statement.\n\t *\n\t * @return The {@link SelectClause} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<C extends Container<QueryToken>, T extends FinishClause, O extends object>( genericFactory:Factory<Container<QueryToken<SelectToken>>, T>, container:C, object:O ):O & SelectClause<T>;\n} = {\n\tcreateFrom<C extends Container<QueryToken>, T extends FinishClause, O extends object>( genericFactory:Factory<Container<QueryToken<SelectToken>>, T>, container:C, object:O ):O & SelectClause<T> {\n\t\treturn Object.assign( object, {\n\t\t\tselect: getSelectFn( genericFactory, container ),\n\t\t\tselectDistinct: getSelectFn( genericFactory, container, \"DISTINCT\" ),\n\t\t\tselectReduced: getSelectFn( genericFactory, container, \"REDUCED\" ),\n\t\t\tselectAll: () => getSelectFn( genericFactory, container )(),\n\t\t\tselectAllDistinct: () => getSelectFn( genericFactory, container, \"DISTINCT\" )(),\n\t\t\tselectAllReduced: () => getSelectFn( genericFactory, container, \"REDUCED\" )(),\n\t\t} );\n\t},\n};"],"sourceRoot":"../../src"}