import { Container } from "../data/Container";
import { cloneElement } from "../data/utils";
import { SelectToken } from "../tokens/SelectToken";
import { VariableToken } from "../tokens/VariableToken";
import { FromClause } from "./FromClause";
function getSelectFn(genericFactory, container, modifier) {
    return (...variables) => {
        const queryClause = new SelectToken(modifier);
        if (variables.length)
            queryClause.addVariable(...variables.map(x => new VariableToken(x)));
        const queryToken = cloneElement(container.targetToken, { queryClause });
        const newContainer = new Container({
            iriResolver: container.iriResolver,
            targetToken: queryToken,
        });
        return FromClause.createFrom(genericFactory, newContainer, {});
    };
}
export const SelectClause = {
    createFrom(genericFactory, container, object) {
        return Object.assign(object, {
            select: getSelectFn(genericFactory, container),
            selectDistinct: getSelectFn(genericFactory, container, "DISTINCT"),
            selectReduced: getSelectFn(genericFactory, container, "REDUCED"),
            selectAll: () => getSelectFn(genericFactory, container)(),
            selectAllDistinct: () => getSelectFn(genericFactory, container, "DISTINCT")(),
            selectAllReduced: () => getSelectFn(genericFactory, container, "REDUCED")(),
        });
    },
};

//# sourceMappingURL=SelectClause.js.map
