import { IRIResolver } from "../data/IRIResolver";
import { cloneElement } from "../data/utils";
import { PatternBuilder } from "../patterns/PatternBuilder";
import { WhereToken } from "../tokens/WhereToken";
import { GroupClause } from "./GroupClause";
function _getPatterns(iriResolver, patternFunction) {
    const patternOrPatterns = patternFunction(PatternBuilder.create(iriResolver));
    const patterns = Array.isArray(patternOrPatterns) ? patternOrPatterns : [patternOrPatterns];
    return patterns.map(x => x.getPattern());
}
function getWhereFn(genericFactory, container) {
    return (patternFunction) => {
        const iriResolver = new IRIResolver(container.iriResolver);
        const patterns = _getPatterns(iriResolver, patternFunction);
        const query = cloneElement(container.targetToken.queryClause, { where: new WhereToken() })
            .addPattern(...patterns);
        const queryToken = cloneElement(container.targetToken, { queryClause: query });
        const newContainer = cloneElement(container, { iriResolver, targetToken: queryToken });
        const groupClause = GroupClause.createFrom(genericFactory, newContainer, {});
        return genericFactory(newContainer, groupClause);
    };
}
export const WhereClause = {
    createFrom(genericFactory, container, object) {
        return Object.assign(object, {
            where: getWhereFn(genericFactory, container),
        });
    },
};

//# sourceMappingURL=WhereClause.js.map
