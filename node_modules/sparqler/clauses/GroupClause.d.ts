import { Container } from "../data/Container";
import { Factory } from "../data/Factory";
import { QueryClauseToken } from "../tokens/QueryClauseToken";
import { QueryToken } from "../tokens/QueryToken";
import { SubSelectToken } from "../tokens/SubSelectToken";
import { FinishClause } from "./FinishClause";
import { HavingClause } from "./HavingClause";
/**
 * Interface with the methods available to make a GROUP BY statement.
 */
export interface GroupClause<T extends FinishClause> extends HavingClause<T> {
    /**
     * Set a condition to be divide the solutions returned by the query
     * into one or more groups.
     *
     * @param rawCondition Raw condition to be applied to the solutions grouping.
     *
     * @returns Object with the methods to keep constructing the query.
     */
    groupBy(rawCondition: string): HavingClause<T> & T;
}
/**
 * Constant with the utils for {@link GroupClause} objects.
 */
export declare const GroupClause: {
    /**
     * Factory function that allows to crete a {@link GroupClause}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory to create the generic finish
     * of the {@link GroupClause} statement.
     * @param container The related container with the data for the
     * {@link GroupClause} statement.
     * @param object The base base from where to create the
     * {@link GroupClause} statement.
     *
     * @return The {@link GroupClause} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends Container<SubSelectToken | QueryToken<QueryClauseToken>>, T extends FinishClause, O extends object>(genericFactory: Factory<typeof container, T>, container: C, object: O): O & GroupClause<T>;
};
