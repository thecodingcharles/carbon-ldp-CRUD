import { Container } from "../data/Container";
import { Factory } from "../data/Factory";
import { QueryClauseToken } from "../tokens/QueryClauseToken";
import { QueryToken } from "../tokens/QueryToken";
import { SubSelectToken } from "../tokens/SubSelectToken";
import { FinishClause } from "./FinishClause";
import { OrderClause } from "./OrderClause";
/**
 * Interface with the methods available to make a HAVING statement.
 */
export interface HavingClause<T extends FinishClause> extends OrderClause<T> {
    /**
     * Set a condition to filter the sequence of solutions the query will
     * retrieve.
     *
     * Notice: The current version of SPARQLER does not evaluate the condition
     * for possible errors
     *
     * @param rawCondition Raw condition to be applied for the solutions filtering.
     * @returns Object with the methods to keep constructing the query.
     */
    having(rawCondition: string): OrderClause<T> & T;
}
/**
 * Constant with the utils for {@link HavingClause} objects.
 */
export declare const HavingClause: {
    /**
     * Factory function that allows to crete a {@link HavingClause}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory to create the generic finish
     * of the {@link HavingClause} statement.
     * @param container The related container with the data for the
     * {@link HavingClause} statement.
     * @param object The base base from where to create the
     * {@link HavingClause} statement.
     *
     * @return The {@link HavingClause} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends FinishClause, O extends object>(genericFactory: Factory<typeof container, T>, container: C, object: O): O & HavingClause<T>;
};
