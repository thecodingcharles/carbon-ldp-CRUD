import { Container } from "../data/Container";
import { Factory } from "../data/Factory";
import { QueryClauseToken } from "../tokens/QueryClauseToken";
import { QueryToken } from "../tokens/QueryToken";
import { SubSelectToken } from "../tokens/SubSelectToken";
/**
 * Interface with the methods available to make a LIMIT statement.
 */
export interface LimitClause<T extends object> {
    /**
     * Set the limit of results the query should return.
     *
     * @param limit The number to be applied as limit.
     * @returns An OffsetClause or the FinishClause/SubFinishClause depending
     * if the offset method has been called before or not.
     */
    limit(limit: number): T;
}
/**
 * Constant with the utils for {@link LimitClause} objects.
 */
export declare const LimitClause: {
    /**
     * Factory function that allows to crete a {@link LimitClause}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory to create the generic finish
     * of the {@link LimitClause} statement.
     * @param container The related container with the data for the
     * {@link LimitClause} statement.
     * @param object The base base from where to create the
     * {@link LimitClause} statement.
     *
     * @return The {@link LimitClause} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends Container<QueryToken<QueryClauseToken> | SubSelectToken>, T extends object, O extends object>(genericFactory: Factory<C, T>, container: C, object: O): O & LimitClause<T>;
};
