import { QueryUnitContainer } from "../data/QueryUnitContainer";
import { AskClause } from "./AskClause";
import { FinishClause } from "./FinishClause";
import { SelectClause } from "./SelectClause";
/**
 * Interface that describes the base entry of any query statement.
 *
 * It allows to add the prologues `BASE` and `PREFIX`.
 * And also add support for specify a `vocab` used to resolve
 * relative properties/predicates.
 *
 * The current query types supported are:
 * - `SELECT`, specified by the extension of {@link SelectClause}
 * - `ASK`, specified by the extension of {@link AskClause}
 */
export interface QueryClause<SELECT extends FinishClause, ASK extends FinishClause> extends SelectClause<SELECT>, AskClause<ASK> {
    /**
     * Add a base IRI the query uses to resolve any relative IRIs.
     *
     * If a default vocabulary is set with the {@link QueryClause.vocab}
     * method, the base is ignored for relative predicates.
     *
     * @param iri IRI to be used as the query BASE.
     * @returns Object with the methods to keep constructing the query.
     */
    base(iri: string): QueryClause<SELECT, ASK>;
    /**
     * Add a default vocabulary to be used to resolve relative IRIs when
     * used as a predicate in a triple pattern.
     *
     * @param iri IRI to append to prepend to any relative predicate.
     * @returns Object with the methods to keep constructing the query.
     */
    vocab(iri: string): QueryClause<SELECT, ASK>;
    /**
     * Add a prefix to the query.
     *
     * If the prefix is not used in any part of the query it is not added
     * in the compact query string.
     *
     * @param name Name the prefix will be identified for.
     * @param iri The IRI of the current PREFIX.
     * @returns Object with the methods to keep constructing the query.
     */
    prefix(name: string, iri: string): QueryClause<SELECT, ASK>;
}
/**
 * Constant with the utils functions for {@link QueryClause} objects.
 */
export declare const QueryClause: {
    /**
     * Factory function that allows to crete a {@link QueryClause}
     * from the {@param object} provided.
     *
     * @param container The related container with the data for the
     * {@link QueryClause} statement.
     * @param object The base base from where to create the
     * {@link QueryClause} statement.
     *
     * @return The {@link QueryClause} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends QueryUnitContainer<SELECT, ASK>, SELECT extends FinishClause, ASK extends FinishClause, T extends object>(container: C, object: T): T & QueryClause<SELECT, ASK>;
};
