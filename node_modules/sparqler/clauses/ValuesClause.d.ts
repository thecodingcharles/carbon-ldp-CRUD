import { Container } from "../data/Container";
import { Factory } from "../data/Factory";
import { PatternBuilder } from "../patterns/PatternBuilder";
import { SupportedNativeTypes } from "../patterns/SupportedNativeTypes";
import { Literal } from "../patterns/triplePatterns/Literal";
import { Resource } from "../patterns/triplePatterns/Resource";
import { Undefined } from "../patterns/Undefined";
import { QueryToken } from "../tokens/QueryToken";
import { SubSelectToken } from "../tokens/SubSelectToken";
import { FinishClause } from "./FinishClause";
export interface ValuesClause<T extends FinishClause> {
    /**
     * Set the values of a variable to be combined into the results query.
     *
     * @param variable Variable to add values.
     * @param values The values to be combined.
     * @returns Object with the methods to keep constructing the query.
     */
    values(variable: string, values: SupportedNativeTypes | SupportedNativeTypes[]): T;
    /**
     * Set the values of a variable to be combined into the results query.
     *
     * The values are constructed with a function that receives a
     * pattern builder.
     *
     * @param variable Variable to add values.
     * @param valuesBuilder Functions that returns the values to be added.
     * @returns Object with the methods to keep constructing the query.
     */
    values(variable: string, valuesBuilder: (builder: PatternBuilder) => (SupportedNativeTypes | Resource | Literal | Undefined) | (SupportedNativeTypes | Resource | Literal | Undefined)[]): T;
    /**
     * Set the values of multiple variables to be combined into the results
     * query.
     *
     * @param variables Variables to add values.
     * @param values The values to be combined.
     * @returns Object with the methods to keep constructing the query.
     */
    values(variables: string[], values: SupportedNativeTypes[] | SupportedNativeTypes[][]): T;
    /**
     * Set the values of multiple variables to be combined into the results
     * query.
     *
     * The values are constructed with a function that receives a
     * pattern builder.
     *
     * @param variables Variables to add values.
     * @param valuesBuilder Functions that returns the values to be added.
     * @returns Object with the methods to keep constructing the query.
     */
    values(variables: string[], valuesBuilder: (builder: PatternBuilder) => (SupportedNativeTypes | Resource | Literal | Undefined)[] | (SupportedNativeTypes | Resource | Literal | Undefined)[][]): T;
}
/**
 * Constant with the utils for {@link ValuesClause} objects.
 */
export declare const ValuesClause: {
    /**
     * Factory function that allows to crete a {@link ValuesClause}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory to create the generic finish
     * of the {@link ValuesClause} statement.
     * @param container The related container with the data for the
     * {@link ValuesClause} statement.
     * @param object The base base from where to create the
     * {@link ValuesClause} statement.
     *
     * @return The {@link ValuesClause} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends Container<QueryToken | SubSelectToken>, T extends FinishClause, O extends object>(genericFactory: Factory<C, T>, container: C, object: O): O & ValuesClause<T>;
};
