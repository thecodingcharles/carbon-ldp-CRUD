import { Container } from "../data/Container";
import { Factory } from "../data/Factory";
import { QueryToken } from "../tokens/QueryToken";
import { SelectToken } from "../tokens/SelectToken";
import { FinishClause } from "./FinishClause";
import { FromClause } from "./FromClause";
/**
 * Interface with the methods available to make a SELECT query.
 */
export interface SelectClause<T extends FinishClause> {
    /**
     * Set a list of variables to be retrieved by the query.
     *
     * @param variables The list of variables.
     * IF no variable is provided, the behaviour will be the same
     * as {@link SelectClause.selectAll}
     * @returns Object with the methods to keep constructing the query.
     */
    select(...variables: string[]): FromClause<T>;
    /**
     * Set a list of variables to be retrieved by the query ensuring no
     * repetitions in the set of solutions.
     *
     * @param variables The list of variables.
     * IF no variable is provided, the behaviour will be the same
     * as {@link SelectClause.selectAllDistinct}
     * @returns Object with the methods to keep constructing the query.
     */
    selectDistinct(...variables: string[]): FromClause<T>;
    /**
     * Set a list of variables to be retrieved by the query permitting
     * eliminations of non-distinct solutions, but not ensuring a set of
     * unique ones.
     *
     * @param variables The list of variables.
     * IF no variable is provided, the behaviour will be the same
     * as {@link SelectClause.selectAllReduced}
     * @returns Object with the methods to keep constructing the query.
     */
    selectReduced(...variables: string[]): FromClause<T>;
    /**
     * Set that the query must return all the solutions for the variables
     * used in the where pattern matching.
     *
     * @returns Object with the methods to keep constructing the query.
     */
    selectAll(): FromClause<T>;
    /**
     * Set that the query must return all the solutions for the variables
     * used in the where pattern matching, ensuring there is not
     * duplicated solutions.
     *
     * @returns Object with the methods to keep constructing the query.
     */
    selectAllDistinct(): FromClause<T>;
    /**
     * Set that the query must return all the solutions for the variables
     * used in the where pattern matching, permitting eliminations of
     * non-distinct solutions, but not ensuring a set of unique ones.
     *
     * @returns Object with the methods to keep constructing the query.
     */
    selectAllReduced(): FromClause<T>;
}
/**
 * Constant with the utils for {@link SelectClause} objects.
 */
export declare const SelectClause: {
    /**
     * Factory function that allows to crete a {@link SelectClause}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory to create the generic finish
     * of the {@link SelectClause} statement.
     * @param container The related container with the data for the
     * {@link SelectClause} statement.
     * @param object The base base from where to create the
     * {@link SelectClause} statement.
     *
     * @return The {@link SelectClause} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends Container<QueryToken>, T extends FinishClause, O extends object>(genericFactory: Factory<Container<QueryToken<SelectToken>>, T>, container: C, object: O): O & SelectClause<T>;
};
