import { Container } from "../../data/Container";
import { IRIToken } from "../../tokens/IRIToken";
import { PathToken } from "../../tokens/PathToken";
import { Resource } from "../triplePatterns/Resource";
import { DeniableFluentPath } from "./DeniableFluentPath";
import { FluentPath } from "./FluentPath";
import { PathBuilder } from "./PathBuilder";
/**
 * Object with the methods to build a property path.
 */
export interface PathsBuilder {
    path(property: Resource | "a" | string): DeniableFluentPath<IRIToken | "a">;
    path<T extends FluentPath<PathToken>>(builderFn: (pathBuilder: PathBuilder) => T): T;
}
/**
 * Constant with the utils for {@link PathsBuilder} objects.
 */
export declare const PathsBuilder: {
    /**
     * Factory function that allows to crete a {@link PathsBuilder}
     * from the {@param object} provided.
     *
     * @param container The related container with the data for the
     * {@link PathsBuilder} statement.
     * @param object The base base from where to create the
     * {@link PathsBuilder} statement.
     *
     * @return The {@link PathsBuilder} statement created from the
     * {@param object} provided.
     */
    createFrom<O extends object>(container: Container<undefined>, object: O): O & PathsBuilder;
};
