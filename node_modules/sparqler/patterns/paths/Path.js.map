{"version":3,"sources":["patterns/paths/Path.ts"],"names":[],"mappings":";;AAgBa,QAAA,IAAI,GAcb;IACH,UAAU,EAAV,UAAmD,SAAsB,EAAE,MAAQ;QAClF,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,OAAO,EAAE,cAAM,OAAA,SAAS,CAAC,WAAW,EAArB,CAAqB;SACpC,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"Path.js","sourcesContent":["import { Container } from \"../../data/Container\";\n\nimport { PathToken } from \"../../tokens/PathToken\";\n\n\n/**\n * Object that contains the a property path.\n */\nexport interface Path<T extends PathToken = PathToken> {\n\tgetPath():T;\n}\n\n\n/**\n * Constant with the utils for {@link Path} objects.\n */\nexport const Path:{\n\t/**\n\t * Factory function that allows to crete a {@link Path}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link Path} statement.\n\t * @param object The base base from where to create the\n\t * {@link Path} statement.\n\t *\n\t * @return The {@link Path} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<T extends PathToken, O extends object>( container:Container<T>, object:O ):O & Path<T>;\n} = {\n\tcreateFrom<T extends PathToken, O extends object>( container:Container<T>, object:O ):O & Path<T> {\n\t\treturn Object.assign( object, {\n\t\t\tgetPath: () => container.targetToken,\n\t\t} );\n\t}\n};"],"sourceRoot":"../../../src"}