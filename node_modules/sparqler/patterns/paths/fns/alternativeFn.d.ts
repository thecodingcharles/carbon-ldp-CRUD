import { PathAlternativeToken } from "../../../tokens/PathAlternativeToken";
import { PathInNegatedToken } from "../../../tokens/PathInNegatedToken";
import { PathToken } from "../../../tokens/PathToken";
import { Resource } from "../../triplePatterns/Resource";
import { DeniableFluentPath } from "../DeniableFluentPath";
import { FluentPath } from "../FluentPath";
import { FluentPathContainer } from "../FluentPathContainer";
import { Path } from "../Path";
export declare type AlternativeFn<T extends PathToken> = (...paths: ((Resource | "a" | string | Path<PathToken>) | (Resource | "a" | string | Path<PathToken>)[])[]) => (T extends PathInNegatedToken ? DeniableFluentPath<PathAlternativeToken<PathInNegatedToken>> : FluentPath<PathAlternativeToken>) & DeniableFluentPath<PathAlternativeToken<PathInNegatedToken>>;
export declare function getAlternativeFn<T extends PathToken>(container: FluentPathContainer<undefined | PathToken>): AlternativeFn<T>;
