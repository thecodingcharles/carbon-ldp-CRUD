import { IRIToken } from "../../../tokens/IRIToken";
import { PathInNegatedToken } from "../../../tokens/PathInNegatedToken";
import { PathToken } from "../../../tokens/PathToken";
/**
 * Create a function that will wrap into a sub-path any token
 * matched by the symbols provided.
 *
 * The match is calculated comparing a symbol provided with the
 * {@link TokenNode.token} property.
 *
 * @param symbols The name of the tokens to be wrapped.
 *
 * @private
 */
export declare function _getTokenWrapper<T extends PathToken>(...symbols: string[]): (token: PathToken) => T;
/**
 * Verify the token provided is a base token primitive.
 * i.e. if the token is `"a"` or a {@link IRIToken}.
 *
 * @param token the token to be verified.
 * @private
 */
export declare function _isBasePrimitive(token: PathToken): token is IRIToken | "a";
/**
 * Verify is the token provided is a {@link PathInNegatedToken}.
 *
 * @param token The token to be verified.
 * @private
 */
export declare function _isPathInNegatedToken(token: PathToken): token is PathInNegatedToken;
