{"version":3,"sources":["patterns/paths/fns/negatedFn.ts"],"names":[],"mappings":";;;AAEA,qEAAoE;AAMpE,8DAA6D;AAE7D,kCAA4C;AAE5C,iCAA2C;AAY3C,IAAM,kBAAkB,GAAG,wBAAgB,CAA8C,iBAAiB,CAAE,CAAC;AAM7G,SAAgB,YAAY,CAAE,SAAgI;IAC7J,OAAO,UAAE,IAAkB;QAC1B,IAAM,KAAK,GAAiB,SAAS,CAAC,WAAW;YAEhD,CAAC,CAAC,SAAS,CAAC,WAAW;YAEvB,CAAC,CAAC,wBAAgB,CAAE,SAAS,EAAE,IAAK,CAAE,CAAC;QAExC,IAAM,cAAc,GAA8C,kBAAkB,CAAE,KAAK,CAAE,CAAC;QAC9F,IAAM,WAAW,GAAoB,IAAI,mCAAgB,CAAE,cAAc,CAAE,CAAC;QAE5E,IAAM,YAAY,GAAyC,IAAI,yCAAmB,sBAC9E,SAAS,IACZ,WAAW,aAAA,IACT,CAAC;QAEJ,OAAO,SAAS,CAAC,iBAAiB,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;IACxD,CAAC,CAAA;AACF,CAAC;AAlBD,oCAkBC","file":"negatedFn.js","sourcesContent":["import { PathAlternativeToken } from \"../../../tokens/PathAlternativeToken\";\nimport { PathInNegatedToken } from \"../../../tokens/PathInNegatedToken\";\nimport { PathNegatedToken } from \"../../../tokens/PathNegatedToken\";\nimport { SubPathInNegatedToken } from \"../../../tokens/SubPathInNegatedToken\";\n\nimport { Resource } from \"../../triplePatterns/Resource\";\n\nimport { FluentPath } from \"../FluentPath\";\nimport { FluentPathContainer } from \"../FluentPathContainer\";\nimport { Path } from \"../Path\";\nimport { getPropertyToken } from \"../utils\";\n\nimport { _getTokenWrapper } from \"./utils\";\n\n\ntype ExpectedToken = PathInNegatedToken | SubPathInNegatedToken | PathAlternativeToken<PathInNegatedToken>;\n\ntype TargetParams =\n\t| Resource\n\t| \"a\"\n\t| string\n\t| Path<ExpectedToken>\n\t;\n\nconst _getInNegatedToken = _getTokenWrapper<PathInNegatedToken | SubPathInNegatedToken>( \"pathAlternative\" );\n\n\nexport type NegatedFn = ( path?:Resource | \"a\" | string | Path<PathInNegatedToken | SubPathInNegatedToken | PathAlternativeToken<PathInNegatedToken>> ) =>\n\tFluentPath<PathNegatedToken>;\n\nexport function getNegatedFn( container:FluentPathContainer<undefined | PathInNegatedToken | SubPathInNegatedToken | PathAlternativeToken<PathInNegatedToken>> ):NegatedFn {\n\treturn ( path?:TargetParams ) => {\n\t\tconst token:ExpectedToken = container.targetToken\n\t\t\t// In FluentPath\n\t\t\t? container.targetToken\n\t\t\t// In FluentPath\n\t\t\t: getPropertyToken( container, path! );\n\n\t\tconst inNegatedToken:PathInNegatedToken | SubPathInNegatedToken = _getInNegatedToken( token );\n\t\tconst targetToken:PathNegatedToken = new PathNegatedToken( inNegatedToken );\n\n\t\tconst newContainer:FluentPathContainer<PathNegatedToken> = new FluentPathContainer( {\n\t\t\t...container,\n\t\t\ttargetToken,\n\t\t} );\n\n\t\treturn container.fluentPathFactory( newContainer, {} );\n\t}\n}\n"],"sourceRoot":"../../../../src"}