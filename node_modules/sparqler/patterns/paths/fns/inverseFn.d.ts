import { IRIToken } from "../../../tokens/IRIToken";
import { PathInNegatedToken } from "../../../tokens/PathInNegatedToken";
import { PathInverseToken } from "../../../tokens/PathInverseToken";
import { PathToken } from "../../../tokens/PathToken";
import { Resource } from "../../triplePatterns/Resource";
import { DeniableFluentPath } from "../DeniableFluentPath";
import { FluentPath } from "../FluentPath";
import { FluentPathContainer } from "../FluentPathContainer";
import { Path } from "../Path";
export declare type InverseFn<T extends PathToken> = (path?: Resource | "a" | string | Path<PathToken>) => DeniableFluentPath<PathInverseToken<IRIToken | "a">> & (T extends PathInNegatedToken ? DeniableFluentPath<PathInverseToken<IRIToken | "a">> : FluentPath<PathInverseToken>);
export declare function getInverseFn<T extends PathToken>(container: FluentPathContainer<undefined | PathToken>): InverseFn<T>;
