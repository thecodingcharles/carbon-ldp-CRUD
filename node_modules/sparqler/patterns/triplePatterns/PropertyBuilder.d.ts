import { Container } from "../../data/Container";
import { Factory } from "../../data/Factory";
import { BlankNodePropertyToken } from "../../tokens/BlankNodePropertyToken";
import { TripleToken } from "../../tokens/TripleToken";
import { Path } from "../paths/Path";
import { SupportedNativeTypes } from "../SupportedNativeTypes";
import { BlankNodeProperty } from "./BlankNodeProperty";
import { Collection } from "./Collection";
import { Literal } from "./Literal";
import { Resource } from "./Resource";
import { Variable } from "./Variable";
/**
 * Object that allows to add a property to the triple related.
 */
export interface PropertyBuilder<T extends object> {
    /**
     * Assign a property and values to the triple statement.
     *
     * @param property The property to be added in the triple.
     * @param objects The value(s) the property added have.
     *
     * @return Object that allows to add more data to the triple.
     */
    has(property: Path | Variable | Resource | "a" | string, objects: (SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty) | (SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty)[]): PropertyBuilderMore<T> & T;
}
/**
 * Object that allows to add more properties to the triple related.
 */
export interface PropertyBuilderMore<T extends object> {
    /**
     * Added another property and values to the triple.
     *
     * @param property The property to be added in the triple.
     * @param objects The value(s) the property added have.
     *
     * @return Object that allows to add more data to the triple.
     */
    and(property: Path | Variable | Resource | "a" | string, objects: (SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty) | (SupportedNativeTypes | Resource | Variable | Literal | Collection | BlankNodeProperty)[]): PropertyBuilderMore<T> & T;
}
/**
 * Constant with the utils for {@link PropertyBuilder} objects.
 */
export declare const PropertyBuilder: {
    /**
     * Factory function that allows to crete a {@link PropertyBuilder}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory of the generic expected to
     * be returned by the {@link PropertyBuilder.has} method.
     * @param container The related container with the data for the
     * {@link PropertyBuilder} statement.
     * @param object The base base from where to create the
     * {@link PropertyBuilder} statement.
     *
     * @return The {@link PropertyBuilder} statement created from the
     * {@param object} provided.
     */
    createFrom<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>, O extends object>(genericFactory: Factory<C, T>, container: C, object: O): O & PropertyBuilder<T>;
};
/**
 * Constant with the utils for {@link PropertyBuilderMore} objects.
 */
export declare const PropertyBuilderMore: {
    /**
     * Factory function that allows to crete a {@link PropertyBuilderMore}
     * from the {@param object} provided.
     *
     * @param genericFactory The factory of the generic expected to
     * be returned by the {@link PropertyBuilderMore.and} method.
     * @param container The related container with the data for the
     * {@link PropertyBuilderMore} statement.
     * @param object The base base from where to create the
     * {@link PropertyBuilderMore} statement.
     *
     * @return The {@link PropertyBuilderMore} statement created from the
     * {@param object} provided.
     */
    createFrom<T extends object, C extends Container<TripleToken | BlankNodePropertyToken>, O extends object>(genericFactory: Factory<C, T>, container: C, object: O): O & PropertyBuilderMore<T>;
};
