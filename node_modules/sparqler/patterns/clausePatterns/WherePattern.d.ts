import { GroupClause } from "../../clauses/GroupClause";
import { Container } from "../../data/Container";
import { SubSelectToken } from "../../tokens/SubSelectToken";
import { Pattern } from "../Pattern";
import { FinishPattern } from "./FinishPattern";
/**
 * Interface with the methods available to make a WHERE statement of
 * a sub-query.
 */
export interface WherePattern {
    /**
     * Sets the graph patterns the sub-query should match to retrieve the
     * sub-solutions data.
     *
     * @param patterns Patterns the sub-query should match.
     *
     * @returns Object with the methods to keep constructing the
     * sub-query.
     */
    where(patterns: Pattern | Pattern[]): GroupClause<FinishPattern> & FinishPattern;
}
/**
 * Constant with the utils for {@link WherePattern} objects.
 */
export declare const WherePattern: {
    /**
     * Factory function that allows to crete a {@link WherePattern}
     * from the {@param object} provided.
     *
     * @param container The related container with the data for the
     * {@link WherePattern} statement.
     * @param object The base base from where to create the
     * {@link WherePattern} statement.
     *
     * @return The {@link WherePattern} statement created from the
     * {@param object} provided.
     */
    createFrom<C extends Container<SubSelectToken>, O extends object>(container: C, object: O): O & WherePattern;
};
