import * as tslib_1 from "tslib";
import { SharedQueryClauseToken } from "./SharedQueryClauseToken";
import { getSeparator, getTokenContainerString } from "./printing";
var ConstructToken = (function (_super) {
    tslib_1.__extends(ConstructToken, _super);
    function ConstructToken() {
        var _this = _super.call(this) || this;
        _this.token = "construct";
        _this.triples = [];
        return _this;
    }
    ConstructToken.prototype.addTriple = function () {
        var triple = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            triple[_i] = arguments[_i];
        }
        var _a;
        (_a = this.triples).push.apply(_a, triple);
        return this;
    };
    ConstructToken.prototype.toString = function (spaces) {
        var triples = getTokenContainerString({
            spaces: spaces,
            tags: { open: "{", close: "}" },
            tokensSeparator: ".",
            tokens: this.triples,
        });
        var separator = getSeparator(spaces);
        var query = "CONSTRUCT " +
            triples + separator +
            this.where.toString(spaces);
        if (this.modifiers.length)
            query += separator + this.modifiers.join(separator);
        return query;
    };
    return ConstructToken;
}(SharedQueryClauseToken));
export { ConstructToken };

//# sourceMappingURL=ConstructToken.js.map
