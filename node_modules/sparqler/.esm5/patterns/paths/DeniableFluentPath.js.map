{"version":3,"sources":["patterns/paths/DeniableFluentPath.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAG1C,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAiB/C,MAAM,CAAC,IAAM,kBAAkB,GAc3B;IACH,UAAU,EAAV,UAA+H,SAAgC,EAAE,MAAQ;QACxK,OAAO,UAAU,CAAC,UAAU,CAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC/D,OAAO,EAAE,YAAY,CAAE,SAAS,CAAE;SAClC,CAAE,CAAE,CAAC;IACP,CAAC;CACD,CAAC","file":"DeniableFluentPath.js","sourcesContent":["import { PathAlternativeToken } from \"../../tokens/PathAlternativeToken\";\nimport { PathInNegatedToken } from \"../../tokens/PathInNegatedToken\";\nimport { PathNegatedToken } from \"../../tokens/PathNegatedToken\";\nimport { SubPathInNegatedToken } from \"../../tokens/SubPathInNegatedToken\";\n\nimport { FluentPath } from \"./FluentPath\";\nimport { FluentPathContainer } from \"./FluentPathContainer\";\n\nimport { getNegatedFn } from \"./fns/negatedFn\";\n\n\n/**\n * The interface that add a function to negate the current path.\n *\n * This is a different interface, since the only special paths can\n * be negated.\n */\nexport interface DeniableFluentPath<T extends PathInNegatedToken | SubPathInNegatedToken | PathAlternativeToken<PathInNegatedToken>> extends FluentPath<T> {\n\tnegated():FluentPath<PathNegatedToken>\n}\n\n\n/**\n * Constant with the utils for {@link DeniableFluentPath} objects.\n */\nexport const DeniableFluentPath:{\n\t/**\n\t * Factory function that allows to crete a {@link DeniableFluentPath}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link DeniableFluentPath} statement.\n\t * @param object The base base from where to create the\n\t * {@link DeniableFluentPath} statement.\n\t *\n\t * @return The {@link DeniableFluentPath} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<T extends PathInNegatedToken | SubPathInNegatedToken | PathAlternativeToken<PathInNegatedToken>, O extends object>( container:FluentPathContainer<T>, object:O ):O & DeniableFluentPath<T>;\n} = {\n\tcreateFrom<T extends PathInNegatedToken | SubPathInNegatedToken | PathAlternativeToken<PathInNegatedToken>, O extends object>( container:FluentPathContainer<T>, object:O ):O & DeniableFluentPath<T> {\n\t\treturn FluentPath.createFrom( container, Object.assign( object, {\n\t\t\tnegated: getNegatedFn( container ),\n\t\t} ) );\n\t},\n};"],"sourceRoot":"../../../src"}