import * as tslib_1 from "tslib";
import { SharedSubPathToken } from "../../../tokens/SharedSubPathToken";
import { FluentPathContainer } from "../FluentPathContainer";
import { getPropertyToken } from "../utils";
import { _isPathInNegatedToken } from "./utils";
function _canBeNegated(token) {
    return !token
        || _isPathInNegatedToken(token)
        || (token.token === "pathAlternative" && token.paths.every(_isPathInNegatedToken));
}
export function getSubPathFn(container) {
    return function (path) {
        var token = container.targetToken
            ? container.targetToken
            : path === void 0 ? path
                : getPropertyToken(container, path);
        var targetToken = new SharedSubPathToken(token);
        var newContainer = new FluentPathContainer(tslib_1.__assign({}, container, { targetToken: targetToken }));
        if (_canBeNegated(token))
            return container.deniableFluentPathFactory(newContainer, {});
        return container.fluentPathFactory(newContainer, {});
    };
}

//# sourceMappingURL=subPathFn.js.map
