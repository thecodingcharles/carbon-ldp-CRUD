import * as tslib_1 from "tslib";
import { DeniableFluentPath } from "./DeniableFluentPath";
import { FluentPath } from "./FluentPath";
import { FluentPathContainer } from "./FluentPathContainer";
import { PathBuilder } from "./PathBuilder";
import { getPropertyToken } from "./utils";
function _getContainer(container, targetToken) {
    return new FluentPathContainer(tslib_1.__assign({}, container, { targetToken: targetToken, fluentPathFactory: FluentPath.createFrom, deniableFluentPathFactory: DeniableFluentPath.createFrom }));
}
function _parseProperty(container, property) {
    var targetToken = getPropertyToken(container, property);
    var newContainer = _getContainer(container, targetToken);
    return DeniableFluentPath.createFrom(newContainer, {});
}
function getPathFn(container) {
    return function (propertyOrBuilderFn) {
        if (typeof propertyOrBuilderFn !== "function")
            return _parseProperty(container, propertyOrBuilderFn);
        var newContainer = _getContainer(container);
        var pathBuilder = PathBuilder.createFrom(newContainer, {});
        return propertyOrBuilderFn(pathBuilder);
    };
}
export var PathsBuilder = {
    createFrom: function (container, object) {
        return Object.assign(object, {
            path: getPathFn(container),
        });
    }
};

//# sourceMappingURL=PathsBuilder.js.map
