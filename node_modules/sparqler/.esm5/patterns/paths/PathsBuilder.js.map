{"version":3,"sources":["patterns/paths/PathsBuilder.ts"],"names":[],"mappings":";AAOA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAY3C,SAAS,aAAa,CAAmC,SAA8B,EAAE,WAAc;IACtG,OAAO,IAAI,mBAAmB,sBAC1B,SAAS,IACZ,WAAW,EAAE,WAAY,EACzB,iBAAiB,EAAE,UAAU,CAAC,UAAU,EACxC,yBAAyB,EAAE,kBAAkB,CAAC,UAAU,IACtD,CAAC;AACL,CAAC;AASD,SAAS,cAAc,CAAE,SAA8B,EAAE,QAAgC;IACxF,IAAM,WAAW,GAAkB,gBAAgB,CAAE,SAAS,EAAE,QAAQ,CAAE,CAAC;IAE3E,IAAM,YAAY,GAAuC,aAAa,CAAE,SAAS,EAAE,WAAW,CAAE,CAAC;IACjG,OAAO,kBAAkB,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;AAC1D,CAAC;AAED,SAAS,SAAS,CAAE,SAA8B;IACjD,OAAO,UAAE,mBAA8F;QACtG,IAAI,OAAO,mBAAmB,KAAK,UAAU;YAC5C,OAAO,cAAc,CAAE,SAAS,EAAE,mBAAmB,CAAE,CAAC;QAEzD,IAAM,YAAY,GAAkC,aAAa,CAAE,SAAS,CAAE,CAAC;QAE/E,IAAM,WAAW,GAAe,WAAW,CAAC,UAAU,CAAE,YAAY,EAAE,EAAE,CAAE,CAAC;QAC3E,OAAO,mBAAmB,CAAE,WAAW,CAAE,CAAC;IAC3C,CAAC,CAAC;AACH,CAAC;AAMD,MAAM,CAAC,IAAM,YAAY,GAcrB;IACH,UAAU,EAAV,UAA8B,SAA8B,EAAE,MAAQ;QACrE,OAAO,MAAM,CAAC,MAAM,CAAE,MAAM,EAAE;YAC7B,IAAI,EAAE,SAAS,CAAE,SAAS,CAAE;SAC5B,CAAE,CAAA;IACJ,CAAC;CACD,CAAC","file":"PathsBuilder.js","sourcesContent":["import { Container } from \"../../data/Container\";\n\nimport { IRIToken } from \"../../tokens/IRIToken\";\nimport { PathToken } from \"../../tokens/PathToken\";\n\nimport { Resource } from \"../triplePatterns/Resource\";\n\nimport { DeniableFluentPath } from \"./DeniableFluentPath\";\nimport { FluentPath } from \"./FluentPath\";\nimport { FluentPathContainer } from \"./FluentPathContainer\";\nimport { Path } from \"./Path\";\nimport { PathBuilder } from \"./PathBuilder\";\nimport { getPropertyToken } from \"./utils\";\n\n\n/**\n * Object with the methods to build a property path.\n */\nexport interface PathsBuilder {\n\tpath( property:Resource | \"a\" | string ):DeniableFluentPath<IRIToken | \"a\">;\n\tpath<T extends FluentPath<PathToken>>( builderFn:( pathBuilder:PathBuilder ) => T ):T;\n}\n\n\nfunction _getContainer<T extends PathToken | undefined>( container:Container<undefined>, targetToken?:T ):FluentPathContainer<T> {\n\treturn new FluentPathContainer<T>( {\n\t\t...container,\n\t\ttargetToken: targetToken!,\n\t\tfluentPathFactory: FluentPath.createFrom,\n\t\tdeniableFluentPathFactory: DeniableFluentPath.createFrom,\n\t} );\n}\n\n/**\n * Create a {@link Path} from the property provided.\n *\n * @param container The general container with the {@link IRIResolver}\n * that will be used to resolve a string property.\n * @param property The property to be converted into a Path.\n */\nfunction _parseProperty( container:Container<undefined>, property:Resource | \"a\" | string ):DeniableFluentPath<IRIToken | \"a\"> {\n\tconst targetToken:IRIToken | \"a\" = getPropertyToken( container, property );\n\n\tconst newContainer:FluentPathContainer<IRIToken | \"a\"> = _getContainer( container, targetToken );\n\treturn DeniableFluentPath.createFrom( newContainer, {} );\n}\n\nfunction getPathFn( container:Container<undefined> ):PathsBuilder[ \"path\" ] {\n\treturn ( propertyOrBuilderFn:Resource | \"a\" | string | (( pathBuilder:PathBuilder ) => Path<PathToken>) ):any => {\n\t\tif( typeof propertyOrBuilderFn !== \"function\" )\n\t\t\treturn _parseProperty( container, propertyOrBuilderFn );\n\n\t\tconst newContainer:FluentPathContainer<undefined> = _getContainer( container );\n\n\t\tconst pathBuilder:PathBuilder = PathBuilder.createFrom( newContainer, {} );\n\t\treturn propertyOrBuilderFn( pathBuilder );\n\t};\n}\n\n\n/**\n * Constant with the utils for {@link PathsBuilder} objects.\n */\nexport const PathsBuilder:{\n\t/**\n\t * Factory function that allows to crete a {@link PathsBuilder}\n\t * from the {@param object} provided.\n\t *\n\t * @param container The related container with the data for the\n\t * {@link PathsBuilder} statement.\n\t * @param object The base base from where to create the\n\t * {@link PathsBuilder} statement.\n\t *\n\t * @return The {@link PathsBuilder} statement created from the\n\t * {@param object} provided.\n\t */\n\tcreateFrom<O extends object>( container:Container<undefined>, object:O ):O & PathsBuilder;\n} = {\n\tcreateFrom<O extends object>( container:Container<undefined>, object:O ):O & PathsBuilder {\n\t\treturn Object.assign( object, {\n\t\t\tpath: getPathFn( container ),\n\t\t} )\n\t}\n};\n"],"sourceRoot":"../../../src"}