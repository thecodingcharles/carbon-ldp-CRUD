import { GroupClause } from "../../clauses/GroupClause";
import { cloneElement } from "../../data/utils";
import { WhereToken } from "../../tokens/WhereToken";
import { FinishPattern } from "./FinishPattern";
function getWhereFn(container) {
    return function (patterns) {
        var _a;
        var where = new WhereToken();
        patterns = Array.isArray(patterns) ? patterns : [patterns];
        (_a = where.groupPattern.patterns).push.apply(_a, patterns.map(function (x) { return x.getPattern(); }));
        var targetToken = cloneElement(container.targetToken, { where: where });
        var newContainer = cloneElement(container, { targetToken: targetToken });
        var groupClause = GroupClause.createFrom(FinishPattern.createFrom, newContainer, {});
        return FinishPattern.createFrom(newContainer, groupClause);
    };
}
export var WherePattern = {
    createFrom: function (container, object) {
        return Object.assign(object, {
            where: getWhereFn(container),
        });
    },
};

//# sourceMappingURL=WherePattern.js.map
