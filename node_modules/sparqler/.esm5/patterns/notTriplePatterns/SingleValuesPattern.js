import { cloneElement } from "../../data/utils";
import { convertValue } from "../utils";
import { NotTriplePattern } from "./NotTriplePattern";
function getHasFn(container) {
    return function (value) {
        var values = container.targetToken.values.slice();
        if (!values.length)
            values.push([]);
        values[0] = values[0].concat(convertValue(value));
        var targetToken = cloneElement(container.targetToken, { values: values });
        var newContainer = cloneElement(container, { targetToken: targetToken });
        return SingleValuesPatternMore.createFrom(newContainer, {});
    };
}
export var SingleValuesPattern = {
    createFrom: function (container, object) {
        return NotTriplePattern.createFrom(container, Object.assign(object, {
            has: getHasFn(container),
        }));
    },
};
export var SingleValuesPatternMore = {
    createFrom: function (container, object) {
        return NotTriplePattern.createFrom(container, Object.assign(object, {
            and: getHasFn(container),
        }));
    },
};

//# sourceMappingURL=SingleValuesPattern.js.map
