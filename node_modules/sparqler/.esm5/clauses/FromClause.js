import { IRIResolver } from "../data/IRIResolver";
import { cloneElement } from "../data/utils";
import { FromToken } from "../tokens/FromToken";
import { WhereClause } from "./WhereClause";
function getFromFn(genericFactory, container, named) {
    return function (iri) {
        var iriResolver = new IRIResolver(container.iriResolver);
        var datasets = container.targetToken.queryClause.datasets
            .concat(new FromToken(iriResolver.resolve(iri), named));
        var queryClause = cloneElement(container.targetToken.queryClause, { datasets: datasets });
        var queryToken = cloneElement(container.targetToken, { queryClause: queryClause });
        var newContainer = cloneElement(container, {
            iriResolver: iriResolver,
            targetToken: queryToken,
        });
        return FromClause.createFrom(genericFactory, newContainer, {});
    };
}
export var FromClause = {
    createFrom: function (genericFactory, container, object) {
        return WhereClause.createFrom(genericFactory, container, Object.assign(object, {
            from: getFromFn(genericFactory, container),
            fromNamed: getFromFn(genericFactory, container, true),
        }));
    },
};

//# sourceMappingURL=FromClause.js.map
