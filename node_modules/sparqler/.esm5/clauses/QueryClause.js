import { Factory } from "../data/Factory";
import { IRIResolver } from "../data/IRIResolver";
import { cloneElement } from "../data/utils";
import { BaseToken } from "../tokens/BaseToken";
import { IRIRefToken } from "../tokens/IRIRefToken";
import { PrefixToken } from "../tokens/PrefixToken";
import { AskClause } from "./AskClause";
import { SelectClause } from "./SelectClause";
function base(iri) {
    var token = new BaseToken(new IRIRefToken(iri));
    var prologues = this.targetToken
        .prologues.concat(token);
    var queryToken = cloneElement(this.targetToken, { prologues: prologues });
    var container = cloneElement(this, { targetToken: queryToken });
    return QueryClause.createFrom(container, {});
}
function vocab(iri) {
    var iriResolver = new IRIResolver(this.iriResolver, iri);
    var container = cloneElement(this, { iriResolver: iriResolver });
    return QueryClause.createFrom(container, {});
}
function prefix(name, iri) {
    var iriResolver = new IRIResolver(this.iriResolver);
    var prologues = this.targetToken.prologues.slice();
    if (iriResolver.prefixes.has(name)) {
        var index = prologues
            .findIndex(function (token) { return token.token === "prefix" && token.namespace === name; });
        if (index !== -1)
            prologues.splice(index, 1);
    }
    prologues.push(new PrefixToken(name, new IRIRefToken(iri)));
    iriResolver.prefixes.set(name, false);
    var queryToken = cloneElement(this.targetToken, { prologues: prologues });
    var container = cloneElement(this, {
        iriResolver: iriResolver,
        targetToken: queryToken,
    });
    return QueryClause.createFrom(container, {});
}
export var QueryClause = {
    createFrom: function (container, object) {
        var selectFactory = SelectClause
            .createFrom.bind(null, container.selectFinishClauseFactory);
        var askFactory = AskClause
            .createFrom.bind(null, container.askFinishClauseFactory);
        return Factory.createFrom(selectFactory, askFactory)(container, Object.assign(object, {
            base: base.bind(container),
            vocab: vocab.bind(container),
            prefix: prefix.bind(container),
        }));
    },
};

//# sourceMappingURL=QueryClause.js.map
