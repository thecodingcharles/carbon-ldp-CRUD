{"version":3,"sources":["clauses/FinishClause.ts"],"names":[],"mappings":"AA0CA,MAAM,CAAC,IAAM,YAAY,GAAG;IAC3B,UAAU,EAAV,UAA8B,SAA8B,EAAE,MAAQ;QACrE,IAAM,cAAc,GAAoC;YACvD,OAAA,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAE,CAAC,CAAE;QAAnC,CAAmC,CAAC;QAErC,IAAM,KAAK,GAA2B,UAAA,OAAO;YAC5C,OAAO,CAAC,IAAI,CAAE,KAAK,CAAC,EAAE,MAAM,EAAE,SAAS,CAAE,CAAC;YAC1C,OAAO,MAA0B,CAAC;QACnC,CAAC,CAAC;QAEF,OAAO,MAAM,CAAC,MAAM,CAAmB,MAAM,EAAE;YAC9C,eAAe,EAAE,cAAM,OAAA,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAhC,CAAgC;YACvD,cAAc,EAAE,cAAc;YAC9B,QAAQ,EAAE,cAAc;YACxB,KAAK,OAAA;SACL,CAAE,CAAC;IACL,CAAC;CACD,CAAC","file":"FinishClause.js","sourcesContent":["import { Container } from \"../data/Container\";\n\nimport { TokenNode } from \"../tokens/TokenNode\";\n\n\n/**\n * Interface with methods to construct the final SPARQL query string.\n */\nexport interface FinishClause {\n\t/**\n\t * Constructs a compact SPARQL query string.\n\t *\n\t * Tries to minimize the optional elements and the blank spaces\n\t * between the elements of the query.\n\t *\n\t * @returns The compact string.\n\t */\n\ttoCompactString():string;\n\n\t/**\n\t * Constructs a pretty SPARQL query string.\n\t *\n\t * Prints the statements with indentation and also print all the\n\t * elements even if their are optional ones.\n\t *\n\t * @returns The pretty string.\n\t */\n\ttoPrettyString():string;\n\n\t/**\n\t * Return the same result as {@link FinishClause.toPrettyString}\n\t */\n\ttoString():string;\n\n\n\tdebug( debugFn:( query:this, container:Container<TokenNode> ) => any ):this;\n}\n\n\n/**\n * Constant with the utils for {@link FinishClause} objects.\n */\nexport const FinishClause = {\n\tcreateFrom<O extends object>( container:Container<TokenNode>, object:O ):O & FinishClause {\n\t\tconst toPrettyString:FinishClause[ \"toPrettyString\" ] = () =>\n\t\t\tcontainer.targetToken.toString( 0 );\n\n\t\tconst debug:FinishClause[ \"debug\" ] = debugFn => {\n\t\t\tdebugFn.call( void 0, object, container );\n\t\t\treturn object as O & FinishClause;\n\t\t};\n\n\t\treturn Object.assign<O, FinishClause>( object, {\n\t\t\ttoCompactString: () => container.targetToken.toString(),\n\t\t\ttoPrettyString: toPrettyString,\n\t\t\ttoString: toPrettyString,\n\t\t\tdebug,\n\t\t} );\n\t}\n};"],"sourceRoot":"../../src"}