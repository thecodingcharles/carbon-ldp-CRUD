import { TokenNode } from "./TokenNode";
/**
 * The number of spaces to be used as indentation in the pretty print
 * mode of the tokens.
 */
export declare const INDENTATION_SPACES: 4;
/**
 * Returns the separator of tokens depending in the spaces provided.
 *
 * If no spaces provided this means the printing mode is in compact
 * and so a blank space will be returned, otherwise a new line will
 * be the one returned.
 *
 * @param spaces The spaces of the current indentation of the tokens.
 */
export declare function getSeparator(spaces?: number): string;
/**
 * Get the full indentation for a token line printing.
 *
 * If no spaces is provided, this means the printing mode is in
 * compact and no indentation is needed and so a empty string will be
 * returned, even if extra spaces are also provided.
 *
 * Otherwise, a string with the sum of the spaces and the extra ones
 * as empty spaces will be returned..
 *
 * @param spaces The spaces of the current indentation of a line.
 * @param extra Extra spaces to be added in the indentation line.
 */
export declare function getIndentation(spaces?: number, extra?: number): string;
/**
 * Returns the sum of the provided spaces with the extra ones.
 *
 * If spaces is undefined it means the current printing mode is
 * compact and so undefined will be returned.
 *
 * @param spaces The spaces of the current indentation of a line.
 * @param extra The extra spaces to be added in the indentation.
 */
export declare function addSpaces(spaces: number | undefined, extra: number): number | undefined;
/**
 * Returns the printing of a group of tokens that are contained in a
 * specific block.
 *
 * @param spaces The spaces of the current indentation.
 * @param tags The close and open tag of the token container to print.
 * @param tokensSeparator The separator betaken the tokens.
 * @param tokens The actual tokens to be printed.
 */
export declare function getTokenContainerString({ spaces, tags, tokensSeparator, tokens }: {
    spaces: number | undefined;
    tags: {
        open: string;
        close: string;
    };
    tokensSeparator?: string;
    tokens: TokenNode[];
}): string;
